
Glove2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000140e0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08014220  08014220  00024220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080146b8  080146b8  000246b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080146bc  080146bc  000246bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000178  20000008  080146c0  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_DRIVER_CONTEXT 00000035  20000180  08014838  00030180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  200001b8  0801486d  000301b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000030cc  200001cc  0801487e  000301cc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003298  0801487e  00033298  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030a67  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 13 .MB_MEM2      00000883  200301e4  0801487e  000301e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .comment      00000043  00000000  00000000  00030a97  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003a2bc  00000000  00000000  00030ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008824  00000000  00000000  0006ad96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003440  00000000  00000000  000735c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000027d9  00000000  00000000  00076a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00031f98  00000000  00000000  000791d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00041d4b  00000000  00000000  000ab171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00104bb3  00000000  00000000  000ecebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000dd38  00000000  00000000  001f1a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  001ff7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001cc 	.word	0x200001cc
 800015c:	00000000 	.word	0x00000000
 8000160:	08014208 	.word	0x08014208

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d0 	.word	0x200001d0
 800017c:	08014208 	.word	0x08014208

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <init>:
		return FloatNumber;

	return (FloatNumber * -1);
}

bool init(){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
    currentBank = 0;
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]

    reset_ICM20948();
 8000b36:	f000 f94b 	bl	8000dd0 <reset_ICM20948>

    if(whoAmI() != ICM20948_WHO_AM_I_CONTENT){
 8000b3a:	f000 f855 	bl	8000be8 <whoAmI>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <init+0x9c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d001      	beq.n	8000b4e <init+0x22>
        return false;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e037      	b.n	8000bbe <init+0x92>
    }

    accOffsetVal.x = 0.0;
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <init+0xa0>)
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
    accOffsetVal.y = 0.0;
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <init+0xa0>)
 8000b58:	f04f 0200 	mov.w	r2, #0
 8000b5c:	605a      	str	r2, [r3, #4]
    accOffsetVal.z = 0.0;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <init+0xa0>)
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
    accCorrFactor.x = 1.0;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <init+0xa4>)
 8000b68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b6c:	601a      	str	r2, [r3, #0]
    accCorrFactor.y = 1.0;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <init+0xa4>)
 8000b70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b74:	605a      	str	r2, [r3, #4]
    accCorrFactor.z = 1.0;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <init+0xa4>)
 8000b78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b7c:	609a      	str	r2, [r3, #8]
    accRangeFactor = 1.0;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <init+0xa8>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
    gyrOffsetVal.x = 0.0;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <init+0xac>)
 8000b86:	f04f 0200 	mov.w	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
    gyrOffsetVal.y = 0.0;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <init+0xac>)
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
    gyrOffsetVal.z = 0.0;
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <init+0xac>)
 8000b96:	f04f 0200 	mov.w	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
    gyrRangeFactor = 1.0;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <init+0xb0>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
    fifoType = ICM20948_FIFO_ACC;
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <init+0xb4>)
 8000ba4:	2210      	movs	r2, #16
 8000ba6:	701a      	strb	r2, [r3, #0]

    sleep(false);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f000 f82b 	bl	8000c04 <sleep>
    writeRegister8(2, ICM20948_ODR_ALIGN_EN, 1); // aligns ODR
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <init+0xb8>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f000 f88c 	bl	8000cd4 <writeRegister8>

    return true;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200001e9 	.word	0x200001e9
 8000bc8:	2000000e 	.word	0x2000000e
 8000bcc:	200001ec 	.word	0x200001ec
 8000bd0:	200001f8 	.word	0x200001f8
 8000bd4:	20000210 	.word	0x20000210
 8000bd8:	20000204 	.word	0x20000204
 8000bdc:	20000211 	.word	0x20000211
 8000be0:	20000213 	.word	0x20000213
 8000be4:	2000000a 	.word	0x2000000a

08000be8 <whoAmI>:
//    gyrOffsetVal.x = xOffset;
//    gyrOffsetVal.y = yOffset;
//    gyrOffsetVal.z = zOffset;
//}

uint8_t whoAmI(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
    return readRegister8(0, ICM20948_WHO_AM_I);
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <whoAmI+0x18>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 f894 	bl	8000d20 <readRegister8>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200001e8 	.word	0x200001e8

08000c04 <sleep>:
//
//void setAccAverageInCycleMode(ICM20948_accAvgLowPower avg){
//    writeRegister8(2, ICM20948_ACCEL_CONFIG_2, avg);
//}

void sleep(bool sleep){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
    regVal = readRegister8(0, ICM20948_PWR_MGMT_1);
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <sleep+0x68>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4619      	mov	r1, r3
 8000c14:	2000      	movs	r0, #0
 8000c16:	f000 f883 	bl	8000d20 <readRegister8>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <sleep+0x6c>)
 8000c20:	701a      	strb	r2, [r3, #0]
    if(sleep){
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d008      	beq.n	8000c3a <sleep+0x36>
        regVal |= ICM20948_SLEEP;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <sleep+0x6c>)
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <sleep+0x70>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <sleep+0x6c>)
 8000c36:	701a      	strb	r2, [r3, #0]
 8000c38:	e00c      	b.n	8000c54 <sleep+0x50>
    }
    else{
        regVal &= ~ICM20948_SLEEP;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <sleep+0x70>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	b25a      	sxtb	r2, r3
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <sleep+0x6c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <sleep+0x6c>)
 8000c52:	701a      	strb	r2, [r3, #0]
    }
    writeRegister8(0, ICM20948_PWR_MGMT_1, regVal);
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <sleep+0x68>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <sleep+0x6c>)
 8000c5a:	7812      	ldrb	r2, [r2, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f838 	bl	8000cd4 <writeRegister8>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000212 	.word	0x20000212
 8000c74:	2000000d 	.word	0x2000000d

08000c78 <switchBank>:
//    gyrRawVal.z -= (gyrOffsetVal.z / gyrRangeFactor);
//
//    return gyrRawVal;
//}

void switchBank(uint8_t newBank){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af04      	add	r7, sp, #16
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
	currentBank = newBank;
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <switchBank+0x48>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	7013      	strb	r3, [r2, #0]
	BankSelectCmd = currentBank << 4;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <switchBank+0x48>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <switchBank+0x4c>)
 8000c92:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (i2cAddress << 1), ICM20948_REG_BANK_SEL, I2C_MEMADD_SIZE_8BIT, &BankSelectCmd, 1, 0x00000010);
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <switchBank+0x50>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <switchBank+0x54>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	9302      	str	r3, [sp, #8]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	9301      	str	r3, [sp, #4]
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <switchBank+0x4c>)
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <switchBank+0x58>)
 8000cb4:	f004 f99e 	bl	8004ff4 <HAL_I2C_Mem_Write>
//        currentBank = newBank;
//        BankSelectCmd = currentBank << 4;
//        HAL_I2C_Mem_Write(&hi2c1, (i2cAddress << 1), ICM20948_REG_BANK_SEL, I2C_MEMADD_SIZE_8BIT, &BankSelectCmd, 1, 0x00000010);
//    }

}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200001e9 	.word	0x200001e9
 8000cc4:	200001ea 	.word	0x200001ea
 8000cc8:	2000000f 	.word	0x2000000f
 8000ccc:	2000000b 	.word	0x2000000b
 8000cd0:	20000fd4 	.word	0x20000fd4

08000cd4 <writeRegister8>:

void writeRegister8(uint8_t bank, uint8_t reg, uint8_t val){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af04      	add	r7, sp, #16
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	71bb      	strb	r3, [r7, #6]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	717b      	strb	r3, [r7, #5]
    switchBank(bank);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ffc5 	bl	8000c78 <switchBank>
    HAL_I2C_Mem_Write(&hi2c1, (i2cAddress << 1), reg, I2C_MEMADD_SIZE_8BIT, &val, 1, 0x00000010);
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <writeRegister8+0x44>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	b299      	uxth	r1, r3
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	2301      	movs	r3, #1
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	1d7b      	adds	r3, r7, #5
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	4804      	ldr	r0, [pc, #16]	; (8000d1c <writeRegister8+0x48>)
 8000d0c:	f004 f972 	bl	8004ff4 <HAL_I2C_Mem_Write>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2000000f 	.word	0x2000000f
 8000d1c:	20000fd4 	.word	0x20000fd4

08000d20 <readRegister8>:
    RegisterCmd[0] = (uint8_t)((val >> 8) & 0xFF);
    RegisterCmd[1] = (uint8_t)(val & 0xFF);
    HAL_I2C_Mem_Write(&hi2c1, (i2cAddress << 1), reg, I2C_MEMADD_SIZE_8BIT, RegisterCmd, 2, 0x00000010);
}

uint8_t readRegister8(uint8_t bank, uint8_t reg){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af04      	add	r7, sp, #16
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	71bb      	strb	r3, [r7, #6]
    switchBank(bank);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ffa0 	bl	8000c78 <switchBank>
    uint8_t regValue = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Mem_Read(&hi2c1, (i2cAddress << 1), reg, I2C_MEMADD_SIZE_8BIT, &regValue, 1, 0x00000010);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <readRegister8+0x4c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	b299      	uxth	r1, r3
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	2310      	movs	r3, #16
 8000d4c:	9302      	str	r3, [sp, #8]
 8000d4e:	2301      	movs	r3, #1
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	f107 030f 	add.w	r3, r7, #15
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <readRegister8+0x50>)
 8000d5c:	f004 fa5e 	bl	800521c <HAL_I2C_Mem_Read>
    return regValue;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000000f 	.word	0x2000000f
 8000d70:	20000fd4 	.word	0x20000fd4

08000d74 <readAllDataAndStatus>:
//void readAllData(uint8_t* data){
//    switchBank(0);
//    HAL_I2C_Mem_Read(&hi2c1, (i2cAddress << 1), ICM20948_ACCEL_OUT, I2C_MEMADD_SIZE_8BIT, data, 20, 0x00000010);
//}

bool readAllDataAndStatus(uint8_t* data){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af04      	add	r7, sp, #16
 8000d7a:	6078      	str	r0, [r7, #4]
//	switchBank(0);
	ret = HAL_I2C_Mem_Read(&hi2c1, (i2cAddress << 1), ICM20948_ACCEL_OUT, I2C_MEMADD_SIZE_8BIT, data, 20, 0x00000004);
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <readAllDataAndStatus+0x4c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	b299      	uxth	r1, r3
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <readAllDataAndStatus+0x50>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	9302      	str	r3, [sp, #8]
 8000d90:	2314      	movs	r3, #20
 8000d92:	9301      	str	r3, [sp, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <readAllDataAndStatus+0x54>)
 8000d9c:	f004 fa3e 	bl	800521c <HAL_I2C_Mem_Read>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <readAllDataAndStatus+0x58>)
 8000da6:	701a      	strb	r2, [r3, #0]
//	ret = HAL_I2C_Mem_Read(&hi2c1, (i2cAddress << 1), ICM20948_ACCEL_OUT, I2C_MEMADD_SIZE_8BIT, data, 12, 0x00000004);

	if (ret == HAL_OK) return true;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <readAllDataAndStatus+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d101      	bne.n	8000db4 <readAllDataAndStatus+0x40>
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <readAllDataAndStatus+0x42>
	else return false;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000000f 	.word	0x2000000f
 8000dc4:	20000009 	.word	0x20000009
 8000dc8:	20000fd4 	.word	0x20000fd4
 8000dcc:	200001eb 	.word	0x200001eb

08000dd0 <reset_ICM20948>:
    regValue = readRegister16(0, ICM20948_EXT_SLV_SENS_DATA_00);
    enableMagDataRead(AK09916_HXL, 0x08);
    return regValue;
}

void reset_ICM20948(){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
    writeRegister8(0, ICM20948_PWR_MGMT_1, ICM20948_RESET);
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <reset_ICM20948+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <reset_ICM20948+0x24>)
 8000dda:	7812      	ldrb	r2, [r2, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff ff78 	bl	8000cd4 <writeRegister8>
    HAL_Delay(10);  // wait for registers to reset
 8000de4:	200a      	movs	r0, #10
 8000de6:	f001 fec4 	bl	8002b72 <HAL_Delay>
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008
 8000df4:	2000000c 	.word	0x2000000c

08000df8 <TCA_Select>:
int P = 0;
float temp = 0;


/* Code begin */
void TCA_Select(int num){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af02      	add	r7, sp, #8
 8000dfe:	6078      	str	r0, [r7, #4]
	cmd = (0x01 << num);
 8000e00:	2201      	movs	r2, #1
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <TCA_Select+0x30>)
 8000e0c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, (TCA_ADDR << 1), &cmd, 1, 0x00000005);
 8000e0e:	2305      	movs	r3, #5
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2301      	movs	r3, #1
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <TCA_Select+0x30>)
 8000e16:	21e0      	movs	r1, #224	; 0xe0
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <TCA_Select+0x34>)
 8000e1a:	f003 ffd3 	bl	8004dc4 <HAL_I2C_Master_Transmit>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000034 	.word	0x20000034
 8000e2c:	20000fd4 	.word	0x20000fd4

08000e30 <IMU_All_Init>:

void IMU_All_Init(){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	for(int index = 0; index < count; index ++){
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e01b      	b.n	8000e74 <IMU_All_Init+0x44>
		// Select I2C Mux
		TCA_Select(TCA_Select_Index[index]);
 8000e3c:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <IMU_All_Init+0x58>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ffd7 	bl	8000df8 <TCA_Select>

		// Initialize IMU
		if (init() == true)
 8000e4a:	f7ff fe6f 	bl	8000b2c <init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d10c      	bne.n	8000e6e <IMU_All_Init+0x3e>
			init_status = init_status | (0x01 << index);
 8000e54:	2201      	movs	r2, #1
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	b25a      	sxtb	r2, r3
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <IMU_All_Init+0x5c>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <IMU_All_Init+0x5c>)
 8000e6c:	701a      	strb	r2, [r3, #0]
	for(int index = 0; index < count; index ++){
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3301      	adds	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <IMU_All_Init+0x60>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	dbde      	blt.n	8000e3c <IMU_All_Init+0xc>

//		if (initMagnetometer() == true)
//			init_status = init_status & (0x01 << index);
	}
}
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000018 	.word	0x20000018
 8000e8c:	200003b2 	.word	0x200003b2
 8000e90:	20000014 	.word	0x20000014

08000e94 <IMU_All_Bank_0>:

void IMU_All_Bank_0(){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
	for(int index = 0; index < count; index ++){
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	e016      	b.n	8000ece <IMU_All_Bank_0+0x3a>
		if ((init_status & (0x01 << index)) > 0){
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <IMU_All_Bank_0+0x50>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	400b      	ands	r3, r1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	dd09      	ble.n	8000ec8 <IMU_All_Bank_0+0x34>
			// Select I2C Mux
			TCA_Select(TCA_Select_Index[index]);
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <IMU_All_Bank_0+0x54>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff9b 	bl	8000df8 <TCA_Select>

			// Switch IMU bank 0 to get data
			switchBank(0);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff fed8 	bl	8000c78 <switchBank>
	for(int index = 0; index < count; index ++){
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <IMU_All_Bank_0+0x58>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbe3      	blt.n	8000ea0 <IMU_All_Bank_0+0xc>
		}
	}
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200003b2 	.word	0x200003b2
 8000ee8:	20000018 	.word	0x20000018
 8000eec:	20000014 	.word	0x20000014

08000ef0 <IMU_All_Read_Data>:

void IMU_All_Read_Data(uint8_t* buf){
 8000ef0:	b5b0      	push	{r4, r5, r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	counter++;
 8000ef8:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <IMU_All_Read_Data+0xdc>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <IMU_All_Read_Data+0xdc>)
 8000f02:	701a      	strb	r2, [r3, #0]
	read_status = 0x00;
 8000f04:	4b32      	ldr	r3, [pc, #200]	; (8000fd0 <IMU_All_Read_Data+0xe0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
	*(buf + 0) = counter;
 8000f0a:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <IMU_All_Read_Data+0xdc>)
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	701a      	strb	r2, [r3, #0]

	for(int index = 0; index < count; index++){
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	e046      	b.n	8000fa6 <IMU_All_Read_Data+0xb6>
		if ((init_status & (0x01 << index)) > 0){
 8000f18:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <IMU_All_Read_Data+0xe4>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2201      	movs	r2, #1
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	400b      	ands	r3, r1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	dd39      	ble.n	8000fa0 <IMU_All_Read_Data+0xb0>
			for(int buf_index = 0; buf_index < 20; buf_index++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	e007      	b.n	8000f42 <IMU_All_Read_Data+0x52>
				IMU_buf[buf_index] = 0x00;
 8000f32:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <IMU_All_Read_Data+0xe8>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4413      	add	r3, r2
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
			for(int buf_index = 0; buf_index < 20; buf_index++)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	2b13      	cmp	r3, #19
 8000f46:	ddf4      	ble.n	8000f32 <IMU_All_Read_Data+0x42>

			// Select I2C Mux
			TCA_Select(TCA_Select_Index[index]);
 8000f48:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <IMU_All_Read_Data+0xec>)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff51 	bl	8000df8 <TCA_Select>

			// Read data from IMU
			if (readAllDataAndStatus(IMU_buf))
 8000f56:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <IMU_All_Read_Data+0xe8>)
 8000f58:	f7ff ff0c 	bl	8000d74 <readAllDataAndStatus>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00c      	beq.n	8000f7c <IMU_All_Read_Data+0x8c>
				read_status = read_status | (0x01 << index);
 8000f62:	2201      	movs	r2, #1
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	b25a      	sxtb	r2, r3
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <IMU_All_Read_Data+0xe0>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <IMU_All_Read_Data+0xe0>)
 8000f7a:	701a      	strb	r2, [r3, #0]

			// Copy data from IMU buffer to external buffer
			memcpy((buf + 3 + index * 20), IMU_buf, 20);
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	3303      	adds	r3, #3
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <IMU_All_Read_Data+0xe8>)
 8000f8e:	461d      	mov	r5, r3
 8000f90:	4614      	mov	r4, r2
 8000f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f94:	6028      	str	r0, [r5, #0]
 8000f96:	6069      	str	r1, [r5, #4]
 8000f98:	60aa      	str	r2, [r5, #8]
 8000f9a:	60eb      	str	r3, [r5, #12]
 8000f9c:	6820      	ldr	r0, [r4, #0]
 8000f9e:	6128      	str	r0, [r5, #16]
	for(int index = 0; index < count; index++){
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <IMU_All_Read_Data+0xf0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbb3      	blt.n	8000f18 <IMU_All_Read_Data+0x28>
		}
	}
	// Copy IMU status to external buffer
	*(buf + 1) = init_status;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <IMU_All_Read_Data+0xe4>)
 8000fb6:	7812      	ldrb	r2, [r2, #0]
 8000fb8:	701a      	strb	r2, [r3, #0]
	*(buf + 2) = read_status;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <IMU_All_Read_Data+0xe0>)
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	701a      	strb	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bdb0      	pop	{r4, r5, r7, pc}
 8000fcc:	200003b4 	.word	0x200003b4
 8000fd0:	200003b3 	.word	0x200003b3
 8000fd4:	200003b2 	.word	0x200003b2
 8000fd8:	20000338 	.word	0x20000338
 8000fdc:	20000018 	.word	0x20000018
 8000fe0:	20000014 	.word	0x20000014
 8000fe4:	00000000 	.word	0x00000000

08000fe8 <FFT_Init>:

void FFT_Init(int All){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	if (All == 1){
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	f040 80a3 	bne.w	800113e <FFT_Init+0x156>
		for(int index = 0; index < SAMPLES; index++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e09b      	b.n	8001136 <FFT_Init+0x14e>
			CosList[index] = cos(2 * PI * index / SAMPLES);
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f7ff fa18 	bl	8000434 <__aeabi_i2d>
 8001004:	a364      	add	r3, pc, #400	; (adr r3, 8001198 <FFT_Init+0x1b0>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fa7d 	bl	8000508 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	4b61      	ldr	r3, [pc, #388]	; (80011a0 <FFT_Init+0x1b8>)
 800101c:	f7ff fb9e 	bl	800075c <__aeabi_ddiv>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	ec43 2b17 	vmov	d7, r2, r3
 8001028:	eeb0 0a47 	vmov.f32	s0, s14
 800102c:	eef0 0a67 	vmov.f32	s1, s15
 8001030:	f012 f856 	bl	80130e0 <cos>
 8001034:	ec53 2b10 	vmov	r2, r3, d0
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fd26 	bl	8000a8c <__aeabi_d2f>
 8001040:	4602      	mov	r2, r0
 8001042:	4958      	ldr	r1, [pc, #352]	; (80011a4 <FFT_Init+0x1bc>)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	601a      	str	r2, [r3, #0]
			SinList[index] = -sin(2 * PI * index / SAMPLES);
 800104c:	6978      	ldr	r0, [r7, #20]
 800104e:	f7ff f9f1 	bl	8000434 <__aeabi_i2d>
 8001052:	a351      	add	r3, pc, #324	; (adr r3, 8001198 <FFT_Init+0x1b0>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fa56 	bl	8000508 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	4b4d      	ldr	r3, [pc, #308]	; (80011a0 <FFT_Init+0x1b8>)
 800106a:	f7ff fb77 	bl	800075c <__aeabi_ddiv>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	ec43 2b17 	vmov	d7, r2, r3
 8001076:	eeb0 0a47 	vmov.f32	s0, s14
 800107a:	eef0 0a67 	vmov.f32	s1, s15
 800107e:	f012 f883 	bl	8013188 <sin>
 8001082:	ec53 2b10 	vmov	r2, r3, d0
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fcff 	bl	8000a8c <__aeabi_d2f>
 800108e:	4603      	mov	r3, r0
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef1 7a67 	vneg.f32	s15, s15
 8001098:	4a43      	ldr	r2, [pc, #268]	; (80011a8 <FFT_Init+0x1c0>)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	edc3 7a00 	vstr	s15, [r3]

			IndexList[index] = index;
 80010a4:	4941      	ldr	r1, [pc, #260]	; (80011ac <FFT_Init+0x1c4>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			IndexList[index] = ((IndexList[index] & 0b11110000) >> 4) | ((IndexList[index] & 0b00001111) << 4);
 80010ae:	4a3f      	ldr	r2, [pc, #252]	; (80011ac <FFT_Init+0x1c4>)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b6:	111b      	asrs	r3, r3, #4
 80010b8:	f003 020f 	and.w	r2, r3, #15
 80010bc:	493b      	ldr	r1, [pc, #236]	; (80011ac <FFT_Init+0x1c4>)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	431a      	orrs	r2, r3
 80010ca:	4938      	ldr	r1, [pc, #224]	; (80011ac <FFT_Init+0x1c4>)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			IndexList[index] = ((IndexList[index] & 0b11001100) >> 2) | ((IndexList[index] & 0b00110011) << 2);
 80010d2:	4a36      	ldr	r2, [pc, #216]	; (80011ac <FFT_Init+0x1c4>)
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	109b      	asrs	r3, r3, #2
 80010dc:	f003 0233 	and.w	r2, r3, #51	; 0x33
 80010e0:	4932      	ldr	r1, [pc, #200]	; (80011ac <FFT_Init+0x1c4>)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	f003 03cc 	and.w	r3, r3, #204	; 0xcc
 80010ee:	431a      	orrs	r2, r3
 80010f0:	492e      	ldr	r1, [pc, #184]	; (80011ac <FFT_Init+0x1c4>)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			IndexList[index] = ((IndexList[index] & 0b10101010) >> 1) | ((IndexList[index] & 0b01010101) << 1);
 80010f8:	4a2c      	ldr	r2, [pc, #176]	; (80011ac <FFT_Init+0x1c4>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001100:	105b      	asrs	r3, r3, #1
 8001102:	f003 0255 	and.w	r2, r3, #85	; 0x55
 8001106:	4929      	ldr	r1, [pc, #164]	; (80011ac <FFT_Init+0x1c4>)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	f003 03aa 	and.w	r3, r3, #170	; 0xaa
 8001114:	431a      	orrs	r2, r3
 8001116:	4925      	ldr	r1, [pc, #148]	; (80011ac <FFT_Init+0x1c4>)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			IndexList[index] = IndexList[index] >> 2;
 800111e:	4a23      	ldr	r2, [pc, #140]	; (80011ac <FFT_Init+0x1c4>)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	109a      	asrs	r2, r3, #2
 8001128:	4920      	ldr	r1, [pc, #128]	; (80011ac <FFT_Init+0x1c4>)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int index = 0; index < SAMPLES; index++){
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2b3f      	cmp	r3, #63	; 0x3f
 800113a:	f77f af60 	ble.w	8000ffe <FFT_Init+0x16>
		}
	}
	for(int component = 0; component < SAMPLES; component++){
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	e01f      	b.n	8001184 <FFT_Init+0x19c>
		for(int axis = 0; axis < 3; axis++){
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	e016      	b.n	8001178 <FFT_Init+0x190>
			Result_R[axis][component] = 0;
 800114a:	4919      	ldr	r1, [pc, #100]	; (80011b0 <FFT_Init+0x1c8>)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	019a      	lsls	r2, r3, #6
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
			Result_I[axis][component] = 0;
 800115e:	4915      	ldr	r1, [pc, #84]	; (80011b4 <FFT_Init+0x1cc>)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	019a      	lsls	r2, r3, #6
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
		for(int axis = 0; axis < 3; axis++){
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3301      	adds	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b02      	cmp	r3, #2
 800117c:	dde5      	ble.n	800114a <FFT_Init+0x162>
	for(int component = 0; component < SAMPLES; component++){
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	3301      	adds	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	2b3f      	cmp	r3, #63	; 0x3f
 8001188:	dddc      	ble.n	8001144 <FFT_Init+0x15c>
		}
	}
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	f3af 8000 	nop.w
 8001198:	54442d18 	.word	0x54442d18
 800119c:	401921fb 	.word	0x401921fb
 80011a0:	40500000 	.word	0x40500000
 80011a4:	200003b8 	.word	0x200003b8
 80011a8:	200004b8 	.word	0x200004b8
 80011ac:	20000bb8 	.word	0x20000bb8
 80011b0:	200005b8 	.word	0x200005b8
 80011b4:	200008b8 	.word	0x200008b8

080011b8 <FFT>:

void FFT(float *signal, int axis){
 80011b8:	b480      	push	{r7}
 80011ba:	b08b      	sub	sp, #44	; 0x2c
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	int Container_Num = SAMPLES >> 2;
 80011c2:	2310      	movs	r3, #16
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    for(int index = 0; index < SAMPLES; index += 2){
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
 80011ca:	e03f      	b.n	800124c <FFT+0x94>
        Result_R[axis][index] = signal[IndexList[index]] + signal[IndexList[index + 1]];
 80011cc:	4a82      	ldr	r2, [pc, #520]	; (80013d8 <FFT+0x220>)
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	ed93 7a00 	vldr	s14, [r3]
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a7d      	ldr	r2, [pc, #500]	; (80013d8 <FFT+0x220>)
 80011e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f6:	4979      	ldr	r1, [pc, #484]	; (80013dc <FFT+0x224>)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	019a      	lsls	r2, r3, #6
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	edc3 7a00 	vstr	s15, [r3]
        Result_R[axis][index + 1] = signal[IndexList[index]] - signal[IndexList[index + 1]];
 8001208:	4a73      	ldr	r2, [pc, #460]	; (80013d8 <FFT+0x220>)
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	ed93 7a00 	vldr	s14, [r3]
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	3301      	adds	r3, #1
 800121e:	4a6e      	ldr	r2, [pc, #440]	; (80013d8 <FFT+0x220>)
 8001220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	3301      	adds	r3, #1
 8001232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001236:	4969      	ldr	r1, [pc, #420]	; (80013dc <FFT+0x224>)
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	0192      	lsls	r2, r2, #6
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	edc3 7a00 	vstr	s15, [r3]
    for(int index = 0; index < SAMPLES; index += 2){
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	3302      	adds	r3, #2
 800124a:	623b      	str	r3, [r7, #32]
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	2b3f      	cmp	r3, #63	; 0x3f
 8001250:	ddbc      	ble.n	80011cc <FFT+0x14>
    }

    for(int container = 4; container <= SAMPLES; container <<= 1){
 8001252:	2304      	movs	r3, #4
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	e177      	b.n	8001548 <FFT+0x390>
        container_temp = container >> 1;
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	105b      	asrs	r3, r3, #1
 800125c:	4a60      	ldr	r2, [pc, #384]	; (80013e0 <FFT+0x228>)
 800125e:	6013      	str	r3, [r2, #0]
        for(int component = 0; component < container_temp; component++){
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	e0a4      	b.n	80013b0 <FFT+0x1f8>
            ExpIndex = SAMPLES * component / container;
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	019a      	lsls	r2, r3, #6
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001270:	4a5c      	ldr	r2, [pc, #368]	; (80013e4 <FFT+0x22c>)
 8001272:	6013      	str	r3, [r2, #0]
            for(int index = 0; index < Container_Num; index++){
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e092      	b.n	80013a0 <FFT+0x1e8>
                P = (index * container) + component;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	fb03 f202 	mul.w	r2, r3, r2
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	4413      	add	r3, r2
 8001286:	4a58      	ldr	r2, [pc, #352]	; (80013e8 <FFT+0x230>)
 8001288:	6013      	str	r3, [r2, #0]
                Result_R[axis][P] = Result_R[axis][P] + CosList[ExpIndex] * Result_R[axis][P + container_temp] - SinList[ExpIndex] * Result_I[axis][P + container_temp];
 800128a:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <FFT+0x230>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4953      	ldr	r1, [pc, #332]	; (80013dc <FFT+0x224>)
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	0192      	lsls	r2, r2, #6
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	ed93 7a00 	vldr	s14, [r3]
 800129e:	4b51      	ldr	r3, [pc, #324]	; (80013e4 <FFT+0x22c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a52      	ldr	r2, [pc, #328]	; (80013ec <FFT+0x234>)
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	edd3 6a00 	vldr	s13, [r3]
 80012ac:	4b4e      	ldr	r3, [pc, #312]	; (80013e8 <FFT+0x230>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <FFT+0x228>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	4949      	ldr	r1, [pc, #292]	; (80013dc <FFT+0x224>)
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	0192      	lsls	r2, r2, #6
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ce:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <FFT+0x22c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a47      	ldr	r2, [pc, #284]	; (80013f0 <FFT+0x238>)
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	edd3 6a00 	vldr	s13, [r3]
 80012dc:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <FFT+0x230>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b3f      	ldr	r3, [pc, #252]	; (80013e0 <FFT+0x228>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4413      	add	r3, r2
 80012e6:	4943      	ldr	r1, [pc, #268]	; (80013f4 <FFT+0x23c>)
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	0192      	lsls	r2, r2, #6
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <FFT+0x230>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001302:	4936      	ldr	r1, [pc, #216]	; (80013dc <FFT+0x224>)
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	0192      	lsls	r2, r2, #6
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	edc3 7a00 	vstr	s15, [r3]
                Result_I[axis][P] = Result_I[axis][P] + CosList[ExpIndex] * Result_I[axis][P + container_temp] + SinList[ExpIndex] * Result_R[axis][P + container_temp];
 8001312:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <FFT+0x230>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4937      	ldr	r1, [pc, #220]	; (80013f4 <FFT+0x23c>)
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	0192      	lsls	r2, r2, #6
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	ed93 7a00 	vldr	s14, [r3]
 8001326:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <FFT+0x22c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a30      	ldr	r2, [pc, #192]	; (80013ec <FFT+0x234>)
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	edd3 6a00 	vldr	s13, [r3]
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <FFT+0x230>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <FFT+0x228>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4413      	add	r3, r2
 800133e:	492d      	ldr	r1, [pc, #180]	; (80013f4 <FFT+0x23c>)
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	0192      	lsls	r2, r2, #6
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001352:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <FFT+0x22c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a25      	ldr	r2, [pc, #148]	; (80013f0 <FFT+0x238>)
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	edd3 6a00 	vldr	s13, [r3]
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <FFT+0x230>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <FFT+0x228>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4413      	add	r3, r2
 800136e:	491b      	ldr	r1, [pc, #108]	; (80013dc <FFT+0x224>)
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	0192      	lsls	r2, r2, #6
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <FFT+0x230>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138a:	491a      	ldr	r1, [pc, #104]	; (80013f4 <FFT+0x23c>)
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	0192      	lsls	r2, r2, #6
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	edc3 7a00 	vstr	s15, [r3]
            for(int index = 0; index < Container_Num; index++){
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	429a      	cmp	r2, r3
 80013a6:	f6ff af68 	blt.w	800127a <FFT+0xc2>
        for(int component = 0; component < container_temp; component++){
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	3301      	adds	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <FFT+0x228>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	f6ff af55 	blt.w	8001266 <FFT+0xae>
            }
        }
        for(int component = container_temp; component < container; component++){
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <FFT+0x228>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	e0b6      	b.n	8001532 <FFT+0x37a>
            ExpIndex = SAMPLES * component / container;
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	019a      	lsls	r2, r3, #6
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <FFT+0x22c>)
 80013d0:	6013      	str	r3, [r2, #0]
            for(int index = 0; index < Container_Num; index++){
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	e0a4      	b.n	8001522 <FFT+0x36a>
 80013d8:	20000bb8 	.word	0x20000bb8
 80013dc:	200005b8 	.word	0x200005b8
 80013e0:	20000cbc 	.word	0x20000cbc
 80013e4:	20000cb8 	.word	0x20000cb8
 80013e8:	20000cc0 	.word	0x20000cc0
 80013ec:	200003b8 	.word	0x200003b8
 80013f0:	200004b8 	.word	0x200004b8
 80013f4:	200008b8 	.word	0x200008b8
                P = (index * container) + component;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	69fa      	ldr	r2, [r7, #28]
 80013fc:	fb03 f202 	mul.w	r2, r3, r2
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4413      	add	r3, r2
 8001404:	4a56      	ldr	r2, [pc, #344]	; (8001560 <FFT+0x3a8>)
 8001406:	6013      	str	r3, [r2, #0]
                temp = Result_R[axis][P];
 8001408:	4b55      	ldr	r3, [pc, #340]	; (8001560 <FFT+0x3a8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4955      	ldr	r1, [pc, #340]	; (8001564 <FFT+0x3ac>)
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	0192      	lsls	r2, r2, #6
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a53      	ldr	r2, [pc, #332]	; (8001568 <FFT+0x3b0>)
 800141c:	6013      	str	r3, [r2, #0]
                Result_R[axis][P] = Result_R[axis][P - container_temp] + (CosList[ExpIndex] * Result_R[axis][P] - SinList[ExpIndex] * Result_I[axis][P]) * 2;
 800141e:	4b50      	ldr	r3, [pc, #320]	; (8001560 <FFT+0x3a8>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b52      	ldr	r3, [pc, #328]	; (800156c <FFT+0x3b4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	494e      	ldr	r1, [pc, #312]	; (8001564 <FFT+0x3ac>)
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	0192      	lsls	r2, r2, #6
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	ed93 7a00 	vldr	s14, [r3]
 8001438:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <FFT+0x3b8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a4d      	ldr	r2, [pc, #308]	; (8001574 <FFT+0x3bc>)
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	edd3 6a00 	vldr	s13, [r3]
 8001446:	4b46      	ldr	r3, [pc, #280]	; (8001560 <FFT+0x3a8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4946      	ldr	r1, [pc, #280]	; (8001564 <FFT+0x3ac>)
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	0192      	lsls	r2, r2, #6
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800145e:	4b44      	ldr	r3, [pc, #272]	; (8001570 <FFT+0x3b8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a45      	ldr	r2, [pc, #276]	; (8001578 <FFT+0x3c0>)
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	ed93 6a00 	vldr	s12, [r3]
 800146c:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <FFT+0x3a8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4942      	ldr	r1, [pc, #264]	; (800157c <FFT+0x3c4>)
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	0192      	lsls	r2, r2, #6
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001484:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001488:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800148c:	4b34      	ldr	r3, [pc, #208]	; (8001560 <FFT+0x3a8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001494:	4933      	ldr	r1, [pc, #204]	; (8001564 <FFT+0x3ac>)
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	0192      	lsls	r2, r2, #6
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	edc3 7a00 	vstr	s15, [r3]
                Result_I[axis][P] = Result_I[axis][P - container_temp] + (CosList[ExpIndex] * Result_I[axis][P] + SinList[ExpIndex] * temp) * 2;
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <FFT+0x3a8>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b30      	ldr	r3, [pc, #192]	; (800156c <FFT+0x3b4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	4933      	ldr	r1, [pc, #204]	; (800157c <FFT+0x3c4>)
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	0192      	lsls	r2, r2, #6
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	ed93 7a00 	vldr	s14, [r3]
 80014be:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <FFT+0x3b8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a2c      	ldr	r2, [pc, #176]	; (8001574 <FFT+0x3bc>)
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	edd3 6a00 	vldr	s13, [r3]
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <FFT+0x3a8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	492a      	ldr	r1, [pc, #168]	; (800157c <FFT+0x3c4>)
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	0192      	lsls	r2, r2, #6
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <FFT+0x3b8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a23      	ldr	r2, [pc, #140]	; (8001578 <FFT+0x3c0>)
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	ed93 6a00 	vldr	s12, [r3]
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <FFT+0x3b0>)
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80014fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001500:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <FFT+0x3a8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150c:	491b      	ldr	r1, [pc, #108]	; (800157c <FFT+0x3c4>)
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	0192      	lsls	r2, r2, #6
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	edc3 7a00 	vstr	s15, [r3]
            for(int index = 0; index < Container_Num; index++){
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3301      	adds	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	429a      	cmp	r2, r3
 8001528:	f6ff af66 	blt.w	80013f8 <FFT+0x240>
        for(int component = container_temp; component < container; component++){
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	3301      	adds	r3, #1
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	429a      	cmp	r2, r3
 8001538:	f6ff af44 	blt.w	80013c4 <FFT+0x20c>
            }
        }
        Container_Num = Container_Num >> 1;
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	105b      	asrs	r3, r3, #1
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    for(int container = 4; container <= SAMPLES; container <<= 1){
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	2b40      	cmp	r3, #64	; 0x40
 800154c:	f77f ae84 	ble.w	8001258 <FFT+0xa0>
    }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	372c      	adds	r7, #44	; 0x2c
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000cc0 	.word	0x20000cc0
 8001564:	200005b8 	.word	0x200005b8
 8001568:	20000cc4 	.word	0x20000cc4
 800156c:	20000cbc 	.word	0x20000cbc
 8001570:	20000cb8 	.word	0x20000cb8
 8001574:	200003b8 	.word	0x200003b8
 8001578:	200004b8 	.word	0x200004b8
 800157c:	200008b8 	.word	0x200008b8

08001580 <Frequency_Energy>:

// Calculate freq strength
void Frequency_Energy(uint8_t* buf, uint8_t* freq_content){
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
	Exceed_Threshold = false;
 800158a:	4b77      	ldr	r3, [pc, #476]	; (8001768 <Frequency_Energy+0x1e8>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
	intensity_mem = (float *)freq_content;  // For record into buffer to send
 8001590:	4a76      	ldr	r2, [pc, #472]	; (800176c <Frequency_Energy+0x1ec>)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	6013      	str	r3, [r2, #0]

	for(int freqIndex = 4; freqIndex < 16; freqIndex++){
 8001596:	2304      	movs	r3, #4
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	e0bb      	b.n	8001714 <Frequency_Energy+0x194>
		// DFT frequency intensity
		c1[freqIndex] = Result_R[0][freqIndex] * Result_R[0][freqIndex] + Result_I[0][freqIndex] * Result_I[0][freqIndex];
 800159c:	4a74      	ldr	r2, [pc, #464]	; (8001770 <Frequency_Energy+0x1f0>)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	ed93 7a00 	vldr	s14, [r3]
 80015a8:	4a71      	ldr	r2, [pc, #452]	; (8001770 <Frequency_Energy+0x1f0>)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b8:	4a6e      	ldr	r2, [pc, #440]	; (8001774 <Frequency_Energy+0x1f4>)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	edd3 6a00 	vldr	s13, [r3]
 80015c4:	4a6b      	ldr	r2, [pc, #428]	; (8001774 <Frequency_Energy+0x1f4>)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d8:	4a67      	ldr	r2, [pc, #412]	; (8001778 <Frequency_Energy+0x1f8>)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	edc3 7a00 	vstr	s15, [r3]
		c2[freqIndex] = Result_R[1][freqIndex] * Result_R[1][freqIndex] + Result_I[1][freqIndex] * Result_I[1][freqIndex];
 80015e4:	4a62      	ldr	r2, [pc, #392]	; (8001770 <Frequency_Energy+0x1f0>)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3340      	adds	r3, #64	; 0x40
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	4a5f      	ldr	r2, [pc, #380]	; (8001770 <Frequency_Energy+0x1f0>)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3340      	adds	r3, #64	; 0x40
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001604:	4a5b      	ldr	r2, [pc, #364]	; (8001774 <Frequency_Energy+0x1f4>)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3340      	adds	r3, #64	; 0x40
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	edd3 6a00 	vldr	s13, [r3]
 8001612:	4a58      	ldr	r2, [pc, #352]	; (8001774 <Frequency_Energy+0x1f4>)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3340      	adds	r3, #64	; 0x40
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001628:	4a54      	ldr	r2, [pc, #336]	; (800177c <Frequency_Energy+0x1fc>)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	edc3 7a00 	vstr	s15, [r3]
		c3[freqIndex] = Result_R[2][freqIndex] * Result_R[2][freqIndex] + Result_I[2][freqIndex] * Result_I[2][freqIndex];
 8001634:	4a4e      	ldr	r2, [pc, #312]	; (8001770 <Frequency_Energy+0x1f0>)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3380      	adds	r3, #128	; 0x80
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	ed93 7a00 	vldr	s14, [r3]
 8001642:	4a4b      	ldr	r2, [pc, #300]	; (8001770 <Frequency_Energy+0x1f0>)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3380      	adds	r3, #128	; 0x80
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001654:	4a47      	ldr	r2, [pc, #284]	; (8001774 <Frequency_Energy+0x1f4>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3380      	adds	r3, #128	; 0x80
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	edd3 6a00 	vldr	s13, [r3]
 8001662:	4a44      	ldr	r2, [pc, #272]	; (8001774 <Frequency_Energy+0x1f4>)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	3380      	adds	r3, #128	; 0x80
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	edd3 7a00 	vldr	s15, [r3]
 8001670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001678:	4a41      	ldr	r2, [pc, #260]	; (8001780 <Frequency_Energy+0x200>)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	edc3 7a00 	vstr	s15, [r3]

		// Combine x, y, z-axis intensity and check whether exceed threshold
		intensity[freqIndex] = SquareRootFloat(c1[freqIndex] + c2[freqIndex] + c3[freqIndex]) * DELTA_T;
 8001684:	4a3c      	ldr	r2, [pc, #240]	; (8001778 <Frequency_Energy+0x1f8>)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	ed93 7a00 	vldr	s14, [r3]
 8001690:	4a3a      	ldr	r2, [pc, #232]	; (800177c <Frequency_Energy+0x1fc>)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a0:	4a37      	ldr	r2, [pc, #220]	; (8001780 <Frequency_Energy+0x200>)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b0:	eeb0 0a67 	vmov.f32	s0, s15
 80016b4:	f000 f872 	bl	800179c <SquareRootFloat>
 80016b8:	eeb0 7a40 	vmov.f32	s14, s0
 80016bc:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001784 <Frequency_Energy+0x204>
 80016c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c4:	4a30      	ldr	r2, [pc, #192]	; (8001788 <Frequency_Energy+0x208>)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	edc3 7a00 	vstr	s15, [r3]
		*(intensity_mem + freqIndex - 4) = intensity[freqIndex];
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <Frequency_Energy+0x1ec>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016da:	3b04      	subs	r3, #4
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	4929      	ldr	r1, [pc, #164]	; (8001788 <Frequency_Energy+0x208>)
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	0092      	lsls	r2, r2, #2
 80016e6:	440a      	add	r2, r1
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	601a      	str	r2, [r3, #0]
//		 *(intensity_mem + freqIndex) = intensity[freqIndex];  // For record into buffer to send
		if (intensity[freqIndex] > threshold)
 80016ec:	4a26      	ldr	r2, [pc, #152]	; (8001788 <Frequency_Energy+0x208>)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	ed93 7a00 	vldr	s14, [r3]
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <Frequency_Energy+0x20c>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	dd02      	ble.n	800170e <Frequency_Energy+0x18e>
			Exceed_Threshold = true;
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <Frequency_Energy+0x1e8>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
	for(int freqIndex = 4; freqIndex < 16; freqIndex++){
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3301      	adds	r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	f77f af40 	ble.w	800159c <Frequency_Energy+0x1c>
	}

	// Record if intensity exceed threshold
	Intensity_Record = Intensity_Record << 1;
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <Frequency_Energy+0x210>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <Frequency_Energy+0x210>)
 8001726:	701a      	strb	r2, [r3, #0]
	if (Exceed_Threshold == true)
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <Frequency_Energy+0x1e8>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <Frequency_Energy+0x1bc>
		Intensity_Record = Intensity_Record + 0x01;
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <Frequency_Energy+0x210>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <Frequency_Energy+0x210>)
 800173a:	701a      	strb	r2, [r3, #0]

	// Reset sample count and record fourier transform calculate times
	SampleCount = 0;
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <Frequency_Energy+0x214>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
	resetCounter += 1;
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <Frequency_Energy+0x218>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <Frequency_Energy+0x218>)
 800174c:	701a      	strb	r2, [r3, #0]

	buf[0] = resetCounter;
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <Frequency_Energy+0x218>)
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	701a      	strb	r2, [r3, #0]
	buf[1] = Intensity_Record;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3301      	adds	r3, #1
 800175a:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <Frequency_Energy+0x210>)
 800175c:	7812      	ldrb	r2, [r2, #0]
 800175e:	701a      	strb	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200003b0 	.word	0x200003b0
 800176c:	200003ac 	.word	0x200003ac
 8001770:	200005b8 	.word	0x200005b8
 8001774:	200008b8 	.word	0x200008b8
 8001778:	20000218 	.word	0x20000218
 800177c:	20000278 	.word	0x20000278
 8001780:	200002d8 	.word	0x200002d8
 8001784:	42800000 	.word	0x42800000
 8001788:	2000034c 	.word	0x2000034c
 800178c:	20000010 	.word	0x20000010
 8001790:	200003b1 	.word	0x200003b1
 8001794:	20000214 	.word	0x20000214
 8001798:	200003b5 	.word	0x200003b5

0800179c <SquareRootFloat>:
	return 0.0f;
}

// STM32-72M sqrt method spend 8us
// Detail reference: https://www.youtube.com/watch?v=g1r3iLejTw0
float SquareRootFloat(float number){
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	ed87 0a01 	vstr	s0, [r7, #4]
	long i;
	float x, y;
	const float f = 1.5F;
 80017a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80017aa:	617b      	str	r3, [r7, #20]

	x = number * 0.5F;
 80017ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b8:	edc7 7a04 	vstr	s15, [r7, #16]
	y = number;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	60bb      	str	r3, [r7, #8]
	i = * ( long * ) &y;
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - ( i >> 1 );
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	105a      	asrs	r2, r3, #1
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <SquareRootFloat+0xa8>)
 80017ce:	1a9b      	subs	r3, r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
	y = * ( float * ) &i;
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60bb      	str	r3, [r7, #8]
	y = y * ( f - ( x * y * y ) );
 80017da:	ed97 7a02 	vldr	s14, [r7, #8]
 80017de:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80017f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fe:	edc7 7a02 	vstr	s15, [r7, #8]
	y = y * ( f - ( x * y * y ) );
 8001802:	ed97 7a02 	vldr	s14, [r7, #8]
 8001806:	edd7 7a04 	vldr	s15, [r7, #16]
 800180a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800180e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001816:	ed97 7a05 	vldr	s14, [r7, #20]
 800181a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800181e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001826:	edc7 7a02 	vstr	s15, [r7, #8]
	return number * y;
 800182a:	ed97 7a02 	vldr	s14, [r7, #8]
 800182e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001832:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001836:	eeb0 0a67 	vmov.f32	s0, s15
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	5f3759df 	.word	0x5f3759df

08001848 <q_init>:
float acce_scale = 1 / 16384.0;
float gyro_scale = 1 / 32768.0 * 250.0 / 180.0 * 3.141592653589793;

float SquareRootFloat(float number);

void q_init(){
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
	delta_t = 0.02;
 800184e:	4b53      	ldr	r3, [pc, #332]	; (800199c <q_init+0x154>)
 8001850:	4a53      	ldr	r2, [pc, #332]	; (80019a0 <q_init+0x158>)
 8001852:	601a      	str	r2, [r3, #0]
	Kp = 1.0;
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <q_init+0x15c>)
 8001856:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800185a:	601a      	str	r2, [r3, #0]
	Ki = 0.1;
 800185c:	4b52      	ldr	r3, [pc, #328]	; (80019a8 <q_init+0x160>)
 800185e:	4a53      	ldr	r2, [pc, #332]	; (80019ac <q_init+0x164>)
 8001860:	601a      	str	r2, [r3, #0]

	Accex = 0; Accey = 0; Accez = 0;
 8001862:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <q_init+0x168>)
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	4b52      	ldr	r3, [pc, #328]	; (80019b4 <q_init+0x16c>)
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <q_init+0x170>)
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
	Gyrox = 0; Gyroy = 0; Gyroz = 0;
 800187a:	4b50      	ldr	r3, [pc, #320]	; (80019bc <q_init+0x174>)
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	4b4f      	ldr	r3, [pc, #316]	; (80019c0 <q_init+0x178>)
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	4b4e      	ldr	r3, [pc, #312]	; (80019c4 <q_init+0x17c>)
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
	Acc[0] = 0; Acc[1] = 0; Acc[2] = 0;
 8001892:	4b4d      	ldr	r3, [pc, #308]	; (80019c8 <q_init+0x180>)
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <q_init+0x180>)
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	4b49      	ldr	r3, [pc, #292]	; (80019c8 <q_init+0x180>)
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]

	for (int index = 0; index < 7; index++){
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e01c      	b.n	80018ea <q_init+0xa2>
		Mahony_q[index][0] = 1.0;  // Initialize w component
 80018b0:	4a46      	ldr	r2, [pc, #280]	; (80019cc <q_init+0x184>)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	4413      	add	r3, r2
 80018b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018bc:	601a      	str	r2, [r3, #0]
		for (int component = 1; component < 4; component++)
 80018be:	2301      	movs	r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	e00c      	b.n	80018de <q_init+0x96>
			Mahony_q[index][component] = 0.0;  // Initialize x, y, z component
 80018c4:	4941      	ldr	r1, [pc, #260]	; (80019cc <q_init+0x184>)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	009a      	lsls	r2, r3, #2
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
		for (int component = 1; component < 4; component++)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	3301      	adds	r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	ddef      	ble.n	80018c4 <q_init+0x7c>
	for (int index = 0; index < 7; index++){
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b06      	cmp	r3, #6
 80018ee:	dddf      	ble.n	80018b0 <q_init+0x68>
	}

	for (int index = 0; index < 7; index++){
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	e047      	b.n	8001986 <q_init+0x13e>
		for (int component = 0; component < 3; component++){
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	e03e      	b.n	800197a <q_init+0x132>
			eInt[index][component] = 0.0;  // Initialize x, y, z component
 80018fc:	4934      	ldr	r1, [pc, #208]	; (80019d0 <q_init+0x188>)
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
			Gyro_bias[index][component] = 0.0;
 8001914:	492f      	ldr	r1, [pc, #188]	; (80019d4 <q_init+0x18c>)
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
			Past_e[index][component] = 0.0;
 800192c:	492a      	ldr	r1, [pc, #168]	; (80019d8 <q_init+0x190>)
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
			Past_eInt[index][component] = 0.0;
 8001944:	4925      	ldr	r1, [pc, #148]	; (80019dc <q_init+0x194>)
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
			Past_Gyro[index][component] = 0.0;
 800195c:	4920      	ldr	r1, [pc, #128]	; (80019e0 <q_init+0x198>)
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
		for (int component = 0; component < 3; component++){
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b02      	cmp	r3, #2
 800197e:	ddbd      	ble.n	80018fc <q_init+0xb4>
	for (int index = 0; index < 7; index++){
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3301      	adds	r3, #1
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b06      	cmp	r3, #6
 800198a:	ddb4      	ble.n	80018f6 <q_init+0xae>
		}
	}
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000d54 	.word	0x20000d54
 80019a0:	3ca3d70a 	.word	0x3ca3d70a
 80019a4:	20000d4c 	.word	0x20000d4c
 80019a8:	20000d50 	.word	0x20000d50
 80019ac:	3dcccccd 	.word	0x3dcccccd
 80019b0:	20000cc8 	.word	0x20000cc8
 80019b4:	20000ccc 	.word	0x20000ccc
 80019b8:	20000cd0 	.word	0x20000cd0
 80019bc:	20000ce0 	.word	0x20000ce0
 80019c0:	20000ce4 	.word	0x20000ce4
 80019c4:	20000ce8 	.word	0x20000ce8
 80019c8:	20000cd4 	.word	0x20000cd4
 80019cc:	20000d58 	.word	0x20000d58
 80019d0:	20000e74 	.word	0x20000e74
 80019d4:	20000dc8 	.word	0x20000dc8
 80019d8:	20000ec8 	.word	0x20000ec8
 80019dc:	20000e20 	.word	0x20000e20
 80019e0:	20000cf8 	.word	0x20000cf8

080019e4 <Record_Gyro_bias>:

void Record_Gyro_bias(uint8_t *IMU_data){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	for(int index = 0; index < 7; index++){
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	e0c3      	b.n	8001b7a <Record_Gyro_bias+0x196>
		float gyrox = (float)((int16_t)(IMU_data[8 + index * 20] << 8 | IMU_data[9 + index * 20])) * gyro_scale * -1.0;
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	3308      	adds	r3, #8
 80019fe:	461a      	mov	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b219      	sxth	r1, r3
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	3309      	adds	r3, #9
 8001a16:	461a      	mov	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	430b      	orrs	r3, r1
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ba0 <Record_Gyro_bias+0x1bc>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a36:	ee17 0a90 	vmov	r0, s15
 8001a3a:	f7fe fd0d 	bl	8000458 <__aeabi_f2d>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f821 	bl	8000a8c <__aeabi_d2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eef1 7a67 	vneg.f32	s15, s15
 8001a54:	edc7 7a04 	vstr	s15, [r7, #16]
		float gyroy = (float)((int16_t)(IMU_data[6 + index * 20] << 8 | IMU_data[7 + index * 20])) * gyro_scale;
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	3306      	adds	r3, #6
 8001a64:	461a      	mov	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	b219      	sxth	r1, r3
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	3307      	adds	r3, #7
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	430b      	orrs	r3, r1
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a92:	4b43      	ldr	r3, [pc, #268]	; (8001ba0 <Record_Gyro_bias+0x1bc>)
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9c:	edc7 7a03 	vstr	s15, [r7, #12]
		float gyroz = (float)((int16_t)(IMU_data[10 + index * 20] << 8 | IMU_data[11 + index * 20])) * gyro_scale;
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	330a      	adds	r3, #10
 8001aac:	461a      	mov	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	b219      	sxth	r1, r3
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	330b      	adds	r3, #11
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	430b      	orrs	r3, r1
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ada:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <Record_Gyro_bias+0x1bc>)
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae4:	edc7 7a02 	vstr	s15, [r7, #8]

		Gyro_bias[index][0] += gyrox;
 8001ae8:	492e      	ldr	r1, [pc, #184]	; (8001ba4 <Record_Gyro_bias+0x1c0>)
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	ed93 7a00 	vldr	s14, [r3]
 8001afa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b02:	4928      	ldr	r1, [pc, #160]	; (8001ba4 <Record_Gyro_bias+0x1c0>)
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	edc3 7a00 	vstr	s15, [r3]
		Gyro_bias[index][1] += gyroy;
 8001b14:	4923      	ldr	r1, [pc, #140]	; (8001ba4 <Record_Gyro_bias+0x1c0>)
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	3304      	adds	r3, #4
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b30:	491c      	ldr	r1, [pc, #112]	; (8001ba4 <Record_Gyro_bias+0x1c0>)
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3304      	adds	r3, #4
 8001b40:	edc3 7a00 	vstr	s15, [r3]
		Gyro_bias[index][2] += gyroz;
 8001b44:	4917      	ldr	r1, [pc, #92]	; (8001ba4 <Record_Gyro_bias+0x1c0>)
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	3308      	adds	r3, #8
 8001b54:	ed93 7a00 	vldr	s14, [r3]
 8001b58:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b60:	4910      	ldr	r1, [pc, #64]	; (8001ba4 <Record_Gyro_bias+0x1c0>)
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	3308      	adds	r3, #8
 8001b70:	edc3 7a00 	vstr	s15, [r3]
	for(int index = 0; index < 7; index++){
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b06      	cmp	r3, #6
 8001b7e:	f77f af38 	ble.w	80019f2 <Record_Gyro_bias+0xe>
	}
	Gyro_counter += 1;
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <Record_Gyro_bias+0x1c4>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <Record_Gyro_bias+0x1c4>)
 8001b92:	edc3 7a00 	vstr	s15, [r3]
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000048 	.word	0x20000048
 8001ba4:	20000dc8 	.word	0x20000dc8
 8001ba8:	20000e1c 	.word	0x20000e1c

08001bac <statistic_gyro_bias>:

void statistic_gyro_bias(){
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
	for(int index = 0; index < 7; index++){
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	e04b      	b.n	8001c50 <statistic_gyro_bias+0xa4>
		Gyro_bias[index][0] /= Gyro_counter;
 8001bb8:	492a      	ldr	r1, [pc, #168]	; (8001c64 <statistic_gyro_bias+0xb8>)
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	edd3 6a00 	vldr	s13, [r3]
 8001bca:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <statistic_gyro_bias+0xbc>)
 8001bcc:	ed93 7a00 	vldr	s14, [r3]
 8001bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd4:	4923      	ldr	r1, [pc, #140]	; (8001c64 <statistic_gyro_bias+0xb8>)
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	edc3 7a00 	vstr	s15, [r3]
		Gyro_bias[index][1] /= Gyro_counter;
 8001be6:	491f      	ldr	r1, [pc, #124]	; (8001c64 <statistic_gyro_bias+0xb8>)
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	edd3 6a00 	vldr	s13, [r3]
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <statistic_gyro_bias+0xbc>)
 8001bfc:	ed93 7a00 	vldr	s14, [r3]
 8001c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c04:	4917      	ldr	r1, [pc, #92]	; (8001c64 <statistic_gyro_bias+0xb8>)
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	3304      	adds	r3, #4
 8001c14:	edc3 7a00 	vstr	s15, [r3]
		Gyro_bias[index][2] /= Gyro_counter;
 8001c18:	4912      	ldr	r1, [pc, #72]	; (8001c64 <statistic_gyro_bias+0xb8>)
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	3308      	adds	r3, #8
 8001c28:	edd3 6a00 	vldr	s13, [r3]
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <statistic_gyro_bias+0xbc>)
 8001c2e:	ed93 7a00 	vldr	s14, [r3]
 8001c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c36:	490b      	ldr	r1, [pc, #44]	; (8001c64 <statistic_gyro_bias+0xb8>)
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	3308      	adds	r3, #8
 8001c46:	edc3 7a00 	vstr	s15, [r3]
	for(int index = 0; index < 7; index++){
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	ddb0      	ble.n	8001bb8 <statistic_gyro_bias+0xc>
	}
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	20000dc8 	.word	0x20000dc8
 8001c68:	20000e1c 	.word	0x20000e1c

08001c6c <qGq>:
	*(p + 0) = new_x;
	*(p + 1) = new_y;
	*(p + 2) = new_z;
}

void qGq(float *q, float *p, int inverse){
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
	if (inverse == 0){
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d159      	bne.n	8001d32 <qGq+0xc6>
		Est_Acc[0] = 2*q[1]*q[3] + 2*q[0]*q[2];
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3304      	adds	r3, #4
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	330c      	adds	r3, #12
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3308      	adds	r3, #8
 8001ca4:	edd3 7a00 	vldr	s15, [r3]
 8001ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb0:	4b4f      	ldr	r3, [pc, #316]	; (8001df0 <qGq+0x184>)
 8001cb2:	edc3 7a00 	vstr	s15, [r3]
		Est_Acc[1] = 2*q[2]*q[3] - 2*q[0]*q[1];
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3308      	adds	r3, #8
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	330c      	adds	r3, #12
 8001cc6:	edd3 7a00 	vldr	s15, [r3]
 8001cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3304      	adds	r3, #4
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce8:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <qGq+0x184>)
 8001cea:	edc3 7a01 	vstr	s15, [r3, #4]
		Est_Acc[2] = 1 - 2*q[1]*q[1] - 2*q[2]*q[2];
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3308      	adds	r3, #8
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3308      	adds	r3, #8
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2a:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <qGq+0x184>)
 8001d2c:	edc3 7a02 	vstr	s15, [r3, #8]
	else{
		Est_Acc[0] = 2*q[1]*q[3] - 2*q[0]*q[2];
		Est_Acc[1] = 2*q[2]*q[3] + 2*q[0]*q[1];
		Est_Acc[2] = 1 - 2*q[1]*q[1] - 2*q[2]*q[2];
	}
}
 8001d30:	e058      	b.n	8001de4 <qGq+0x178>
		Est_Acc[0] = 2*q[1]*q[3] - 2*q[0]*q[2];
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3304      	adds	r3, #4
 8001d36:	edd3 7a00 	vldr	s15, [r3]
 8001d3a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	330c      	adds	r3, #12
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3308      	adds	r3, #8
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <qGq+0x184>)
 8001d66:	edc3 7a00 	vstr	s15, [r3]
		Est_Acc[1] = 2*q[2]*q[3] + 2*q[0]*q[1];
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3308      	adds	r3, #8
 8001d6e:	edd3 7a00 	vldr	s15, [r3]
 8001d72:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	330c      	adds	r3, #12
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	edd3 7a00 	vldr	s15, [r3]
 8001d88:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3304      	adds	r3, #4
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <qGq+0x184>)
 8001d9e:	edc3 7a01 	vstr	s15, [r3, #4]
		Est_Acc[2] = 1 - 2*q[1]*q[1] - 2*q[2]*q[2];
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3304      	adds	r3, #4
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3304      	adds	r3, #4
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3308      	adds	r3, #8
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3308      	adds	r3, #8
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <qGq+0x184>)
 8001de0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	20000f28 	.word	0x20000f28

08001df4 <q_prod>:

void q_prod(float *q, float *p){
 8001df4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
	float new_qw = q[0] + 0.5 * (-q[1] * p[0] - q[2] * p[1] - q[3] * p[2]) * delta_t;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb27 	bl	8000458 <__aeabi_f2d>
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	460d      	mov	r5, r1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3304      	adds	r3, #4
 8001e12:	edd3 7a00 	vldr	s15, [r3]
 8001e16:	eeb1 7a67 	vneg.f32	s14, s15
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3308      	adds	r3, #8
 8001e28:	edd3 6a00 	vldr	s13, [r3]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	edd3 7a00 	vldr	s15, [r3]
 8001e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	330c      	adds	r3, #12
 8001e40:	edd3 6a00 	vldr	s13, [r3]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	3308      	adds	r3, #8
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e54:	ee17 0a90 	vmov	r0, s15
 8001e58:	f7fe fafe 	bl	8000458 <__aeabi_f2d>
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	4b8e      	ldr	r3, [pc, #568]	; (800209c <q_prod+0x2a8>)
 8001e62:	f7fe fb51 	bl	8000508 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4690      	mov	r8, r2
 8001e6c:	4699      	mov	r9, r3
 8001e6e:	4b8c      	ldr	r3, [pc, #560]	; (80020a0 <q_prod+0x2ac>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe faf0 	bl	8000458 <__aeabi_f2d>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	4649      	mov	r1, r9
 8001e80:	f7fe fb42 	bl	8000508 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4620      	mov	r0, r4
 8001e8a:	4629      	mov	r1, r5
 8001e8c:	f7fe f986 	bl	800019c <__adddf3>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f7fe fdf8 	bl	8000a8c <__aeabi_d2f>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	617b      	str	r3, [r7, #20]
	float new_qx = q[1] + 0.5 * (q[0] * p[0] + q[2] * p[2] - q[3] * p[1]) * delta_t;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fad6 	bl	8000458 <__aeabi_f2d>
 8001eac:	4604      	mov	r4, r0
 8001eae:	460d      	mov	r5, r1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	ed93 7a00 	vldr	s14, [r3]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	edd3 6a00 	vldr	s13, [r3]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	3308      	adds	r3, #8
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	330c      	adds	r3, #12
 8001edc:	edd3 6a00 	vldr	s13, [r3]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef0:	ee17 0a90 	vmov	r0, s15
 8001ef4:	f7fe fab0 	bl	8000458 <__aeabi_f2d>
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	4b67      	ldr	r3, [pc, #412]	; (800209c <q_prod+0x2a8>)
 8001efe:	f7fe fb03 	bl	8000508 <__aeabi_dmul>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4690      	mov	r8, r2
 8001f08:	4699      	mov	r9, r3
 8001f0a:	4b65      	ldr	r3, [pc, #404]	; (80020a0 <q_prod+0x2ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe faa2 	bl	8000458 <__aeabi_f2d>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4640      	mov	r0, r8
 8001f1a:	4649      	mov	r1, r9
 8001f1c:	f7fe faf4 	bl	8000508 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4620      	mov	r0, r4
 8001f26:	4629      	mov	r1, r5
 8001f28:	f7fe f938 	bl	800019c <__adddf3>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4610      	mov	r0, r2
 8001f32:	4619      	mov	r1, r3
 8001f34:	f7fe fdaa 	bl	8000a8c <__aeabi_d2f>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	613b      	str	r3, [r7, #16]
	float new_qy = q[2] + 0.5 * (q[0] * p[1] - q[1] * p[2] + q[3] * p[0]) * delta_t;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3308      	adds	r3, #8
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fa88 	bl	8000458 <__aeabi_f2d>
 8001f48:	4604      	mov	r4, r0
 8001f4a:	460d      	mov	r5, r1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	ed93 7a00 	vldr	s14, [r3]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	3304      	adds	r3, #4
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	edd3 6a00 	vldr	s13, [r3]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	3308      	adds	r3, #8
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	330c      	adds	r3, #12
 8001f7a:	edd3 6a00 	vldr	s13, [r3]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	edd3 7a00 	vldr	s15, [r3]
 8001f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8c:	ee17 0a90 	vmov	r0, s15
 8001f90:	f7fe fa62 	bl	8000458 <__aeabi_f2d>
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	4b40      	ldr	r3, [pc, #256]	; (800209c <q_prod+0x2a8>)
 8001f9a:	f7fe fab5 	bl	8000508 <__aeabi_dmul>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4690      	mov	r8, r2
 8001fa4:	4699      	mov	r9, r3
 8001fa6:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <q_prod+0x2ac>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fa54 	bl	8000458 <__aeabi_f2d>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4640      	mov	r0, r8
 8001fb6:	4649      	mov	r1, r9
 8001fb8:	f7fe faa6 	bl	8000508 <__aeabi_dmul>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	f7fe f8ea 	bl	800019c <__adddf3>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f7fe fd5c 	bl	8000a8c <__aeabi_d2f>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60fb      	str	r3, [r7, #12]
	float new_qz = q[3] + 0.5 * (q[0] * p[2] + q[1] * p[1] - q[2] * p[0]) * delta_t;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	330c      	adds	r3, #12
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fa3a 	bl	8000458 <__aeabi_f2d>
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	460d      	mov	r5, r1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	ed93 7a00 	vldr	s14, [r3]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	3308      	adds	r3, #8
 8001ff2:	edd3 7a00 	vldr	s15, [r3]
 8001ff6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	edd3 6a00 	vldr	s13, [r3]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	3304      	adds	r3, #4
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3308      	adds	r3, #8
 8002016:	edd3 6a00 	vldr	s13, [r3]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002028:	ee17 0a90 	vmov	r0, s15
 800202c:	f7fe fa14 	bl	8000458 <__aeabi_f2d>
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <q_prod+0x2a8>)
 8002036:	f7fe fa67 	bl	8000508 <__aeabi_dmul>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4690      	mov	r8, r2
 8002040:	4699      	mov	r9, r3
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <q_prod+0x2ac>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa06 	bl	8000458 <__aeabi_f2d>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4640      	mov	r0, r8
 8002052:	4649      	mov	r1, r9
 8002054:	f7fe fa58 	bl	8000508 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4620      	mov	r0, r4
 800205e:	4629      	mov	r1, r5
 8002060:	f7fe f89c 	bl	800019c <__adddf3>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	f7fe fd0e 	bl	8000a8c <__aeabi_d2f>
 8002070:	4603      	mov	r3, r0
 8002072:	60bb      	str	r3, [r7, #8]

	*(q + 0) = new_qw;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	601a      	str	r2, [r3, #0]
	*(q + 1) = new_qx;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	601a      	str	r2, [r3, #0]
	*(q + 2) = new_qy;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3308      	adds	r3, #8
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	601a      	str	r2, [r3, #0]
	*(q + 3) = new_qz;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	330c      	adds	r3, #12
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	601a      	str	r2, [r3, #0]
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800209c:	3fe00000 	.word	0x3fe00000
 80020a0:	20000d54 	.word	0x20000d54

080020a4 <vectorCross>:

void vectorCross(float *p1, float *p2){
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	e[0] = p1[1] * p2[2] - p1[2] * p2[1];
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3304      	adds	r3, #4
 80020b2:	ed93 7a00 	vldr	s14, [r3]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	3308      	adds	r3, #8
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3308      	adds	r3, #8
 80020c6:	edd3 6a00 	vldr	s13, [r3]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	3304      	adds	r3, #4
 80020ce:	edd3 7a00 	vldr	s15, [r3]
 80020d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <vectorCross+0xa4>)
 80020dc:	edc3 7a00 	vstr	s15, [r3]
	e[1] = p1[2] * p2[0] - p1[0] * p2[2];
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3308      	adds	r3, #8
 80020e4:	ed93 7a00 	vldr	s14, [r3]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edd3 6a00 	vldr	s13, [r3]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	3308      	adds	r3, #8
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <vectorCross+0xa4>)
 800210a:	edc3 7a01 	vstr	s15, [r3, #4]
	e[2] = p1[0] * p2[1] - p1[1] * p2[0];
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	ed93 7a00 	vldr	s14, [r3]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	3304      	adds	r3, #4
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3304      	adds	r3, #4
 8002124:	edd3 6a00 	vldr	s13, [r3]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <vectorCross+0xa4>)
 8002138:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	20000f1c 	.word	0x20000f1c

0800214c <mahony>:

void mahony(uint8_t* IMU_data, int index, float *float_mem){
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
	//	float accex = (float)((int16_t)(IMU_data[0] << 8 | IMU_data[1])) * acce_scale;
	//	float accey = (float)((int16_t)(IMU_data[2] << 8 | IMU_data[3])) * acce_scale;
	// Correct hardware layout design
	Accex = (float)((int16_t)(IMU_data[2] << 8 | IMU_data[3])) * acce_scale * -1.0;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3302      	adds	r3, #2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	b21a      	sxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3303      	adds	r3, #3
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	b21b      	sxth	r3, r3
 800216a:	4313      	orrs	r3, r2
 800216c:	b21b      	sxth	r3, r3
 800216e:	ee07 3a90 	vmov	s15, r3
 8002172:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002176:	4b8c      	ldr	r3, [pc, #560]	; (80023a8 <mahony+0x25c>)
 8002178:	edd3 7a00 	vldr	s15, [r3]
 800217c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002180:	ee17 0a90 	vmov	r0, s15
 8002184:	f7fe f968 	bl	8000458 <__aeabi_f2d>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fc7c 	bl	8000a8c <__aeabi_d2f>
 8002194:	4603      	mov	r3, r0
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef1 7a67 	vneg.f32	s15, s15
 800219e:	4b83      	ldr	r3, [pc, #524]	; (80023ac <mahony+0x260>)
 80021a0:	edc3 7a00 	vstr	s15, [r3]
	Accey = (float)((int16_t)(IMU_data[0] << 8 | IMU_data[1])) * acce_scale;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3301      	adds	r3, #1
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	ee07 3a90 	vmov	s15, r3
 80021bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021c0:	4b79      	ldr	r3, [pc, #484]	; (80023a8 <mahony+0x25c>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ca:	4b79      	ldr	r3, [pc, #484]	; (80023b0 <mahony+0x264>)
 80021cc:	edc3 7a00 	vstr	s15, [r3]
	Accez = (float)((int16_t)(IMU_data[4] << 8 | IMU_data[5])) * acce_scale;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3304      	adds	r3, #4
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	b21a      	sxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3305      	adds	r3, #5
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b21b      	sxth	r3, r3
 80021e2:	4313      	orrs	r3, r2
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ee:	4b6e      	ldr	r3, [pc, #440]	; (80023a8 <mahony+0x25c>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f8:	4b6e      	ldr	r3, [pc, #440]	; (80023b4 <mahony+0x268>)
 80021fa:	edc3 7a00 	vstr	s15, [r3]
	Acc[0] = Accex;
 80021fe:	4b6b      	ldr	r3, [pc, #428]	; (80023ac <mahony+0x260>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6d      	ldr	r2, [pc, #436]	; (80023b8 <mahony+0x26c>)
 8002204:	6013      	str	r3, [r2, #0]
	Acc[1] = Accey;
 8002206:	4b6a      	ldr	r3, [pc, #424]	; (80023b0 <mahony+0x264>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6b      	ldr	r2, [pc, #428]	; (80023b8 <mahony+0x26c>)
 800220c:	6053      	str	r3, [r2, #4]
	Acc[2] = Accez;
 800220e:	4b69      	ldr	r3, [pc, #420]	; (80023b4 <mahony+0x268>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a69      	ldr	r2, [pc, #420]	; (80023b8 <mahony+0x26c>)
 8002214:	6093      	str	r3, [r2, #8]

	//	float gyrox = (float)((int16_t)(IMU_data[6] << 8 | IMU_data[7])) * gyro_scale;
	//	float gyroy = (float)((int16_t)(IMU_data[8] << 8 | IMU_data[9])) * gyro_scale;
	// Correct hardware layout design
	Gyrox = (float)((int16_t)(IMU_data[8] << 8 | IMU_data[9])) * gyro_scale * -1.0;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3308      	adds	r3, #8
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	b21a      	sxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3309      	adds	r3, #9
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b21b      	sxth	r3, r3
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002234:	4b61      	ldr	r3, [pc, #388]	; (80023bc <mahony+0x270>)
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223e:	ee17 0a90 	vmov	r0, s15
 8002242:	f7fe f909 	bl	8000458 <__aeabi_f2d>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	f7fe fc1d 	bl	8000a8c <__aeabi_d2f>
 8002252:	4603      	mov	r3, r0
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eef1 7a67 	vneg.f32	s15, s15
 800225c:	4b58      	ldr	r3, [pc, #352]	; (80023c0 <mahony+0x274>)
 800225e:	edc3 7a00 	vstr	s15, [r3]
	Gyroy = (float)((int16_t)(IMU_data[6] << 8 | IMU_data[7])) * gyro_scale;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3306      	adds	r3, #6
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	b21a      	sxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	3307      	adds	r3, #7
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b21b      	sxth	r3, r3
 8002274:	4313      	orrs	r3, r2
 8002276:	b21b      	sxth	r3, r3
 8002278:	ee07 3a90 	vmov	s15, r3
 800227c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002280:	4b4e      	ldr	r3, [pc, #312]	; (80023bc <mahony+0x270>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228a:	4b4e      	ldr	r3, [pc, #312]	; (80023c4 <mahony+0x278>)
 800228c:	edc3 7a00 	vstr	s15, [r3]
	Gyroz = (float)((int16_t)(IMU_data[10] << 8 | IMU_data[11])) * gyro_scale;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	330a      	adds	r3, #10
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	b21a      	sxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	330b      	adds	r3, #11
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b21b      	sxth	r3, r3
 80022a2:	4313      	orrs	r3, r2
 80022a4:	b21b      	sxth	r3, r3
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ae:	4b43      	ldr	r3, [pc, #268]	; (80023bc <mahony+0x270>)
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b8:	4b43      	ldr	r3, [pc, #268]	; (80023c8 <mahony+0x27c>)
 80022ba:	edc3 7a00 	vstr	s15, [r3]
	Gyro[0] = Gyrox - Gyro_bias[index][0];
 80022be:	4b40      	ldr	r3, [pc, #256]	; (80023c0 <mahony+0x274>)
 80022c0:	ed93 7a00 	vldr	s14, [r3]
 80022c4:	4941      	ldr	r1, [pc, #260]	; (80023cc <mahony+0x280>)
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	4613      	mov	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022da:	4b3d      	ldr	r3, [pc, #244]	; (80023d0 <mahony+0x284>)
 80022dc:	edc3 7a00 	vstr	s15, [r3]
	Gyro[1] = Gyroy - Gyro_bias[index][1];
 80022e0:	4b38      	ldr	r3, [pc, #224]	; (80023c4 <mahony+0x278>)
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	4939      	ldr	r1, [pc, #228]	; (80023cc <mahony+0x280>)
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3304      	adds	r3, #4
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022fe:	4b34      	ldr	r3, [pc, #208]	; (80023d0 <mahony+0x284>)
 8002300:	edc3 7a01 	vstr	s15, [r3, #4]
	Gyro[2] = Gyroz - Gyro_bias[index][2];
 8002304:	4b30      	ldr	r3, [pc, #192]	; (80023c8 <mahony+0x27c>)
 8002306:	ed93 7a00 	vldr	s14, [r3]
 800230a:	4930      	ldr	r1, [pc, #192]	; (80023cc <mahony+0x280>)
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3308      	adds	r3, #8
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002322:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <mahony+0x284>)
 8002324:	edc3 7a02 	vstr	s15, [r3, #8]

	for(int component = 0; component < 3; component++){
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
 800232c:	e010      	b.n	8002350 <mahony+0x204>
		Est_Acc[component] = 0.0;
 800232e:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <mahony+0x288>)
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
		e[component] = 0.0;
 800233c:	4a26      	ldr	r2, [pc, #152]	; (80023d8 <mahony+0x28c>)
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
	for(int component = 0; component < 3; component++){
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	3301      	adds	r3, #1
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	2b02      	cmp	r3, #2
 8002354:	ddeb      	ble.n	800232e <mahony+0x1e2>
	}

	if (Accex != 0 || Accey != 0 || Accez != 0){
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <mahony+0x260>)
 8002358:	edd3 7a00 	vldr	s15, [r3]
 800235c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002364:	d110      	bne.n	8002388 <mahony+0x23c>
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <mahony+0x264>)
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002374:	d108      	bne.n	8002388 <mahony+0x23c>
 8002376:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <mahony+0x268>)
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002384:	f000 80bf 	beq.w	8002506 <mahony+0x3ba>
		qGq(Mahony_q[index], gravity, 1);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	4a13      	ldr	r2, [pc, #76]	; (80023dc <mahony+0x290>)
 800238e:	4413      	add	r3, r2
 8002390:	2201      	movs	r2, #1
 8002392:	4913      	ldr	r1, [pc, #76]	; (80023e0 <mahony+0x294>)
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fc69 	bl	8001c6c <qGq>
		vectorCross(Est_Acc, Acc);
 800239a:	4907      	ldr	r1, [pc, #28]	; (80023b8 <mahony+0x26c>)
 800239c:	480d      	ldr	r0, [pc, #52]	; (80023d4 <mahony+0x288>)
 800239e:	f7ff fe81 	bl	80020a4 <vectorCross>

		for(int component = 0; component < 3; component++){
 80023a2:	2300      	movs	r3, #0
 80023a4:	623b      	str	r3, [r7, #32]
 80023a6:	e0aa      	b.n	80024fe <mahony+0x3b2>
 80023a8:	20000044 	.word	0x20000044
 80023ac:	20000cc8 	.word	0x20000cc8
 80023b0:	20000ccc 	.word	0x20000ccc
 80023b4:	20000cd0 	.word	0x20000cd0
 80023b8:	20000cd4 	.word	0x20000cd4
 80023bc:	20000048 	.word	0x20000048
 80023c0:	20000ce0 	.word	0x20000ce0
 80023c4:	20000ce4 	.word	0x20000ce4
 80023c8:	20000ce8 	.word	0x20000ce8
 80023cc:	20000dc8 	.word	0x20000dc8
 80023d0:	20000cec 	.word	0x20000cec
 80023d4:	20000f28 	.word	0x20000f28
 80023d8:	20000f1c 	.word	0x20000f1c
 80023dc:	20000d58 	.word	0x20000d58
 80023e0:	20000038 	.word	0x20000038
//			eInt[index][component] = eInt[index][component] + Ki * e[component] * delta_t;
//			Gyro[component] = Gyro[component] - Kp * e[component] - eInt[index][component];
			eInt[index][component] = eInt[index][component] + Ki * (e[component] + Past_e[index][component]) * delta_t / 2;
 80023e4:	49ac      	ldr	r1, [pc, #688]	; (8002698 <mahony+0x54c>)
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	6a3a      	ldr	r2, [r7, #32]
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	ed93 7a00 	vldr	s14, [r3]
 80023fa:	4aa8      	ldr	r2, [pc, #672]	; (800269c <mahony+0x550>)
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	edd3 6a00 	vldr	s13, [r3]
 8002406:	49a6      	ldr	r1, [pc, #664]	; (80026a0 <mahony+0x554>)
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	6a3a      	ldr	r2, [r7, #32]
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002420:	4ba0      	ldr	r3, [pc, #640]	; (80026a4 <mahony+0x558>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800242a:	4b9f      	ldr	r3, [pc, #636]	; (80026a8 <mahony+0x55c>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002434:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002438:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800243c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002440:	4995      	ldr	r1, [pc, #596]	; (8002698 <mahony+0x54c>)
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	6a3a      	ldr	r2, [r7, #32]
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	edc3 7a00 	vstr	s15, [r3]
			Gyro[component] = ((Gyro[component] + Past_Gyro[index][component]) - Kp * (e[component] + Past_e[index][component]) - (eInt[index][component] + Past_eInt[index][component])) / 2;
 8002456:	4a95      	ldr	r2, [pc, #596]	; (80026ac <mahony+0x560>)
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	ed93 7a00 	vldr	s14, [r3]
 8002462:	4993      	ldr	r1, [pc, #588]	; (80026b0 <mahony+0x564>)
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	6a3a      	ldr	r2, [r7, #32]
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800247c:	4a87      	ldr	r2, [pc, #540]	; (800269c <mahony+0x550>)
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	edd3 6a00 	vldr	s13, [r3]
 8002488:	4985      	ldr	r1, [pc, #532]	; (80026a0 <mahony+0x554>)
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	6a3a      	ldr	r2, [r7, #32]
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80024a2:	4b84      	ldr	r3, [pc, #528]	; (80026b4 <mahony+0x568>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024b0:	4979      	ldr	r1, [pc, #484]	; (8002698 <mahony+0x54c>)
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	6a3a      	ldr	r2, [r7, #32]
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	edd3 6a00 	vldr	s13, [r3]
 80024c6:	497c      	ldr	r1, [pc, #496]	; (80026b8 <mahony+0x56c>)
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	6a3a      	ldr	r2, [r7, #32]
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80024e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ec:	4a6f      	ldr	r2, [pc, #444]	; (80026ac <mahony+0x560>)
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	edc3 7a00 	vstr	s15, [r3]
		for(int component = 0; component < 3; component++){
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	3301      	adds	r3, #1
 80024fc:	623b      	str	r3, [r7, #32]
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	2b02      	cmp	r3, #2
 8002502:	f77f af6f 	ble.w	80023e4 <mahony+0x298>
		}
	}

	q_prod(Mahony_q[index], Gyro);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4a6c      	ldr	r2, [pc, #432]	; (80026bc <mahony+0x570>)
 800250c:	4413      	add	r3, r2
 800250e:	4967      	ldr	r1, [pc, #412]	; (80026ac <mahony+0x560>)
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fc6f 	bl	8001df4 <q_prod>

	float q_scale = 1 / SquareRootFloat(Mahony_q[index][0] * Mahony_q[index][0] + Mahony_q[index][1] * Mahony_q[index][1] + Mahony_q[index][2] * Mahony_q[index][2] + Mahony_q[index][3] * Mahony_q[index][3]);
 8002516:	4a69      	ldr	r2, [pc, #420]	; (80026bc <mahony+0x570>)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	4413      	add	r3, r2
 800251e:	ed93 7a00 	vldr	s14, [r3]
 8002522:	4a66      	ldr	r2, [pc, #408]	; (80026bc <mahony+0x570>)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	4413      	add	r3, r2
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002532:	4a62      	ldr	r2, [pc, #392]	; (80026bc <mahony+0x570>)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	4413      	add	r3, r2
 800253a:	3304      	adds	r3, #4
 800253c:	edd3 6a00 	vldr	s13, [r3]
 8002540:	4a5e      	ldr	r2, [pc, #376]	; (80026bc <mahony+0x570>)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002552:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002556:	4a59      	ldr	r2, [pc, #356]	; (80026bc <mahony+0x570>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	4413      	add	r3, r2
 800255e:	3308      	adds	r3, #8
 8002560:	edd3 6a00 	vldr	s13, [r3]
 8002564:	4a55      	ldr	r2, [pc, #340]	; (80026bc <mahony+0x570>)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	4413      	add	r3, r2
 800256c:	3308      	adds	r3, #8
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800257a:	4a50      	ldr	r2, [pc, #320]	; (80026bc <mahony+0x570>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	4413      	add	r3, r2
 8002582:	330c      	adds	r3, #12
 8002584:	edd3 6a00 	vldr	s13, [r3]
 8002588:	4a4c      	ldr	r2, [pc, #304]	; (80026bc <mahony+0x570>)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	4413      	add	r3, r2
 8002590:	330c      	adds	r3, #12
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259e:	eeb0 0a67 	vmov.f32	s0, s15
 80025a2:	f7ff f8fb 	bl	800179c <SquareRootFloat>
 80025a6:	eeb0 7a40 	vmov.f32	s14, s0
 80025aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025b2:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int component = 0; component < 4; component++){
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	e018      	b.n	80025ee <mahony+0x4a2>
		Mahony_q[index][component] = Mahony_q[index][component] * q_scale;
 80025bc:	493f      	ldr	r1, [pc, #252]	; (80026bc <mahony+0x570>)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	009a      	lsls	r2, r3, #2
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	ed93 7a00 	vldr	s14, [r3]
 80025ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80025d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d6:	4939      	ldr	r1, [pc, #228]	; (80026bc <mahony+0x570>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	009a      	lsls	r2, r3, #2
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	edc3 7a00 	vstr	s15, [r3]
	for(int component = 0; component < 4; component++){
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	3301      	adds	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	dde3      	ble.n	80025bc <mahony+0x470>
	}

	*(float_mem + 0) = Mahony_q[index][0];
 80025f4:	4a31      	ldr	r2, [pc, #196]	; (80026bc <mahony+0x570>)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	4413      	add	r3, r2
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	601a      	str	r2, [r3, #0]
	*(float_mem + 1) = Mahony_q[index][1] * -1.0;
 8002602:	4a2e      	ldr	r2, [pc, #184]	; (80026bc <mahony+0x570>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	4413      	add	r3, r2
 800260a:	3304      	adds	r3, #4
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd ff22 	bl	8000458 <__aeabi_f2d>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f7fe fa36 	bl	8000a8c <__aeabi_d2f>
 8002620:	4602      	mov	r2, r0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	ee07 2a90 	vmov	s15, r2
 800262a:	eef1 7a67 	vneg.f32	s15, s15
 800262e:	edc3 7a00 	vstr	s15, [r3]
	*(float_mem + 2) = Mahony_q[index][2] * -1.0;
 8002632:	4a22      	ldr	r2, [pc, #136]	; (80026bc <mahony+0x570>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	4413      	add	r3, r2
 800263a:	3308      	adds	r3, #8
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd ff0a 	bl	8000458 <__aeabi_f2d>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	f7fe fa1e 	bl	8000a8c <__aeabi_d2f>
 8002650:	4602      	mov	r2, r0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3308      	adds	r3, #8
 8002656:	ee07 2a90 	vmov	s15, r2
 800265a:	eef1 7a67 	vneg.f32	s15, s15
 800265e:	edc3 7a00 	vstr	s15, [r3]
	*(float_mem + 3) = Mahony_q[index][3] * -1.0;
 8002662:	4a16      	ldr	r2, [pc, #88]	; (80026bc <mahony+0x570>)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	4413      	add	r3, r2
 800266a:	330c      	adds	r3, #12
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd fef2 	bl	8000458 <__aeabi_f2d>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	f7fe fa06 	bl	8000a8c <__aeabi_d2f>
 8002680:	4602      	mov	r2, r0
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	330c      	adds	r3, #12
 8002686:	ee07 2a90 	vmov	s15, r2
 800268a:	eef1 7a67 	vneg.f32	s15, s15
 800268e:	edc3 7a00 	vstr	s15, [r3]

	for(int component = 0; component < 3; component++){
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	e048      	b.n	800272a <mahony+0x5de>
 8002698:	20000e74 	.word	0x20000e74
 800269c:	20000f1c 	.word	0x20000f1c
 80026a0:	20000ec8 	.word	0x20000ec8
 80026a4:	20000d50 	.word	0x20000d50
 80026a8:	20000d54 	.word	0x20000d54
 80026ac:	20000cec 	.word	0x20000cec
 80026b0:	20000cf8 	.word	0x20000cf8
 80026b4:	20000d4c 	.word	0x20000d4c
 80026b8:	20000e20 	.word	0x20000e20
 80026bc:	20000d58 	.word	0x20000d58
		Past_Gyro[index][component] = Gyro[component];
 80026c0:	4a1e      	ldr	r2, [pc, #120]	; (800273c <mahony+0x5f0>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	6819      	ldr	r1, [r3, #0]
 80026ca:	481d      	ldr	r0, [pc, #116]	; (8002740 <mahony+0x5f4>)
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4403      	add	r3, r0
 80026dc:	6019      	str	r1, [r3, #0]
		Past_e[index][component] = e[component];
 80026de:	4a19      	ldr	r2, [pc, #100]	; (8002744 <mahony+0x5f8>)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	6819      	ldr	r1, [r3, #0]
 80026e8:	4817      	ldr	r0, [pc, #92]	; (8002748 <mahony+0x5fc>)
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4403      	add	r3, r0
 80026fa:	6019      	str	r1, [r3, #0]
		Past_eInt[index][component] = eInt[index][component];
 80026fc:	4913      	ldr	r1, [pc, #76]	; (800274c <mahony+0x600>)
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	6819      	ldr	r1, [r3, #0]
 8002710:	480f      	ldr	r0, [pc, #60]	; (8002750 <mahony+0x604>)
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4403      	add	r3, r0
 8002722:	6019      	str	r1, [r3, #0]
	for(int component = 0; component < 3; component++){
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	3301      	adds	r3, #1
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b02      	cmp	r3, #2
 800272e:	ddc7      	ble.n	80026c0 <mahony+0x574>
	}
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	; 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000cec 	.word	0x20000cec
 8002740:	20000cf8 	.word	0x20000cf8
 8002744:	20000f1c 	.word	0x20000f1c
 8002748:	20000ec8 	.word	0x20000ec8
 800274c:	20000e74 	.word	0x20000e74
 8002750:	20000e20 	.word	0x20000e20

08002754 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8002754:	b5b0      	push	{r4, r5, r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <APPD_EnableCPU2+0x34>)
 800275c:	1d3c      	adds	r4, r7, #4
 800275e:	461d      	mov	r5, r3
 8002760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002764:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002768:	c403      	stmia	r4!, {r0, r1}
 800276a:	8022      	strh	r2, [r4, #0]
 800276c:	3402      	adds	r4, #2
 800276e:	0c13      	lsrs	r3, r2, #16
 8002770:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8002772:	f00e fa07 	bl	8010b84 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	4618      	mov	r0, r3
 800277a:	f00d fc98 	bl	80100ae <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800277e:	bf00      	nop
}
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bdb0      	pop	{r4, r5, r7, pc}
 8002786:	bf00      	nop
 8002788:	08014220 	.word	0x08014220

0800278c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <LL_C2_PWR_SetPowerMode+0x28>)
 8002796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800279a:	f023 0207 	bic.w	r2, r3, #7
 800279e:	4905      	ldr	r1, [pc, #20]	; (80027b4 <LL_C2_PWR_SetPowerMode+0x28>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	58000400 	.word	0x58000400

080027b8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <LL_EXTI_EnableIT_32_63+0x24>)
 80027c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80027c6:	4905      	ldr	r1, [pc, #20]	; (80027dc <LL_EXTI_EnableIT_32_63+0x24>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	58000800 	.word	0x58000800

080027e0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80027e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ec:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80027ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80027f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027fa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	cafecafe 	.word	0xcafecafe

0800281c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800282e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <LL_DBGMCU_GetDeviceID+0x18>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e0042000 	.word	0xe0042000

08002860 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <LL_DBGMCU_GetRevisionID+0x18>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	b29b      	uxth	r3, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e0042000 	.word	0xe0042000

0800287c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <LL_LPM_EnableSleep+0x1c>)
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <LL_LPM_EnableSleep+0x1c>)
 8002886:	f023 0304 	bic.w	r3, r3, #4
 800288a:	6113      	str	r3, [r2, #16]
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	22ff      	movs	r2, #255	; 0xff
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	22ca      	movs	r2, #202	; 0xca
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2253      	movs	r2, #83	; 0x53
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 0207 	bic.w	r2, r3, #7
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	609a      	str	r2, [r3, #8]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <MX_APPE_Config+0x18>)
 8002902:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002906:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8002908:	f000 f824 	bl	8002954 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800290c:	f000 f829 	bl	8002962 <Config_HSE>

  return;
 8002910:	bf00      	nop
}
 8002912:	bd80      	pop	{r7, pc}
 8002914:	58004000 	.word	0x58004000

08002918 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800291c:	f000 f835 	bl	800298a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8002920:	f000 f84e 	bl	80029c0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8002924:	4903      	ldr	r1, [pc, #12]	; (8002934 <MX_APPE_Init+0x1c>)
 8002926:	2000      	movs	r0, #0
 8002928:	f000 fdee 	bl	8003508 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800292c:	f000 f856 	bl	80029dc <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8002930:	bf00      	nop
}
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20001064 	.word	0x20001064

08002938 <Init_Smps>:

void Init_Smps(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800293c:	bf00      	nop
}
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <Init_Exti>:

void Init_Exti(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800294a:	2050      	movs	r0, #80	; 0x50
 800294c:	f7ff ff34 	bl	80027b8 <LL_EXTI_EnableIT_32_63>

  return;
 8002950:	bf00      	nop
}
 8002952:	bd80      	pop	{r7, pc}

08002954 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8002958:	bf00      	nop
}
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002968:	2000      	movs	r0, #0
 800296a:	f00e f997 	bl	8010c9c <OTP_Read>
 800296e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	799b      	ldrb	r3, [r3, #6]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff30 	bl	80027e0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8002980:	bf00      	nop
 8002982:	bf00      	nop
}
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <System_Init>:

static void System_Init(void)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	af00      	add	r7, sp, #0
  Init_Smps();
 800298e:	f7ff ffd3 	bl	8002938 <Init_Smps>

  Init_Exti();
 8002992:	f7ff ffd8 	bl	8002946 <Init_Exti>

  Init_Rtc();
 8002996:	f000 f803 	bl	80029a0 <Init_Rtc>

  return;
 800299a:	bf00      	nop
}
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80029a4:	4805      	ldr	r0, [pc, #20]	; (80029bc <Init_Rtc+0x1c>)
 80029a6:	f7ff ff86 	bl	80028b6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80029aa:	2100      	movs	r1, #0
 80029ac:	4803      	ldr	r0, [pc, #12]	; (80029bc <Init_Rtc+0x1c>)
 80029ae:	f7ff ff92 	bl	80028d6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80029b2:	4802      	ldr	r0, [pc, #8]	; (80029bc <Init_Rtc+0x1c>)
 80029b4:	f7ff ff72 	bl	800289c <LL_RTC_EnableWriteProtection>

  return;
 80029b8:	bf00      	nop
}
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40002800 	.word	0x40002800

080029c0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80029c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029c8:	f7ff ff28 	bl	800281c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80029cc:	f010 f8ce 	bl	8012b6c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80029d0:	2004      	movs	r0, #4
 80029d2:	f7ff fedb 	bl	800278c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80029d6:	bf00      	nop
}
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80029e2:	f00d ff19 	bl	8010818 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80029e6:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <appe_Tl_Init+0x50>)
 80029e8:	2100      	movs	r1, #0
 80029ea:	2008      	movs	r0, #8
 80029ec:	f010 f9fc 	bl	8012de8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <appe_Tl_Init+0x54>)
 80029f2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <appe_Tl_Init+0x58>)
 80029f6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80029f8:	463b      	mov	r3, r7
 80029fa:	4619      	mov	r1, r3
 80029fc:	480e      	ldr	r0, [pc, #56]	; (8002a38 <appe_Tl_Init+0x5c>)
 80029fe:	f00d fdcd 	bl	801059c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <appe_Tl_Init+0x60>)
 8002a04:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <appe_Tl_Init+0x64>)
 8002a08:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <appe_Tl_Init+0x68>)
 8002a0c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8002a0e:	f240 533c 	movw	r3, #1340	; 0x53c
 8002a12:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8002a14:	f107 0308 	add.w	r3, r7, #8
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f00e f83f 	bl	8010a9c <TL_MM_Init>

  TL_Enable();
 8002a1e:	f00d fef5 	bl	801080c <TL_Enable>

  return;
 8002a22:	bf00      	nop
}
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	080105d5 	.word	0x080105d5
 8002a30:	20030734 	.word	0x20030734
 8002a34:	08002a49 	.word	0x08002a49
 8002a38:	08002a61 	.word	0x08002a61
 8002a3c:	2003094c 	.word	0x2003094c
 8002a40:	20030840 	.word	0x20030840
 8002a44:	200301f8 	.word	0x200301f8

08002a48 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8002a52:	bf00      	nop
}
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	330b      	adds	r3, #11
 8002a6e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8002a7a:	2b07      	cmp	r3, #7
 8002a7c:	d81f      	bhi.n	8002abe <APPE_SysUserEvtRx+0x5e>
 8002a7e:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <APPE_SysUserEvtRx+0x24>)
 8002a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a84:	08002aa5 	.word	0x08002aa5
 8002a88:	08002ab7 	.word	0x08002ab7
 8002a8c:	08002abf 	.word	0x08002abf
 8002a90:	08002abf 	.word	0x08002abf
 8002a94:	08002abf 	.word	0x08002abf
 8002a98:	08002abf 	.word	0x08002abf
 8002a9c:	08002abf 	.word	0x08002abf
 8002aa0:	08002abf 	.word	0x08002abf
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8002aa4:	f107 030c 	add.w	r3, r7, #12
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f00d fb2d 	bl	8010108 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f81b 	bl	8002aea <APPE_SysEvtReadyProcessing>
    break;
 8002ab4:	e004      	b.n	8002ac0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f806 	bl	8002ac8 <APPE_SysEvtError>
    break;
 8002abc:	e000      	b.n	8002ac0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8002abe:	bf00      	nop
  }

  return;
 8002ac0:	bf00      	nop
}
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	330b      	adds	r3, #11
 8002ad6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3302      	adds	r3, #2
 8002adc:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8002ade:	bf00      	nop
}
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b08a      	sub	sp, #40	; 0x28
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8002af2:	f107 0308 	add.w	r3, r7, #8
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	609a      	str	r2, [r3, #8]
 8002afe:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	330b      	adds	r3, #11
 8002b0e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	3302      	adds	r3, #2
 8002b14:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d11d      	bne.n	8002b5a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8002b1e:	f7ff fe19 	bl	8002754 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8002b22:	230f      	movs	r3, #15
 8002b24:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8002b26:	237f      	movs	r3, #127	; 0x7f
 8002b28:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8002b2a:	f7ff fe99 	bl	8002860 <LL_DBGMCU_GetRevisionID>
 8002b2e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8002b36:	f7ff fe85 	bl	8002844 <LL_DBGMCU_GetDeviceID>
 8002b3a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8002b42:	f107 0308 	add.w	r3, r7, #8
 8002b46:	4618      	mov	r0, r3
 8002b48:	f00d fac8 	bl	80100dc <SHCI_C2_Config>

    APP_BLE_Init();
 8002b4c:	f00e f9b0 	bl	8010eb0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002b50:	2100      	movs	r1, #0
 8002b52:	2001      	movs	r0, #1
 8002b54:	f010 f81c 	bl	8012b90 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8002b58:	e007      	b.n	8002b6a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d103      	bne.n	8002b6a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
  return;
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
}
 8002b6c:	3728      	adds	r7, #40	; 0x28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b7a:	f001 fceb 	bl	8004554 <HAL_GetTick>
 8002b7e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8002b8c:	f001 fcfa 	bl	8004584 <HAL_GetTickFreq>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461a      	mov	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4413      	add	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b9a:	e002      	b.n	8002ba2 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8002b9c:	f7ff fe6e 	bl	800287c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8002ba0:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8002ba2:	f001 fcd7 	bl	8004554 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d8f4      	bhi.n	8002b9c <HAL_Delay+0x2a>
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	bf00      	nop
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f010 f814 	bl	8012bf0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8002bd0:	bf00      	nop
}
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295
 8002be8:	f010 f802 	bl	8012bf0 <UTIL_SEQ_Run>
  return;
 8002bec:	bf00      	nop
}
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	2008      	movs	r0, #8
 8002c00:	f010 f914 	bl	8012e2c <UTIL_SEQ_SetTask>
  return;
 8002c04:	bf00      	nop
}
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002c14:	2002      	movs	r0, #2
 8002c16:	f010 f975 	bl	8012f04 <UTIL_SEQ_SetEvt>
  return;
 8002c1a:	bf00      	nop
}
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002c2a:	2002      	movs	r0, #2
 8002c2c:	f010 f98a 	bl	8012f44 <UTIL_SEQ_WaitEvt>
  return;
 8002c30:	bf00      	nop
}
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c80:	2001      	movs	r0, #1
 8002c82:	f7ff ffd9 	bl	8002c38 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c86:	2002      	movs	r0, #2
 8002c88:	f7ff ffd6 	bl	8002c38 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8c:	2004      	movs	r0, #4
 8002c8e:	f7ff ffd3 	bl	8002c38 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8002c92:	2200      	movs	r2, #0
 8002c94:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8002c98:	4810      	ldr	r0, [pc, #64]	; (8002cdc <MX_GPIO_Init+0x70>)
 8002c9a:	f001 ffa1 	bl	8004be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Btn_Pin;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	4619      	mov	r1, r3
 8002cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb2:	f001 fe0d 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8002cb6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002cba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4803      	ldr	r0, [pc, #12]	; (8002cdc <MX_GPIO_Init+0x70>)
 8002cce:	f001 fdff 	bl	80048d0 <HAL_GPIO_Init>

}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	48000800 	.word	0x48000800

08002ce0 <LL_EXTI_EnableIT_0_31>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <LL_EXTI_EnableIT_0_31+0x24>)
 8002cea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002cee:	4905      	ldr	r1, [pc, #20]	; (8002d04 <LL_EXTI_EnableIT_0_31+0x24>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	58000800 	.word	0x58000800

08002d08 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4904      	ldr	r1, [pc, #16]	; (8002d28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]

}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	58000800 	.word	0x58000800

08002d2c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <ReadRtcSsrValue+0x3c>)
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <ReadRtcSsrValue+0x3c>)
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002d42:	e005      	b.n	8002d50 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002d48:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <ReadRtcSsrValue+0x3c>)
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d1f5      	bne.n	8002d44 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002d58:	683b      	ldr	r3, [r7, #0]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40002800 	.word	0x40002800

08002d6c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	460a      	mov	r2, r1
 8002d76:	71fb      	strb	r3, [r7, #7]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002d7c:	79ba      	ldrb	r2, [r7, #6]
 8002d7e:	491d      	ldr	r1, [pc, #116]	; (8002df4 <LinkTimerAfter+0x88>)
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	440b      	add	r3, r1
 8002d8a:	3315      	adds	r3, #21
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	2b06      	cmp	r3, #6
 8002d94:	d009      	beq.n	8002daa <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	4916      	ldr	r1, [pc, #88]	; (8002df4 <LinkTimerAfter+0x88>)
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	3314      	adds	r3, #20
 8002da6:	79fa      	ldrb	r2, [r7, #7]
 8002da8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002daa:	79fa      	ldrb	r2, [r7, #7]
 8002dac:	4911      	ldr	r1, [pc, #68]	; (8002df4 <LinkTimerAfter+0x88>)
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	3315      	adds	r3, #21
 8002dba:	7bfa      	ldrb	r2, [r7, #15]
 8002dbc:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002dbe:	79fa      	ldrb	r2, [r7, #7]
 8002dc0:	490c      	ldr	r1, [pc, #48]	; (8002df4 <LinkTimerAfter+0x88>)
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	440b      	add	r3, r1
 8002dcc:	3314      	adds	r3, #20
 8002dce:	79ba      	ldrb	r2, [r7, #6]
 8002dd0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002dd2:	79ba      	ldrb	r2, [r7, #6]
 8002dd4:	4907      	ldr	r1, [pc, #28]	; (8002df4 <LinkTimerAfter+0x88>)
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	440b      	add	r3, r1
 8002de0:	3315      	adds	r3, #21
 8002de2:	79fa      	ldrb	r2, [r7, #7]
 8002de4:	701a      	strb	r2, [r3, #0]

  return;
 8002de6:	bf00      	nop
}
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000f34 	.word	0x20000f34

08002df8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	460a      	mov	r2, r1
 8002e02:	71fb      	strb	r3, [r7, #7]
 8002e04:	4613      	mov	r3, r2
 8002e06:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <LinkTimerBefore+0xb8>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	79ba      	ldrb	r2, [r7, #6]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d032      	beq.n	8002e7a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002e14:	79ba      	ldrb	r2, [r7, #6]
 8002e16:	4927      	ldr	r1, [pc, #156]	; (8002eb4 <LinkTimerBefore+0xbc>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	3314      	adds	r3, #20
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002e28:	7bfa      	ldrb	r2, [r7, #15]
 8002e2a:	4922      	ldr	r1, [pc, #136]	; (8002eb4 <LinkTimerBefore+0xbc>)
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	3315      	adds	r3, #21
 8002e38:	79fa      	ldrb	r2, [r7, #7]
 8002e3a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002e3c:	79fa      	ldrb	r2, [r7, #7]
 8002e3e:	491d      	ldr	r1, [pc, #116]	; (8002eb4 <LinkTimerBefore+0xbc>)
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	3315      	adds	r3, #21
 8002e4c:	79ba      	ldrb	r2, [r7, #6]
 8002e4e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002e50:	79fa      	ldrb	r2, [r7, #7]
 8002e52:	4918      	ldr	r1, [pc, #96]	; (8002eb4 <LinkTimerBefore+0xbc>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3314      	adds	r3, #20
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002e64:	79ba      	ldrb	r2, [r7, #6]
 8002e66:	4913      	ldr	r1, [pc, #76]	; (8002eb4 <LinkTimerBefore+0xbc>)
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	3314      	adds	r3, #20
 8002e74:	79fa      	ldrb	r2, [r7, #7]
 8002e76:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002e78:	e014      	b.n	8002ea4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002e7a:	79fa      	ldrb	r2, [r7, #7]
 8002e7c:	490d      	ldr	r1, [pc, #52]	; (8002eb4 <LinkTimerBefore+0xbc>)
 8002e7e:	4613      	mov	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	3315      	adds	r3, #21
 8002e8a:	79ba      	ldrb	r2, [r7, #6]
 8002e8c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002e8e:	79ba      	ldrb	r2, [r7, #6]
 8002e90:	4908      	ldr	r1, [pc, #32]	; (8002eb4 <LinkTimerBefore+0xbc>)
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3314      	adds	r3, #20
 8002e9e:	79fa      	ldrb	r2, [r7, #7]
 8002ea0:	701a      	strb	r2, [r3, #0]
  return;
 8002ea2:	bf00      	nop
}
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20000fc4 	.word	0x20000fc4
 8002eb4:	20000f34 	.word	0x20000f34

08002eb8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002ec2:	4b4e      	ldr	r3, [pc, #312]	; (8002ffc <linkTimer+0x144>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b06      	cmp	r3, #6
 8002eca:	d118      	bne.n	8002efe <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002ecc:	4b4b      	ldr	r3, [pc, #300]	; (8002ffc <linkTimer+0x144>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	4b4b      	ldr	r3, [pc, #300]	; (8003000 <linkTimer+0x148>)
 8002ed4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002ed6:	4a49      	ldr	r2, [pc, #292]	; (8002ffc <linkTimer+0x144>)
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002edc:	79fa      	ldrb	r2, [r7, #7]
 8002ede:	4949      	ldr	r1, [pc, #292]	; (8003004 <linkTimer+0x14c>)
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	3315      	adds	r3, #21
 8002eec:	2206      	movs	r2, #6
 8002eee:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002ef0:	4b45      	ldr	r3, [pc, #276]	; (8003008 <linkTimer+0x150>)
 8002ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	81fb      	strh	r3, [r7, #14]
 8002efc:	e078      	b.n	8002ff0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002efe:	f000 f909 	bl	8003114 <ReturnTimeElapsed>
 8002f02:	4603      	mov	r3, r0
 8002f04:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002f06:	79fa      	ldrb	r2, [r7, #7]
 8002f08:	493e      	ldr	r1, [pc, #248]	; (8003004 <linkTimer+0x14c>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	440b      	add	r3, r1
 8002f14:	3308      	adds	r3, #8
 8002f16:	6819      	ldr	r1, [r3, #0]
 8002f18:	89fb      	ldrh	r3, [r7, #14]
 8002f1a:	79fa      	ldrb	r2, [r7, #7]
 8002f1c:	4419      	add	r1, r3
 8002f1e:	4839      	ldr	r0, [pc, #228]	; (8003004 <linkTimer+0x14c>)
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4403      	add	r3, r0
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002f2e:	79fa      	ldrb	r2, [r7, #7]
 8002f30:	4934      	ldr	r1, [pc, #208]	; (8003004 <linkTimer+0x14c>)
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002f42:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <linkTimer+0x144>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4a2e      	ldr	r2, [pc, #184]	; (8003004 <linkTimer+0x14c>)
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	440b      	add	r3, r1
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	3308      	adds	r3, #8
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d337      	bcc.n	8002fd0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002f60:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <linkTimer+0x144>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002f66:	7b7a      	ldrb	r2, [r7, #13]
 8002f68:	4926      	ldr	r1, [pc, #152]	; (8003004 <linkTimer+0x14c>)
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	440b      	add	r3, r1
 8002f74:	3315      	adds	r3, #21
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002f7a:	e013      	b.n	8002fa4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002f7c:	7b7a      	ldrb	r2, [r7, #13]
 8002f7e:	4921      	ldr	r1, [pc, #132]	; (8003004 <linkTimer+0x14c>)
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	440b      	add	r3, r1
 8002f8a:	3315      	adds	r3, #21
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002f90:	7b7a      	ldrb	r2, [r7, #13]
 8002f92:	491c      	ldr	r1, [pc, #112]	; (8003004 <linkTimer+0x14c>)
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	440b      	add	r3, r1
 8002f9e:	3315      	adds	r3, #21
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002fa4:	7b3b      	ldrb	r3, [r7, #12]
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d00b      	beq.n	8002fc2 <linkTimer+0x10a>
 8002faa:	7b3a      	ldrb	r2, [r7, #12]
 8002fac:	4915      	ldr	r1, [pc, #84]	; (8003004 <linkTimer+0x14c>)
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	440b      	add	r3, r1
 8002fb8:	3308      	adds	r3, #8
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d2dc      	bcs.n	8002f7c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002fc2:	7b7a      	ldrb	r2, [r7, #13]
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fecf 	bl	8002d6c <LinkTimerAfter>
 8002fce:	e00f      	b.n	8002ff0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <linkTimer+0x144>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ff0c 	bl	8002df8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <linkTimer+0x144>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <linkTimer+0x148>)
 8002fe8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002fea:	4a04      	ldr	r2, [pc, #16]	; (8002ffc <linkTimer+0x144>)
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002ff0:	89fb      	ldrh	r3, [r7, #14]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000fc4 	.word	0x20000fc4
 8003000:	20000fc5 	.word	0x20000fc5
 8003004:	20000f34 	.word	0x20000f34
 8003008:	20000fc8 	.word	0x20000fc8

0800300c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	460a      	mov	r2, r1
 8003016:	71fb      	strb	r3, [r7, #7]
 8003018:	4613      	mov	r3, r2
 800301a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800301c:	4b39      	ldr	r3, [pc, #228]	; (8003104 <UnlinkTimer+0xf8>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	79fa      	ldrb	r2, [r7, #7]
 8003024:	429a      	cmp	r2, r3
 8003026:	d111      	bne.n	800304c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8003028:	4b36      	ldr	r3, [pc, #216]	; (8003104 <UnlinkTimer+0xf8>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4b36      	ldr	r3, [pc, #216]	; (8003108 <UnlinkTimer+0xfc>)
 8003030:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8003032:	79fa      	ldrb	r2, [r7, #7]
 8003034:	4935      	ldr	r1, [pc, #212]	; (800310c <UnlinkTimer+0x100>)
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	440b      	add	r3, r1
 8003040:	3315      	adds	r3, #21
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4b2f      	ldr	r3, [pc, #188]	; (8003104 <UnlinkTimer+0xf8>)
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	e03e      	b.n	80030ca <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800304c:	79fa      	ldrb	r2, [r7, #7]
 800304e:	492f      	ldr	r1, [pc, #188]	; (800310c <UnlinkTimer+0x100>)
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	440b      	add	r3, r1
 800305a:	3314      	adds	r3, #20
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8003060:	79fa      	ldrb	r2, [r7, #7]
 8003062:	492a      	ldr	r1, [pc, #168]	; (800310c <UnlinkTimer+0x100>)
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	3315      	adds	r3, #21
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8003074:	79f9      	ldrb	r1, [r7, #7]
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	4824      	ldr	r0, [pc, #144]	; (800310c <UnlinkTimer+0x100>)
 800307a:	460b      	mov	r3, r1
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	440b      	add	r3, r1
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4403      	add	r3, r0
 8003084:	3315      	adds	r3, #21
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b2d8      	uxtb	r0, r3
 800308a:	4920      	ldr	r1, [pc, #128]	; (800310c <UnlinkTimer+0x100>)
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	440b      	add	r3, r1
 8003096:	3315      	adds	r3, #21
 8003098:	4602      	mov	r2, r0
 800309a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800309c:	7bbb      	ldrb	r3, [r7, #14]
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d013      	beq.n	80030ca <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80030a2:	79f9      	ldrb	r1, [r7, #7]
 80030a4:	7bba      	ldrb	r2, [r7, #14]
 80030a6:	4819      	ldr	r0, [pc, #100]	; (800310c <UnlinkTimer+0x100>)
 80030a8:	460b      	mov	r3, r1
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	440b      	add	r3, r1
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4403      	add	r3, r0
 80030b2:	3314      	adds	r3, #20
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b2d8      	uxtb	r0, r3
 80030b8:	4914      	ldr	r1, [pc, #80]	; (800310c <UnlinkTimer+0x100>)
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	440b      	add	r3, r1
 80030c4:	3314      	adds	r3, #20
 80030c6:	4602      	mov	r2, r0
 80030c8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80030ca:	79fa      	ldrb	r2, [r7, #7]
 80030cc:	490f      	ldr	r1, [pc, #60]	; (800310c <UnlinkTimer+0x100>)
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	440b      	add	r3, r1
 80030d8:	330c      	adds	r3, #12
 80030da:	2201      	movs	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <UnlinkTimer+0xf8>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b06      	cmp	r3, #6
 80030e6:	d107      	bne.n	80030f8 <UnlinkTimer+0xec>
 80030e8:	79bb      	ldrb	r3, [r7, #6]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d104      	bne.n	80030f8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80030ee:	4b08      	ldr	r3, [pc, #32]	; (8003110 <UnlinkTimer+0x104>)
 80030f0:	f04f 32ff 	mov.w	r2, #4294967295
 80030f4:	601a      	str	r2, [r3, #0]
  }

  return;
 80030f6:	bf00      	nop
 80030f8:	bf00      	nop
}
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	20000fc4 	.word	0x20000fc4
 8003108:	20000fc5 	.word	0x20000fc5
 800310c:	20000f34 	.word	0x20000f34
 8003110:	20000fc8 	.word	0x20000fc8

08003114 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <ReturnTimeElapsed+0x70>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d026      	beq.n	8003172 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8003124:	f7ff fe02 	bl	8002d2c <ReadRtcSsrValue>
 8003128:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <ReturnTimeElapsed+0x70>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	d805      	bhi.n	8003140 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <ReturnTimeElapsed+0x70>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	e00a      	b.n	8003156 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <ReturnTimeElapsed+0x74>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800314c:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <ReturnTimeElapsed+0x70>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	4413      	add	r3, r2
 8003154:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <ReturnTimeElapsed+0x78>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <ReturnTimeElapsed+0x7c>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	40d3      	lsrs	r3, r2
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	e001      	b.n	8003176 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	b29b      	uxth	r3, r3
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000fc8 	.word	0x20000fc8
 8003188:	20000fd0 	.word	0x20000fd0
 800318c:	20000fce 	.word	0x20000fce
 8003190:	20000fcd 	.word	0x20000fcd

08003194 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d108      	bne.n	80031b6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80031a4:	f7ff fdc2 	bl	8002d2c <ReadRtcSsrValue>
 80031a8:	4603      	mov	r3, r0
 80031aa:	4a21      	ldr	r2, [pc, #132]	; (8003230 <RestartWakeupCounter+0x9c>)
 80031ac:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80031ae:	2003      	movs	r0, #3
 80031b0:	f001 fb71 	bl	8004896 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80031b4:	e039      	b.n	800322a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d803      	bhi.n	80031c4 <RestartWakeupCounter+0x30>
 80031bc:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <RestartWakeupCounter+0xa0>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d002      	beq.n	80031ca <RestartWakeupCounter+0x36>
      Value -= 1;
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80031ca:	bf00      	nop
 80031cc:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <RestartWakeupCounter+0xa4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f8      	beq.n	80031cc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <RestartWakeupCounter+0xa4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <RestartWakeupCounter+0xa4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80031ea:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <RestartWakeupCounter+0xa8>)
 80031ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80031f2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80031f4:	2003      	movs	r0, #3
 80031f6:	f001 fb5c 	bl	80048b2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <RestartWakeupCounter+0xac>)
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	0c1b      	lsrs	r3, r3, #16
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	490e      	ldr	r1, [pc, #56]	; (8003240 <RestartWakeupCounter+0xac>)
 8003206:	4313      	orrs	r3, r2
 8003208:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800320a:	f7ff fd8f 	bl	8002d2c <ReadRtcSsrValue>
 800320e:	4603      	mov	r3, r0
 8003210:	4a07      	ldr	r2, [pc, #28]	; (8003230 <RestartWakeupCounter+0x9c>)
 8003212:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <RestartWakeupCounter+0xa4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <RestartWakeupCounter+0xa4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003222:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003224:	f3af 8000 	nop.w
  return ;
 8003228:	bf00      	nop
}
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000fc8 	.word	0x20000fc8
 8003234:	20000fcd 	.word	0x20000fcd
 8003238:	20001064 	.word	0x20001064
 800323c:	58000800 	.word	0x58000800
 8003240:	40002800 	.word	0x40002800

08003244 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800324a:	4b45      	ldr	r3, [pc, #276]	; (8003360 <RescheduleTimerList+0x11c>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003256:	d107      	bne.n	8003268 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003258:	bf00      	nop
 800325a:	4b42      	ldr	r3, [pc, #264]	; (8003364 <RescheduleTimerList+0x120>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f8      	bne.n	800325a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003268:	4b3e      	ldr	r3, [pc, #248]	; (8003364 <RescheduleTimerList+0x120>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <RescheduleTimerList+0x120>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003276:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8003278:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <RescheduleTimerList+0x124>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	493a      	ldr	r1, [pc, #232]	; (800336c <RescheduleTimerList+0x128>)
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	440b      	add	r3, r1
 800328c:	3308      	adds	r3, #8
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8003292:	f7ff ff3f 	bl	8003114 <ReturnTimeElapsed>
 8003296:	4603      	mov	r3, r0
 8003298:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d205      	bcs.n	80032ae <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80032a6:	4b32      	ldr	r3, [pc, #200]	; (8003370 <RescheduleTimerList+0x12c>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e04d      	b.n	800334a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	4a30      	ldr	r2, [pc, #192]	; (8003374 <RescheduleTimerList+0x130>)
 80032b2:	8812      	ldrh	r2, [r2, #0]
 80032b4:	b292      	uxth	r2, r2
 80032b6:	4413      	add	r3, r2
 80032b8:	461a      	mov	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4293      	cmp	r3, r2
 80032be:	d906      	bls.n	80032ce <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80032c0:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <RescheduleTimerList+0x130>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80032c6:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <RescheduleTimerList+0x12c>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e03d      	b.n	800334a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80032d8:	4b25      	ldr	r3, [pc, #148]	; (8003370 <RescheduleTimerList+0x12c>)
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80032de:	e034      	b.n	800334a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	4922      	ldr	r1, [pc, #136]	; (800336c <RescheduleTimerList+0x128>)
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	440b      	add	r3, r1
 80032ee:	3308      	adds	r3, #8
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d20a      	bcs.n	800330e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	491c      	ldr	r1, [pc, #112]	; (800336c <RescheduleTimerList+0x128>)
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	440b      	add	r3, r1
 8003306:	3308      	adds	r3, #8
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e013      	b.n	8003336 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	4916      	ldr	r1, [pc, #88]	; (800336c <RescheduleTimerList+0x128>)
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	440b      	add	r3, r1
 800331c:	3308      	adds	r3, #8
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	7bfa      	ldrb	r2, [r7, #15]
 8003324:	1ac9      	subs	r1, r1, r3
 8003326:	4811      	ldr	r0, [pc, #68]	; (800336c <RescheduleTimerList+0x128>)
 8003328:	4613      	mov	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4413      	add	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4403      	add	r3, r0
 8003332:	3308      	adds	r3, #8
 8003334:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	490c      	ldr	r1, [pc, #48]	; (800336c <RescheduleTimerList+0x128>)
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	440b      	add	r3, r1
 8003344:	3315      	adds	r3, #21
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b06      	cmp	r3, #6
 800334e:	d1c7      	bne.n	80032e0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003350:	89bb      	ldrh	r3, [r7, #12]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ff1e 	bl	8003194 <RestartWakeupCounter>

  return ;
 8003358:	bf00      	nop
}
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40002800 	.word	0x40002800
 8003364:	20001064 	.word	0x20001064
 8003368:	20000fc4 	.word	0x20000fc4
 800336c:	20000f34 	.word	0x20000f34
 8003370:	20000fcc 	.word	0x20000fcc
 8003374:	20000fd2 	.word	0x20000fd2

08003378 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	; 0x28
 800337c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800337e:	f3ef 8310 	mrs	r3, PRIMASK
 8003382:	617b      	str	r3, [r7, #20]
  return(result);
 8003384:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003388:	b672      	cpsid	i
}
 800338a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800338c:	4b59      	ldr	r3, [pc, #356]	; (80034f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	22ca      	movs	r2, #202	; 0xca
 8003392:	625a      	str	r2, [r3, #36]	; 0x24
 8003394:	4b57      	ldr	r3, [pc, #348]	; (80034f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2253      	movs	r2, #83	; 0x53
 800339a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800339c:	4b55      	ldr	r3, [pc, #340]	; (80034f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	4b54      	ldr	r3, [pc, #336]	; (80034f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033aa:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80033ac:	4b52      	ldr	r3, [pc, #328]	; (80034f8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80033b4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80033b8:	4950      	ldr	r1, [pc, #320]	; (80034fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	440b      	add	r3, r1
 80033c4:	330c      	adds	r3, #12
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d16e      	bne.n	80034ac <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80033ce:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80033d2:	494a      	ldr	r1, [pc, #296]	; (80034fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	440b      	add	r3, r1
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80033e2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80033e6:	4945      	ldr	r1, [pc, #276]	; (80034fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	440b      	add	r3, r1
 80033f2:	3310      	adds	r3, #16
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80033f8:	4b41      	ldr	r3, [pc, #260]	; (8003500 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d04c      	beq.n	800349c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8003402:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003406:	493d      	ldr	r1, [pc, #244]	; (80034fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003408:	4613      	mov	r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4413      	add	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	440b      	add	r3, r1
 8003412:	330d      	adds	r3, #13
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d124      	bne.n	8003466 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800341c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003420:	2101      	movs	r1, #1
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fdf2 	bl	800300c <UnlinkTimer>
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f383 8810 	msr	PRIMASK, r3
}
 8003432:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003434:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003438:	4930      	ldr	r1, [pc, #192]	; (80034fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	440b      	add	r3, r1
 8003444:	3304      	adds	r3, #4
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800344c:	4611      	mov	r1, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fa32 	bl	80038b8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003454:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	22ca      	movs	r2, #202	; 0xca
 800345a:	625a      	str	r2, [r3, #36]	; 0x24
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2253      	movs	r2, #83	; 0x53
 8003462:	625a      	str	r2, [r3, #36]	; 0x24
 8003464:	e012      	b.n	800348c <HW_TS_RTC_Wakeup_Handler+0x114>
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f383 8810 	msr	PRIMASK, r3
}
 8003470:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8003472:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f99a 	bl	80037b0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800347c:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	22ca      	movs	r2, #202	; 0xca
 8003482:	625a      	str	r2, [r3, #36]	; 0x24
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2253      	movs	r2, #83	; 0x53
 800348a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800348c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	4619      	mov	r1, r3
 8003494:	69b8      	ldr	r0, [r7, #24]
 8003496:	f000 fa95 	bl	80039c4 <HW_TS_RTC_Int_AppNot>
 800349a:	e022      	b.n	80034e2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800349c:	f7ff fed2 	bl	8003244 <RescheduleTimerList>
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f383 8810 	msr	PRIMASK, r3
}
 80034aa:	e01a      	b.n	80034e2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80034ac:	bf00      	nop
 80034ae:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f8      	beq.n	80034ae <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80034bc:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80034cc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80034ce:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80034d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f383 8810 	msr	PRIMASK, r3
}
 80034e0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	22ff      	movs	r2, #255	; 0xff
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80034ea:	bf00      	nop
}
 80034ec:	3728      	adds	r7, #40	; 0x28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20001064 	.word	0x20001064
 80034f8:	20000fc4 	.word	0x20000fc4
 80034fc:	20000f34 	.word	0x20000f34
 8003500:	20000fcc 	.word	0x20000fcc
 8003504:	58000800 	.word	0x58000800

08003508 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003514:	4b5e      	ldr	r3, [pc, #376]	; (8003690 <HW_TS_Init+0x188>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	22ca      	movs	r2, #202	; 0xca
 800351a:	625a      	str	r2, [r3, #36]	; 0x24
 800351c:	4b5c      	ldr	r3, [pc, #368]	; (8003690 <HW_TS_Init+0x188>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2253      	movs	r2, #83	; 0x53
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003524:	4b5b      	ldr	r3, [pc, #364]	; (8003694 <HW_TS_Init+0x18c>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a5a      	ldr	r2, [pc, #360]	; (8003694 <HW_TS_Init+0x18c>)
 800352a:	f043 0320 	orr.w	r3, r3, #32
 800352e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003530:	4b58      	ldr	r3, [pc, #352]	; (8003694 <HW_TS_Init+0x18c>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f1c3 0304 	rsb	r3, r3, #4
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4b55      	ldr	r3, [pc, #340]	; (8003698 <HW_TS_Init+0x190>)
 8003544:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003546:	4b53      	ldr	r3, [pc, #332]	; (8003694 <HW_TS_Init+0x18c>)
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800354e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8003552:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	fa92 f2a2 	rbit	r2, r2
 800355a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	2a00      	cmp	r2, #0
 8003564:	d101      	bne.n	800356a <HW_TS_Init+0x62>
  {
    return 32U;
 8003566:	2220      	movs	r2, #32
 8003568:	e003      	b.n	8003572 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	fab2 f282 	clz	r2, r2
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	40d3      	lsrs	r3, r2
 8003574:	b2db      	uxtb	r3, r3
 8003576:	3301      	adds	r3, #1
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4b48      	ldr	r3, [pc, #288]	; (800369c <HW_TS_Init+0x194>)
 800357c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800357e:	4b45      	ldr	r3, [pc, #276]	; (8003694 <HW_TS_Init+0x18c>)
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003588:	b29b      	uxth	r3, r3
 800358a:	3301      	adds	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	4b44      	ldr	r3, [pc, #272]	; (80036a0 <HW_TS_Init+0x198>)
 8003590:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003592:	4b43      	ldr	r3, [pc, #268]	; (80036a0 <HW_TS_Init+0x198>)
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	3b01      	subs	r3, #1
 8003598:	4a40      	ldr	r2, [pc, #256]	; (800369c <HW_TS_Init+0x194>)
 800359a:	7812      	ldrb	r2, [r2, #0]
 800359c:	fb02 f303 	mul.w	r3, r2, r3
 80035a0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80035a4:	4a3c      	ldr	r2, [pc, #240]	; (8003698 <HW_TS_Init+0x190>)
 80035a6:	7812      	ldrb	r2, [r2, #0]
 80035a8:	40d3      	lsrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d904      	bls.n	80035c0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80035b6:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <HW_TS_Init+0x19c>)
 80035b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035bc:	801a      	strh	r2, [r3, #0]
 80035be:	e003      	b.n	80035c8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <HW_TS_Init+0x19c>)
 80035c6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80035c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80035cc:	f7ff fb9c 	bl	8002d08 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80035d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80035d4:	f7ff fb84 	bl	8002ce0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d13d      	bne.n	800365a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80035de:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <HW_TS_Init+0x1a0>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80035e4:	4b31      	ldr	r3, [pc, #196]	; (80036ac <HW_TS_Init+0x1a4>)
 80035e6:	f04f 32ff 	mov.w	r2, #4294967295
 80035ea:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80035ec:	2300      	movs	r3, #0
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e00c      	b.n	800360c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80035f2:	7ffa      	ldrb	r2, [r7, #31]
 80035f4:	492e      	ldr	r1, [pc, #184]	; (80036b0 <HW_TS_Init+0x1a8>)
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	440b      	add	r3, r1
 8003600:	330c      	adds	r3, #12
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003606:	7ffb      	ldrb	r3, [r7, #31]
 8003608:	3301      	adds	r3, #1
 800360a:	77fb      	strb	r3, [r7, #31]
 800360c:	7ffb      	ldrb	r3, [r7, #31]
 800360e:	2b05      	cmp	r3, #5
 8003610:	d9ef      	bls.n	80035f2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003612:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <HW_TS_Init+0x1ac>)
 8003614:	2206      	movs	r2, #6
 8003616:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8003618:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <HW_TS_Init+0x188>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HW_TS_Init+0x188>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003626:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003628:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HW_TS_Init+0x188>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	4b17      	ldr	r3, [pc, #92]	; (8003690 <HW_TS_Init+0x188>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003638:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800363a:	4b1f      	ldr	r3, [pc, #124]	; (80036b8 <HW_TS_Init+0x1b0>)
 800363c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003640:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8003642:	2003      	movs	r0, #3
 8003644:	f001 f935 	bl	80048b2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <HW_TS_Init+0x188>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <HW_TS_Init+0x188>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	e009      	b.n	800366e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800365a:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <HW_TS_Init+0x188>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003668:	2003      	movs	r0, #3
 800366a:	f001 f914 	bl	8004896 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800366e:	4b08      	ldr	r3, [pc, #32]	; (8003690 <HW_TS_Init+0x188>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	22ff      	movs	r2, #255	; 0xff
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003676:	2200      	movs	r2, #0
 8003678:	2103      	movs	r1, #3
 800367a:	2003      	movs	r0, #3
 800367c:	f001 f8c9 	bl	8004812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003680:	2003      	movs	r0, #3
 8003682:	f001 f8e0 	bl	8004846 <HAL_NVIC_EnableIRQ>

  return;
 8003686:	bf00      	nop
}
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20001064 	.word	0x20001064
 8003694:	40002800 	.word	0x40002800
 8003698:	20000fcd 	.word	0x20000fcd
 800369c:	20000fce 	.word	0x20000fce
 80036a0:	20000fd0 	.word	0x20000fd0
 80036a4:	20000fd2 	.word	0x20000fd2
 80036a8:	20000fcc 	.word	0x20000fcc
 80036ac:	20000fc8 	.word	0x20000fc8
 80036b0:	20000f34 	.word	0x20000f34
 80036b4:	20000fc4 	.word	0x20000fc4
 80036b8:	58000800 	.word	0x58000800

080036bc <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80036bc:	b480      	push	{r7}
 80036be:	b08b      	sub	sp, #44	; 0x2c
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d2:	f3ef 8310 	mrs	r3, PRIMASK
 80036d6:	61fb      	str	r3, [r7, #28]
  return(result);
 80036d8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80036da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80036dc:	b672      	cpsid	i
}
 80036de:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80036e0:	e004      	b.n	80036ec <HW_TS_Create+0x30>
  {
    loop++;
 80036e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036e6:	3301      	adds	r3, #1
 80036e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80036ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d80c      	bhi.n	800370e <HW_TS_Create+0x52>
 80036f4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80036f8:	492c      	ldr	r1, [pc, #176]	; (80037ac <HW_TS_Create+0xf0>)
 80036fa:	4613      	mov	r3, r2
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	4413      	add	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	440b      	add	r3, r1
 8003704:	330c      	adds	r3, #12
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e9      	bne.n	80036e2 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800370e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003712:	2b06      	cmp	r3, #6
 8003714:	d038      	beq.n	8003788 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8003716:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800371a:	4924      	ldr	r1, [pc, #144]	; (80037ac <HW_TS_Create+0xf0>)
 800371c:	4613      	mov	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	440b      	add	r3, r1
 8003726:	330c      	adds	r3, #12
 8003728:	2201      	movs	r2, #1
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f383 8810 	msr	PRIMASK, r3
}
 8003736:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003738:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800373c:	491b      	ldr	r1, [pc, #108]	; (80037ac <HW_TS_Create+0xf0>)
 800373e:	4613      	mov	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	440b      	add	r3, r1
 8003748:	3310      	adds	r3, #16
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800374e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003752:	4916      	ldr	r1, [pc, #88]	; (80037ac <HW_TS_Create+0xf0>)
 8003754:	4613      	mov	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	440b      	add	r3, r1
 800375e:	330d      	adds	r3, #13
 8003760:	79fa      	ldrb	r2, [r7, #7]
 8003762:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8003764:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003768:	4910      	ldr	r1, [pc, #64]	; (80037ac <HW_TS_Create+0xf0>)
 800376a:	4613      	mov	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4413      	add	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	440b      	add	r3, r1
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800377e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003780:	2300      	movs	r3, #0
 8003782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003786:	e008      	b.n	800379a <HW_TS_Create+0xde>
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f383 8810 	msr	PRIMASK, r3
}
 8003792:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8003794:	2301      	movs	r3, #1
 8003796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800379a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800379e:	4618      	mov	r0, r3
 80037a0:	372c      	adds	r7, #44	; 0x2c
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000f34 	.word	0x20000f34

080037b0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ba:	f3ef 8310 	mrs	r3, PRIMASK
 80037be:	60fb      	str	r3, [r7, #12]
  return(result);
 80037c0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80037c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80037c4:	b672      	cpsid	i
}
 80037c6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80037c8:	2003      	movs	r0, #3
 80037ca:	f001 f84a 	bl	8004862 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80037ce:	4b34      	ldr	r3, [pc, #208]	; (80038a0 <HW_TS_Stop+0xf0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	22ca      	movs	r2, #202	; 0xca
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24
 80037d6:	4b32      	ldr	r3, [pc, #200]	; (80038a0 <HW_TS_Stop+0xf0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2253      	movs	r2, #83	; 0x53
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80037de:	79fa      	ldrb	r2, [r7, #7]
 80037e0:	4930      	ldr	r1, [pc, #192]	; (80038a4 <HW_TS_Stop+0xf4>)
 80037e2:	4613      	mov	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	440b      	add	r3, r1
 80037ec:	330c      	adds	r3, #12
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d142      	bne.n	800387c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fc06 	bl	800300c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003800:	4b29      	ldr	r3, [pc, #164]	; (80038a8 <HW_TS_Stop+0xf8>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003806:	7cfb      	ldrb	r3, [r7, #19]
 8003808:	2b06      	cmp	r3, #6
 800380a:	d12f      	bne.n	800386c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800380c:	4b27      	ldr	r3, [pc, #156]	; (80038ac <HW_TS_Stop+0xfc>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003818:	d107      	bne.n	800382a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800381a:	bf00      	nop
 800381c:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <HW_TS_Stop+0xf0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f8      	bne.n	800381c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <HW_TS_Stop+0xf0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HW_TS_Stop+0xf0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003838:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800383a:	bf00      	nop
 800383c:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <HW_TS_Stop+0xf0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f8      	beq.n	800383c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <HW_TS_Stop+0xf0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <HW_TS_Stop+0xf0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800385a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800385c:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <HW_TS_Stop+0x100>)
 800385e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003862:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003864:	2003      	movs	r0, #3
 8003866:	f001 f824 	bl	80048b2 <HAL_NVIC_ClearPendingIRQ>
 800386a:	e007      	b.n	800387c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <HW_TS_Stop+0x104>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	7cfa      	ldrb	r2, [r7, #19]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003878:	f7ff fce4 	bl	8003244 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800387c:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <HW_TS_Stop+0xf0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	22ff      	movs	r2, #255	; 0xff
 8003882:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003884:	2003      	movs	r0, #3
 8003886:	f000 ffde 	bl	8004846 <HAL_NVIC_EnableIRQ>
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f383 8810 	msr	PRIMASK, r3
}
 8003894:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003896:	bf00      	nop
}
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20001064 	.word	0x20001064
 80038a4:	20000f34 	.word	0x20000f34
 80038a8:	20000fc4 	.word	0x20000fc4
 80038ac:	40002800 	.word	0x40002800
 80038b0:	58000800 	.word	0x58000800
 80038b4:	20000fc5 	.word	0x20000fc5

080038b8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	6039      	str	r1, [r7, #0]
 80038c2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80038c4:	79fa      	ldrb	r2, [r7, #7]
 80038c6:	493b      	ldr	r1, [pc, #236]	; (80039b4 <HW_TS_Start+0xfc>)
 80038c8:	4613      	mov	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	440b      	add	r3, r1
 80038d2:	330c      	adds	r3, #12
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d103      	bne.n	80038e4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff ff66 	bl	80037b0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e4:	f3ef 8310 	mrs	r3, PRIMASK
 80038e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80038ea:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80038ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80038ee:	b672      	cpsid	i
}
 80038f0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80038f2:	2003      	movs	r0, #3
 80038f4:	f000 ffb5 	bl	8004862 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80038f8:	4b2f      	ldr	r3, [pc, #188]	; (80039b8 <HW_TS_Start+0x100>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	22ca      	movs	r2, #202	; 0xca
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24
 8003900:	4b2d      	ldr	r3, [pc, #180]	; (80039b8 <HW_TS_Start+0x100>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2253      	movs	r2, #83	; 0x53
 8003906:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003908:	79fa      	ldrb	r2, [r7, #7]
 800390a:	492a      	ldr	r1, [pc, #168]	; (80039b4 <HW_TS_Start+0xfc>)
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	440b      	add	r3, r1
 8003916:	330c      	adds	r3, #12
 8003918:	2202      	movs	r2, #2
 800391a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800391c:	79fa      	ldrb	r2, [r7, #7]
 800391e:	4925      	ldr	r1, [pc, #148]	; (80039b4 <HW_TS_Start+0xfc>)
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	440b      	add	r3, r1
 800392a:	3308      	adds	r3, #8
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003930:	79fa      	ldrb	r2, [r7, #7]
 8003932:	4920      	ldr	r1, [pc, #128]	; (80039b4 <HW_TS_Start+0xfc>)
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	440b      	add	r3, r1
 800393e:	3304      	adds	r3, #4
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fab6 	bl	8002eb8 <linkTimer>
 800394c:	4603      	mov	r3, r0
 800394e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003950:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <HW_TS_Start+0x104>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003956:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <HW_TS_Start+0x108>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	7c7a      	ldrb	r2, [r7, #17]
 800395e:	429a      	cmp	r2, r3
 8003960:	d002      	beq.n	8003968 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8003962:	f7ff fc6f 	bl	8003244 <RescheduleTimerList>
 8003966:	e013      	b.n	8003990 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003968:	79fa      	ldrb	r2, [r7, #7]
 800396a:	4912      	ldr	r1, [pc, #72]	; (80039b4 <HW_TS_Start+0xfc>)
 800396c:	4613      	mov	r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4413      	add	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	440b      	add	r3, r1
 8003976:	3308      	adds	r3, #8
 8003978:	6819      	ldr	r1, [r3, #0]
 800397a:	8a7b      	ldrh	r3, [r7, #18]
 800397c:	79fa      	ldrb	r2, [r7, #7]
 800397e:	1ac9      	subs	r1, r1, r3
 8003980:	480c      	ldr	r0, [pc, #48]	; (80039b4 <HW_TS_Start+0xfc>)
 8003982:	4613      	mov	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4413      	add	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4403      	add	r3, r0
 800398c:	3308      	adds	r3, #8
 800398e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HW_TS_Start+0x100>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	22ff      	movs	r2, #255	; 0xff
 8003996:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003998:	2003      	movs	r0, #3
 800399a:	f000 ff54 	bl	8004846 <HAL_NVIC_EnableIRQ>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f383 8810 	msr	PRIMASK, r3
}
 80039a8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80039aa:	bf00      	nop
}
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000f34 	.word	0x20000f34
 80039b8:	20001064 	.word	0x20001064
 80039bc:	20000fc4 	.word	0x20000fc4
 80039c0:	20000fc5 	.word	0x20000fc5

080039c4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	460b      	mov	r3, r1
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4798      	blx	r3

  return;
 80039d6:	bf00      	nop
}
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <LL_AHB2_GRP1_EnableClock>:
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80039e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4013      	ands	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a02:	68fb      	ldr	r3, [r7, #12]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4013      	ands	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a34:	68fb      	ldr	r3, [r7, #12]
}
 8003a36:	bf00      	nop
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a48:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <MX_I2C1_Init+0x74>)
 8003a4a:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <MX_I2C1_Init+0x78>)
 8003a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <MX_I2C1_Init+0x74>)
 8003a50:	4a1b      	ldr	r2, [pc, #108]	; (8003ac0 <MX_I2C1_Init+0x7c>)
 8003a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a54:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <MX_I2C1_Init+0x74>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a5a:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <MX_I2C1_Init+0x74>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <MX_I2C1_Init+0x74>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a66:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <MX_I2C1_Init+0x74>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a6c:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <MX_I2C1_Init+0x74>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a72:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <MX_I2C1_Init+0x74>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <MX_I2C1_Init+0x74>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a7e:	480e      	ldr	r0, [pc, #56]	; (8003ab8 <MX_I2C1_Init+0x74>)
 8003a80:	f001 f904 	bl	8004c8c <HAL_I2C_Init>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003a8a:	f000 fa25 	bl	8003ed8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4809      	ldr	r0, [pc, #36]	; (8003ab8 <MX_I2C1_Init+0x74>)
 8003a92:	f001 ff9f 	bl	80059d4 <HAL_I2CEx_ConfigAnalogFilter>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003a9c:	f000 fa1c 	bl	8003ed8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4805      	ldr	r0, [pc, #20]	; (8003ab8 <MX_I2C1_Init+0x74>)
 8003aa4:	f001 ffe1 	bl	8005a6a <HAL_I2CEx_ConfigDigitalFilter>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003aae:	f000 fa13 	bl	8003ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000fd4 	.word	0x20000fd4
 8003abc:	40005400 	.word	0x40005400
 8003ac0:	10707dbc 	.word	0x10707dbc

08003ac4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b09c      	sub	sp, #112	; 0x70
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	60da      	str	r2, [r3, #12]
 8003ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003adc:	f107 030c 	add.w	r3, r7, #12
 8003ae0:	2250      	movs	r2, #80	; 0x50
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f00f fac1 	bl	801306c <memset>
  if(i2cHandle->Instance==I2C1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a17      	ldr	r2, [pc, #92]	; (8003b4c <HAL_I2C_MspInit+0x88>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d126      	bne.n	8003b42 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003af4:	2304      	movs	r3, #4
 8003af6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003af8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003afe:	f107 030c 	add.w	r3, r7, #12
 8003b02:	4618      	mov	r0, r3
 8003b04:	f005 f8fd 	bl	8008d02 <HAL_RCCEx_PeriphCLKConfig>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003b0e:	f000 f9e3 	bl	8003ed8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b12:	2002      	movs	r0, #2
 8003b14:	f7ff ff63 	bl	80039de <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8003b18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b1e:	2312      	movs	r3, #18
 8003b20:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b22:	2301      	movs	r3, #1
 8003b24:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b26:	2302      	movs	r3, #2
 8003b28:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b32:	4619      	mov	r1, r3
 8003b34:	4806      	ldr	r0, [pc, #24]	; (8003b50 <HAL_I2C_MspInit+0x8c>)
 8003b36:	f000 fecb 	bl	80048d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b3a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003b3e:	f7ff ff67 	bl	8003a10 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003b42:	bf00      	nop
 8003b44:	3770      	adds	r7, #112	; 0x70
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40005400 	.word	0x40005400
 8003b50:	48000400 	.word	0x48000400

08003b54 <LL_AHB3_GRP1_EnableClock>:
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4013      	ands	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b78:	68fb      	ldr	r3, [r7, #12]
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <MX_IPCC_Init+0x20>)
 8003b8e:	4a07      	ldr	r2, [pc, #28]	; (8003bac <MX_IPCC_Init+0x24>)
 8003b90:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8003b92:	4805      	ldr	r0, [pc, #20]	; (8003ba8 <MX_IPCC_Init+0x20>)
 8003b94:	f001 ffb6 	bl	8005b04 <HAL_IPCC_Init>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8003b9e:	f000 f99b 	bl	8003ed8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20001028 	.word	0x20001028
 8003bac:	58000c00 	.word	0x58000c00

08003bb0 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	; (8003bf4 <HAL_IPCC_MspInit+0x44>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d113      	bne.n	8003bea <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003bc2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003bc6:	f7ff ffc5 	bl	8003b54 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2100      	movs	r1, #0
 8003bce:	202c      	movs	r0, #44	; 0x2c
 8003bd0:	f000 fe1f 	bl	8004812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003bd4:	202c      	movs	r0, #44	; 0x2c
 8003bd6:	f000 fe36 	bl	8004846 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2100      	movs	r1, #0
 8003bde:	202d      	movs	r0, #45	; 0x2d
 8003be0:	f000 fe17 	bl	8004812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003be4:	202d      	movs	r0, #45	; 0x2d
 8003be6:	f000 fe2e 	bl	8004846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	58000c00 	.word	0x58000c00

08003bf8 <LL_RCC_HSI48_Enable>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <LL_RCC_HSI48_IsReady>:
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d101      	bne.n	8003c32 <LL_RCC_HSI48_IsReady+0x18>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <LL_RCC_HSI48_IsReady+0x1a>
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <LL_RCC_LSE_SetDriveCapability>:
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	f023 0218 	bic.w	r2, r3, #24
 8003c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <LL_APB1_GRP1_EnableClock>:
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	3220      	adds	r2, #32
 8003cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb0:	4a05      	ldr	r2, [pc, #20]	; (8003cc8 <LL_HSEM_1StepLock+0x2c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d001      	beq.n	8003cba <LL_HSEM_1StepLock+0x1e>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <LL_HSEM_1StepLock+0x20>
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	80000400 	.word	0x80000400

08003ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cd0:	f000 fbd2 	bl	8004478 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8003cd4:	f7fe fe12 	bl	80028fc <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cd8:	f000 f826 	bl	8003d28 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003cdc:	f000 f898 	bl	8003e10 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8003ce0:	f7ff ff52 	bl	8003b88 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8003ce4:	f000 f8b4 	bl	8003e50 <PeriphClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ce8:	f7fe ffc0 	bl	8002c6c <MX_GPIO_Init>
  MX_RTC_Init();
 8003cec:	f000 f92a 	bl	8003f44 <MX_RTC_Init>
  MX_TIM1_Init();
 8003cf0:	f000 fa8a 	bl	8004208 <MX_TIM1_Init>
  MX_I2C1_Init();
 8003cf4:	f7ff fea6 	bl	8003a44 <MX_I2C1_Init>
  MX_USB_Device_Init();
 8003cf8:	f00e f9d8 	bl	80120ac <MX_USB_Device_Init>
  MX_RF_Init();
 8003cfc:	f000 f8f1 	bl	8003ee2 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8003d00:	4808      	ldr	r0, [pc, #32]	; (8003d24 <main+0x58>)
 8003d02:	f005 fcdb 	bl	80096bc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003d06:	2100      	movs	r1, #0
 8003d08:	4806      	ldr	r0, [pc, #24]	; (8003d24 <main+0x58>)
 8003d0a:	f005 fd7f 	bl	800980c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003d0e:	2104      	movs	r1, #4
 8003d10:	4804      	ldr	r0, [pc, #16]	; (8003d24 <main+0x58>)
 8003d12:	f005 fd7b 	bl	800980c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8003d16:	f7fe fdff 	bl	8002918 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Button_Press_Detect();
 8003d1a:	f00d fc27 	bl	801156c <Button_Press_Detect>
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8003d1e:	f7fe ff4d 	bl	8002bbc <MX_APPE_Process>
  {
 8003d22:	e7fa      	b.n	8003d1a <main+0x4e>
 8003d24:	20001088 	.word	0x20001088

08003d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b09a      	sub	sp, #104	; 0x68
 8003d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d2e:	f107 0320 	add.w	r3, r7, #32
 8003d32:	2248      	movs	r2, #72	; 0x48
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f00f f998 	bl	801306c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d3c:	1d3b      	adds	r3, r7, #4
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	60da      	str	r2, [r3, #12]
 8003d48:	611a      	str	r2, [r3, #16]
 8003d4a:	615a      	str	r2, [r3, #20]
 8003d4c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003d4e:	f003 fc93 	bl	8007678 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8003d52:	2010      	movs	r0, #16
 8003d54:	f7ff ff73 	bl	8003c3e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d58:	4b2c      	ldr	r3, [pc, #176]	; (8003e0c <SystemClock_Config+0xe4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d60:	4a2a      	ldr	r2, [pc, #168]	; (8003e0c <SystemClock_Config+0xe4>)
 8003d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b28      	ldr	r3, [pc, #160]	; (8003e0c <SystemClock_Config+0xe4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003d74:	2327      	movs	r3, #39	; 0x27
 8003d76:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d8c:	2340      	movs	r3, #64	; 0x40
 8003d8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003d90:	2300      	movs	r3, #0
 8003d92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003d94:	2360      	movs	r3, #96	; 0x60
 8003d96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003da0:	2300      	movs	r3, #0
 8003da2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8003da4:	2320      	movs	r3, #32
 8003da6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003dae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003db2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003db4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003db8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dba:	f107 0320 	add.w	r3, r7, #32
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f003 ffe6 	bl	8007d90 <HAL_RCC_OscConfig>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003dca:	f000 f885 	bl	8003ed8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003dce:	236f      	movs	r3, #111	; 0x6f
 8003dd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8003de2:	2380      	movs	r3, #128	; 0x80
 8003de4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003dea:	1d3b      	adds	r3, r7, #4
 8003dec:	2103      	movs	r1, #3
 8003dee:	4618      	mov	r0, r3
 8003df0:	f004 fb42 	bl	8008478 <HAL_RCC_ClockConfig>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003dfa:	f000 f86d 	bl	8003ed8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003dfe:	f005 f8f6 	bl	8008fee <HAL_RCCEx_EnableMSIPLLMode>
}
 8003e02:	bf00      	nop
 8003e04:	3768      	adds	r7, #104	; 0x68
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	58000400 	.word	0x58000400

08003e10 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b094      	sub	sp, #80	; 0x50
 8003e14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e16:	463b      	mov	r3, r7
 8003e18:	2250      	movs	r2, #80	; 0x50
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f00f f925 	bl	801306c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8003e22:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003e26:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003e28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e2c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003e32:	2310      	movs	r3, #16
 8003e34:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e36:	463b      	mov	r3, r7
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f004 ff62 	bl	8008d02 <HAL_RCCEx_PeriphCLKConfig>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8003e44:	f000 f848 	bl	8003ed8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003e48:	bf00      	nop
 8003e4a:	3750      	adds	r7, #80	; 0x50
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <PeriphClock_Config>:

/* USER CODE BEGIN 4 */

void PeriphClock_Config(void){
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b09a      	sub	sp, #104	; 0x68
 8003e54:	af00      	add	r7, sp, #0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003e56:	f107 0318 	add.w	r3, r7, #24
 8003e5a:	2250      	movs	r2, #80	; 0x50
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f00f f904 	bl	801306c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = { 0 };
 8003e64:	463b      	mov	r3, r7
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	60da      	str	r2, [r3, #12]
 8003e70:	611a      	str	r2, [r3, #16]
 8003e72:	615a      	str	r2, [r3, #20]
  /**
    * This prevents the CPU2 to disable the HSI48 oscillator when
    * it does not use anymore the RNG IP
    */

  LL_HSEM_1StepLock( HSEM, 5 );
 8003e74:	2105      	movs	r1, #5
 8003e76:	4817      	ldr	r0, [pc, #92]	; (8003ed4 <PeriphClock_Config+0x84>)
 8003e78:	f7ff ff10 	bl	8003c9c <LL_HSEM_1StepLock>

  LL_RCC_HSI48_Enable();
 8003e7c:	f7ff febc 	bl	8003bf8 <LL_RCC_HSI48_Enable>

  while(!LL_RCC_HSI48_IsReady());
 8003e80:	bf00      	nop
 8003e82:	f7ff feca 	bl	8003c1a <LL_RCC_HSI48_IsReady>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0fa      	beq.n	8003e82 <PeriphClock_Config+0x32>

  /* Select HSI48 as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e90:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003e92:	2300      	movs	r3, #0
 8003e94:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003e96:	f107 0318 	add.w	r3, r7, #24
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f004 ff31 	bl	8008d02 <HAL_RCCEx_PeriphCLKConfig>
  /**
    * Configure the clock recovery system (CRS)
    */

  /* Enable CRS Clock */
  __HAL_RCC_CRS_CLK_ENABLE();
 8003ea0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8003ea4:	f7ff fee1 	bl	8003c6a <LL_APB1_GRP1_EnableClock>

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	603b      	str	r3, [r7, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8003eac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003eb0:	607b      	str	r3, [r7, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue = RCC_CRS_RELOADVALUE_DEFAULT;
 8003eb2:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8003eb6:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 8003eb8:	2322      	movs	r3, #34	; 0x22
 8003eba:	613b      	str	r3, [r7, #16]

  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60bb      	str	r3, [r7, #8]

  /* Set the TRIM[5:0] to the default value*/
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 8003ec0:	2320      	movs	r3, #32
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f005 f898 	bl	8008ffc <HAL_RCCEx_CRSConfig>

  return;
 8003ecc:	bf00      	nop
}
 8003ece:	3768      	adds	r7, #104	; 0x68
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	58001400 	.word	0x58001400

08003ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003edc:	b672      	cpsid	i
}
 8003ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ee0:	e7fe      	b.n	8003ee0 <Error_Handler+0x8>

08003ee2 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003ee6:	bf00      	nop
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <LL_APB1_GRP1_EnableClock>:
{
 8003f12:	b480      	push	{r7}
 8003f14:	b085      	sub	sp, #20
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4013      	ands	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f36:	68fb      	ldr	r3, [r7, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <MX_RTC_Init+0x60>)
 8003f4a:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <MX_RTC_Init+0x64>)
 8003f4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <MX_RTC_Init+0x60>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003f54:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <MX_RTC_Init+0x60>)
 8003f56:	220f      	movs	r2, #15
 8003f58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003f5a:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <MX_RTC_Init+0x60>)
 8003f5c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003f60:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <MX_RTC_Init+0x60>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f68:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <MX_RTC_Init+0x60>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <MX_RTC_Init+0x60>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <MX_RTC_Init+0x60>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003f7a:	480a      	ldr	r0, [pc, #40]	; (8003fa4 <MX_RTC_Init+0x60>)
 8003f7c:	f005 f98a 	bl	8009294 <HAL_RTC_Init>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003f86:	f7ff ffa7 	bl	8003ed8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4805      	ldr	r0, [pc, #20]	; (8003fa4 <MX_RTC_Init+0x60>)
 8003f90:	f005 fa80 	bl	8009494 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003f9a:	f7ff ff9d 	bl	8003ed8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20001064 	.word	0x20001064
 8003fa8:	40002800 	.word	0x40002800

08003fac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b096      	sub	sp, #88	; 0x58
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fb4:	f107 0308 	add.w	r3, r7, #8
 8003fb8:	2250      	movs	r2, #80	; 0x50
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f00f f855 	bl	801306c <memset>
  if(rtcHandle->Instance==RTC)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a12      	ldr	r2, [pc, #72]	; (8004010 <HAL_RTC_MspInit+0x64>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d11d      	bne.n	8004008 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003fcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fd0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fd6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fd8:	f107 0308 	add.w	r3, r7, #8
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f004 fe90 	bl	8008d02 <HAL_RCCEx_PeriphCLKConfig>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003fe8:	f7ff ff76 	bl	8003ed8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003fec:	f7ff ff80 	bl	8003ef0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003ff0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003ff4:	f7ff ff8d 	bl	8003f12 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	2003      	movs	r0, #3
 8003ffe:	f000 fc08 	bl	8004812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004002:	2003      	movs	r0, #3
 8004004:	f000 fc1f 	bl	8004846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004008:	bf00      	nop
 800400a:	3758      	adds	r7, #88	; 0x58
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40002800 	.word	0x40002800

08004014 <LL_AHB3_GRP1_EnableClock>:
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800401c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4313      	orrs	r3, r2
 800402a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800402c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004030:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4013      	ands	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004038:	68fb      	ldr	r3, [r7, #12]
}
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800404a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800404e:	f7ff ffe1 	bl	8004014 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8004052:	2200      	movs	r2, #0
 8004054:	2100      	movs	r1, #0
 8004056:	202e      	movs	r0, #46	; 0x2e
 8004058:	f000 fbdb 	bl	8004812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800405c:	202e      	movs	r0, #46	; 0x2e
 800405e:	f000 fbf2 	bl	8004846 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}

08004066 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004066:	b480      	push	{r7}
 8004068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800406a:	e7fe      	b.n	800406a <NMI_Handler+0x4>

0800406c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004070:	e7fe      	b.n	8004070 <HardFault_Handler+0x4>

08004072 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004076:	e7fe      	b.n	8004076 <MemManage_Handler+0x4>

08004078 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800407c:	e7fe      	b.n	800407c <BusFault_Handler+0x4>

0800407e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800407e:	b480      	push	{r7}
 8004080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004082:	e7fe      	b.n	8004082 <UsageFault_Handler+0x4>

08004084 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040b2:	f000 fa3b 	bl	800452c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}

080040ba <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80040be:	f7ff f95b 	bl	8003378 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80040cc:	4802      	ldr	r0, [pc, #8]	; (80040d8 <USB_LP_IRQHandler+0x10>)
 80040ce:	f001 fe8f 	bl	8005df0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20002cf4 	.word	0x20002cf4

080040dc <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80040e0:	f00d fea6 	bl	8011e30 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80040e4:	bf00      	nop
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80040ec:	f00d fed6 	bl	8011e9c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80040f0:	bf00      	nop
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80040f8:	f000 fda4 	bl	8004c44 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80040fc:	bf00      	nop
 80040fe:	bd80      	pop	{r7, pc}

08004100 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004104:	4b24      	ldr	r3, [pc, #144]	; (8004198 <SystemInit+0x98>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	4a23      	ldr	r2, [pc, #140]	; (8004198 <SystemInit+0x98>)
 800410c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004128:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800412c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800412e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004138:	4b18      	ldr	r3, [pc, #96]	; (800419c <SystemInit+0x9c>)
 800413a:	4013      	ands	r3, r2
 800413c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800413e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004146:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800414a:	f023 0305 	bic.w	r3, r3, #5
 800414e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800415a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416a:	4a0d      	ldr	r2, [pc, #52]	; (80041a0 <SystemInit+0xa0>)
 800416c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800416e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004172:	4a0b      	ldr	r2, [pc, #44]	; (80041a0 <SystemInit+0xa0>)
 8004174:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004184:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418a:	2200      	movs	r2, #0
 800418c:	619a      	str	r2, [r3, #24]
}
 800418e:	bf00      	nop
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	e000ed00 	.word	0xe000ed00
 800419c:	faf6fefb 	.word	0xfaf6fefb
 80041a0:	22041000 	.word	0x22041000

080041a4 <LL_AHB2_GRP1_EnableClock>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80041ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80041bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4013      	ands	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041c8:	68fb      	ldr	r3, [r7, #12]
}
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80041de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80041ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4013      	ands	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041fa:	68fb      	ldr	r3, [r7, #12]
}
 80041fc:	bf00      	nop
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b09c      	sub	sp, #112	; 0x70
 800420c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800420e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800421c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004228:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	605a      	str	r2, [r3, #4]
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	611a      	str	r2, [r3, #16]
 8004238:	615a      	str	r2, [r3, #20]
 800423a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800423c:	1d3b      	adds	r3, r7, #4
 800423e:	2234      	movs	r2, #52	; 0x34
 8004240:	2100      	movs	r1, #0
 8004242:	4618      	mov	r0, r3
 8004244:	f00e ff12 	bl	801306c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004248:	4b4c      	ldr	r3, [pc, #304]	; (800437c <MX_TIM1_Init+0x174>)
 800424a:	4a4d      	ldr	r2, [pc, #308]	; (8004380 <MX_TIM1_Init+0x178>)
 800424c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800424e:	4b4b      	ldr	r3, [pc, #300]	; (800437c <MX_TIM1_Init+0x174>)
 8004250:	223f      	movs	r2, #63	; 0x3f
 8004252:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004254:	4b49      	ldr	r3, [pc, #292]	; (800437c <MX_TIM1_Init+0x174>)
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800425a:	4b48      	ldr	r3, [pc, #288]	; (800437c <MX_TIM1_Init+0x174>)
 800425c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004260:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004262:	4b46      	ldr	r3, [pc, #280]	; (800437c <MX_TIM1_Init+0x174>)
 8004264:	2200      	movs	r2, #0
 8004266:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004268:	4b44      	ldr	r3, [pc, #272]	; (800437c <MX_TIM1_Init+0x174>)
 800426a:	2200      	movs	r2, #0
 800426c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800426e:	4b43      	ldr	r3, [pc, #268]	; (800437c <MX_TIM1_Init+0x174>)
 8004270:	2200      	movs	r2, #0
 8004272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004274:	4841      	ldr	r0, [pc, #260]	; (800437c <MX_TIM1_Init+0x174>)
 8004276:	f005 f9c9 	bl	800960c <HAL_TIM_Base_Init>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004280:	f7ff fe2a 	bl	8003ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004288:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800428a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800428e:	4619      	mov	r1, r3
 8004290:	483a      	ldr	r0, [pc, #232]	; (800437c <MX_TIM1_Init+0x174>)
 8004292:	f005 fca9 	bl	8009be8 <HAL_TIM_ConfigClockSource>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800429c:	f7ff fe1c 	bl	8003ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80042a0:	4836      	ldr	r0, [pc, #216]	; (800437c <MX_TIM1_Init+0x174>)
 80042a2:	f005 fa51 	bl	8009748 <HAL_TIM_PWM_Init>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80042ac:	f7ff fe14 	bl	8003ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b0:	2300      	movs	r3, #0
 80042b2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80042b4:	2300      	movs	r3, #0
 80042b6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042b8:	2300      	movs	r3, #0
 80042ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80042bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80042c0:	4619      	mov	r1, r3
 80042c2:	482e      	ldr	r0, [pc, #184]	; (800437c <MX_TIM1_Init+0x174>)
 80042c4:	f006 f90a 	bl	800a4dc <HAL_TIMEx_MasterConfigSynchronization>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80042ce:	f7ff fe03 	bl	8003ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042d2:	2360      	movs	r3, #96	; 0x60
 80042d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 900;
 80042d6:	f44f 7361 	mov.w	r3, #900	; 0x384
 80042da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042dc:	2300      	movs	r3, #0
 80042de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80042e0:	2300      	movs	r3, #0
 80042e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80042e8:	2300      	movs	r3, #0
 80042ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80042ec:	2300      	movs	r3, #0
 80042ee:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042f4:	2200      	movs	r2, #0
 80042f6:	4619      	mov	r1, r3
 80042f8:	4820      	ldr	r0, [pc, #128]	; (800437c <MX_TIM1_Init+0x174>)
 80042fa:	f005 fb61 	bl	80099c0 <HAL_TIM_PWM_ConfigChannel>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004304:	f7ff fde8 	bl	8003ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004308:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800430c:	2204      	movs	r2, #4
 800430e:	4619      	mov	r1, r3
 8004310:	481a      	ldr	r0, [pc, #104]	; (800437c <MX_TIM1_Init+0x174>)
 8004312:	f005 fb55 	bl	80099c0 <HAL_TIM_PWM_ConfigChannel>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800431c:	f7ff fddc 	bl	8003ed8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004320:	2300      	movs	r3, #0
 8004322:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004324:	2300      	movs	r3, #0
 8004326:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004338:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800433e:	2300      	movs	r3, #0
 8004340:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004342:	2300      	movs	r3, #0
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800434a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004350:	2300      	movs	r3, #0
 8004352:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004354:	2300      	movs	r3, #0
 8004356:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004358:	1d3b      	adds	r3, r7, #4
 800435a:	4619      	mov	r1, r3
 800435c:	4807      	ldr	r0, [pc, #28]	; (800437c <MX_TIM1_Init+0x174>)
 800435e:	f006 f91d 	bl	800a59c <HAL_TIMEx_ConfigBreakDeadTime>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8004368:	f7ff fdb6 	bl	8003ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800436c:	4803      	ldr	r0, [pc, #12]	; (800437c <MX_TIM1_Init+0x174>)
 800436e:	f000 f81d 	bl	80043ac <HAL_TIM_MspPostInit>

}
 8004372:	bf00      	nop
 8004374:	3770      	adds	r7, #112	; 0x70
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20001088 	.word	0x20001088
 8004380:	40012c00 	.word	0x40012c00

08004384 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a05      	ldr	r2, [pc, #20]	; (80043a8 <HAL_TIM_Base_MspInit+0x24>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d103      	bne.n	800439e <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004396:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800439a:	f7ff ff1c 	bl	80041d6 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40012c00 	.word	0x40012c00

080043ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b4:	f107 030c 	add.w	r3, r7, #12
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	609a      	str	r2, [r3, #8]
 80043c0:	60da      	str	r2, [r3, #12]
 80043c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a0d      	ldr	r2, [pc, #52]	; (8004400 <HAL_TIM_MspPostInit+0x54>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d114      	bne.n	80043f8 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ce:	2001      	movs	r0, #1
 80043d0:	f7ff fee8 	bl	80041a4 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80043d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043da:	2302      	movs	r3, #2
 80043dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e2:	2300      	movs	r3, #0
 80043e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80043e6:	2301      	movs	r3, #1
 80043e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ea:	f107 030c 	add.w	r3, r7, #12
 80043ee:	4619      	mov	r1, r3
 80043f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043f4:	f000 fa6c 	bl	80048d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043f8:	bf00      	nop
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40012c00 	.word	0x40012c00

08004404 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004404:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004406:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004408:	3304      	adds	r3, #4

0800440a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800440a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800440c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800440e:	d3f9      	bcc.n	8004404 <CopyDataInit>
  bx lr
 8004410:	4770      	bx	lr

08004412 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004412:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004414:	3004      	adds	r0, #4

08004416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004416:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004418:	d3fb      	bcc.n	8004412 <FillZerobss>
  bx lr
 800441a:	4770      	bx	lr

0800441c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800441c:	480c      	ldr	r0, [pc, #48]	; (8004450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800441e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004420:	f7ff fe6e 	bl	8004100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004424:	480b      	ldr	r0, [pc, #44]	; (8004454 <LoopForever+0x6>)
 8004426:	490c      	ldr	r1, [pc, #48]	; (8004458 <LoopForever+0xa>)
 8004428:	4a0c      	ldr	r2, [pc, #48]	; (800445c <LoopForever+0xe>)
 800442a:	2300      	movs	r3, #0
 800442c:	f7ff ffed 	bl	800440a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004430:	480b      	ldr	r0, [pc, #44]	; (8004460 <LoopForever+0x12>)
 8004432:	490c      	ldr	r1, [pc, #48]	; (8004464 <LoopForever+0x16>)
 8004434:	4a0c      	ldr	r2, [pc, #48]	; (8004468 <LoopForever+0x1a>)
 8004436:	2300      	movs	r3, #0
 8004438:	f7ff ffe7 	bl	800440a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800443c:	480b      	ldr	r0, [pc, #44]	; (800446c <LoopForever+0x1e>)
 800443e:	490c      	ldr	r1, [pc, #48]	; (8004470 <LoopForever+0x22>)
 8004440:	2300      	movs	r3, #0
 8004442:	f7ff ffe8 	bl	8004416 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004446:	f00e fe19 	bl	801307c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800444a:	f7ff fc3f 	bl	8003ccc <main>

0800444e <LoopForever>:

LoopForever:
  b LoopForever
 800444e:	e7fe      	b.n	800444e <LoopForever>
  ldr   r0, =_estack
 8004450:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004454:	20000008 	.word	0x20000008
 8004458:	20000180 	.word	0x20000180
 800445c:	080146c0 	.word	0x080146c0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004460:	200301e4 	.word	0x200301e4
 8004464:	20030a67 	.word	0x20030a67
 8004468:	0801487e 	.word	0x0801487e
  INIT_BSS _sbss, _ebss
 800446c:	200001cc 	.word	0x200001cc
 8004470:	20003298 	.word	0x20003298

08004474 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004474:	e7fe      	b.n	8004474 <ADC1_IRQHandler>
	...

08004478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004482:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <HAL_Init+0x3c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a0b      	ldr	r2, [pc, #44]	; (80044b4 <HAL_Init+0x3c>)
 8004488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800448e:	2003      	movs	r0, #3
 8004490:	f000 f9b4 	bl	80047fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004494:	200f      	movs	r0, #15
 8004496:	f000 f80f 	bl	80044b8 <HAL_InitTick>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	71fb      	strb	r3, [r7, #7]
 80044a4:	e001      	b.n	80044aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80044a6:	f7ff fdce 	bl	8004046 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80044aa:	79fb      	ldrb	r3, [r7, #7]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	58004000 	.word	0x58004000

080044b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80044c4:	4b17      	ldr	r3, [pc, #92]	; (8004524 <HAL_InitTick+0x6c>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d024      	beq.n	8004516 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80044cc:	f004 f980 	bl	80087d0 <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b14      	ldr	r3, [pc, #80]	; (8004524 <HAL_InitTick+0x6c>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	4619      	mov	r1, r3
 80044d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 f9ca 	bl	800487e <HAL_SYSTICK_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10f      	bne.n	8004510 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b0f      	cmp	r3, #15
 80044f4:	d809      	bhi.n	800450a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044f6:	2200      	movs	r2, #0
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	f04f 30ff 	mov.w	r0, #4294967295
 80044fe:	f000 f988 	bl	8004812 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004502:	4a09      	ldr	r2, [pc, #36]	; (8004528 <HAL_InitTick+0x70>)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	e007      	b.n	800451a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	73fb      	strb	r3, [r7, #15]
 800450e:	e004      	b.n	800451a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	73fb      	strb	r3, [r7, #15]
 8004514:	e001      	b.n	800451a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800451a:	7bfb      	ldrb	r3, [r7, #15]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000054 	.word	0x20000054
 8004528:	20000050 	.word	0x20000050

0800452c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_IncTick+0x20>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_IncTick+0x24>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4413      	add	r3, r2
 800453c:	4a04      	ldr	r2, [pc, #16]	; (8004550 <HAL_IncTick+0x24>)
 800453e:	6013      	str	r3, [r2, #0]
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	20000054 	.word	0x20000054
 8004550:	200010d4 	.word	0x200010d4

08004554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  return uwTick;
 8004558:	4b03      	ldr	r3, [pc, #12]	; (8004568 <HAL_GetTick+0x14>)
 800455a:	681b      	ldr	r3, [r3, #0]
}
 800455c:	4618      	mov	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	200010d4 	.word	0x200010d4

0800456c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <HAL_GetTickPrio+0x14>)
 8004572:	681b      	ldr	r3, [r3, #0]
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20000050 	.word	0x20000050

08004584 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004588:	4b03      	ldr	r3, [pc, #12]	; (8004598 <HAL_GetTickFreq+0x14>)
 800458a:	781b      	ldrb	r3, [r3, #0]
}
 800458c:	4618      	mov	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000054 	.word	0x20000054

0800459c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045ac:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <__NVIC_SetPriorityGrouping+0x44>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045b8:	4013      	ands	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ce:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <__NVIC_SetPriorityGrouping+0x44>)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	60d3      	str	r3, [r2, #12]
}
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <__NVIC_GetPriorityGrouping+0x18>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	0a1b      	lsrs	r3, r3, #8
 80045ee:	f003 0307 	and.w	r3, r3, #7
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800460a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460e:	2b00      	cmp	r3, #0
 8004610:	db0b      	blt.n	800462a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	f003 021f 	and.w	r2, r3, #31
 8004618:	4907      	ldr	r1, [pc, #28]	; (8004638 <__NVIC_EnableIRQ+0x38>)
 800461a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	2001      	movs	r0, #1
 8004622:	fa00 f202 	lsl.w	r2, r0, r2
 8004626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	e000e100 	.word	0xe000e100

0800463c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464a:	2b00      	cmp	r3, #0
 800464c:	db12      	blt.n	8004674 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	f003 021f 	and.w	r2, r3, #31
 8004654:	490a      	ldr	r1, [pc, #40]	; (8004680 <__NVIC_DisableIRQ+0x44>)
 8004656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	2001      	movs	r0, #1
 800465e:	fa00 f202 	lsl.w	r2, r0, r2
 8004662:	3320      	adds	r3, #32
 8004664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004668:	f3bf 8f4f 	dsb	sy
}
 800466c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800466e:	f3bf 8f6f 	isb	sy
}
 8004672:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	e000e100 	.word	0xe000e100

08004684 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	2b00      	cmp	r3, #0
 8004694:	db0c      	blt.n	80046b0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	f003 021f 	and.w	r2, r3, #31
 800469c:	4907      	ldr	r1, [pc, #28]	; (80046bc <__NVIC_SetPendingIRQ+0x38>)
 800469e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2001      	movs	r0, #1
 80046a6:	fa00 f202 	lsl.w	r2, r0, r2
 80046aa:	3340      	adds	r3, #64	; 0x40
 80046ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	e000e100 	.word	0xe000e100

080046c0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	db0c      	blt.n	80046ec <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	f003 021f 	and.w	r2, r3, #31
 80046d8:	4907      	ldr	r1, [pc, #28]	; (80046f8 <__NVIC_ClearPendingIRQ+0x38>)
 80046da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	2001      	movs	r0, #1
 80046e2:	fa00 f202 	lsl.w	r2, r0, r2
 80046e6:	3360      	adds	r3, #96	; 0x60
 80046e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	e000e100 	.word	0xe000e100

080046fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	6039      	str	r1, [r7, #0]
 8004706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470c:	2b00      	cmp	r3, #0
 800470e:	db0a      	blt.n	8004726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	b2da      	uxtb	r2, r3
 8004714:	490c      	ldr	r1, [pc, #48]	; (8004748 <__NVIC_SetPriority+0x4c>)
 8004716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471a:	0112      	lsls	r2, r2, #4
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	440b      	add	r3, r1
 8004720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004724:	e00a      	b.n	800473c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	4908      	ldr	r1, [pc, #32]	; (800474c <__NVIC_SetPriority+0x50>)
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	3b04      	subs	r3, #4
 8004734:	0112      	lsls	r2, r2, #4
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	440b      	add	r3, r1
 800473a:	761a      	strb	r2, [r3, #24]
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	e000e100 	.word	0xe000e100
 800474c:	e000ed00 	.word	0xe000ed00

08004750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004750:	b480      	push	{r7}
 8004752:	b089      	sub	sp, #36	; 0x24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f1c3 0307 	rsb	r3, r3, #7
 800476a:	2b04      	cmp	r3, #4
 800476c:	bf28      	it	cs
 800476e:	2304      	movcs	r3, #4
 8004770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	3304      	adds	r3, #4
 8004776:	2b06      	cmp	r3, #6
 8004778:	d902      	bls.n	8004780 <NVIC_EncodePriority+0x30>
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3b03      	subs	r3, #3
 800477e:	e000      	b.n	8004782 <NVIC_EncodePriority+0x32>
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004784:	f04f 32ff 	mov.w	r2, #4294967295
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43da      	mvns	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	401a      	ands	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004798:	f04f 31ff 	mov.w	r1, #4294967295
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	fa01 f303 	lsl.w	r3, r1, r3
 80047a2:	43d9      	mvns	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a8:	4313      	orrs	r3, r2
         );
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3724      	adds	r7, #36	; 0x24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047c8:	d301      	bcc.n	80047ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047ca:	2301      	movs	r3, #1
 80047cc:	e00f      	b.n	80047ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ce:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <SysTick_Config+0x40>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047d6:	210f      	movs	r1, #15
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	f7ff ff8e 	bl	80046fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <SysTick_Config+0x40>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047e6:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <SysTick_Config+0x40>)
 80047e8:	2207      	movs	r2, #7
 80047ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	e000e010 	.word	0xe000e010

080047fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff fec9 	bl	800459c <__NVIC_SetPriorityGrouping>
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	4603      	mov	r3, r0
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004820:	f7ff fee0 	bl	80045e4 <__NVIC_GetPriorityGrouping>
 8004824:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	6978      	ldr	r0, [r7, #20]
 800482c:	f7ff ff90 	bl	8004750 <NVIC_EncodePriority>
 8004830:	4602      	mov	r2, r0
 8004832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff ff5f 	bl	80046fc <__NVIC_SetPriority>
}
 800483e:	bf00      	nop
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	4603      	mov	r3, r0
 800484e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff fed3 	bl	8004600 <__NVIC_EnableIRQ>
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	4603      	mov	r3, r0
 800486a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800486c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fee3 	bl	800463c <__NVIC_DisableIRQ>
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ff96 	bl	80047b8 <SysTick_Config>
 800488c:	4603      	mov	r3, r0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	4603      	mov	r3, r0
 800489e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80048a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff feed 	bl	8004684 <__NVIC_SetPendingIRQ>
}
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	4603      	mov	r3, r0
 80048ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80048bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fefd 	bl	80046c0 <__NVIC_ClearPendingIRQ>
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048de:	e14c      	b.n	8004b7a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	2101      	movs	r1, #1
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ec:	4013      	ands	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 813e 	beq.w	8004b74 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d005      	beq.n	8004910 <HAL_GPIO_Init+0x40>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d130      	bne.n	8004972 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	2203      	movs	r2, #3
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	43db      	mvns	r3, r3
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4013      	ands	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004946:	2201      	movs	r2, #1
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43db      	mvns	r3, r3
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4013      	ands	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	f003 0201 	and.w	r2, r3, #1
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b03      	cmp	r3, #3
 800497c:	d017      	beq.n	80049ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	2203      	movs	r2, #3
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4013      	ands	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d123      	bne.n	8004a02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	08da      	lsrs	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3208      	adds	r2, #8
 80049c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	220f      	movs	r2, #15
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43db      	mvns	r3, r3
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4013      	ands	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	08da      	lsrs	r2, r3, #3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3208      	adds	r2, #8
 80049fc:	6939      	ldr	r1, [r7, #16]
 80049fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43db      	mvns	r3, r3
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4013      	ands	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 0203 	and.w	r2, r3, #3
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8098 	beq.w	8004b74 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004a44:	4a54      	ldr	r2, [pc, #336]	; (8004b98 <HAL_GPIO_Init+0x2c8>)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	089b      	lsrs	r3, r3, #2
 8004a4a:	3302      	adds	r3, #2
 8004a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	220f      	movs	r2, #15
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4013      	ands	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a6e:	d019      	beq.n	8004aa4 <HAL_GPIO_Init+0x1d4>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a4a      	ldr	r2, [pc, #296]	; (8004b9c <HAL_GPIO_Init+0x2cc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_GPIO_Init+0x1d0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a49      	ldr	r2, [pc, #292]	; (8004ba0 <HAL_GPIO_Init+0x2d0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00d      	beq.n	8004a9c <HAL_GPIO_Init+0x1cc>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a48      	ldr	r2, [pc, #288]	; (8004ba4 <HAL_GPIO_Init+0x2d4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d007      	beq.n	8004a98 <HAL_GPIO_Init+0x1c8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a47      	ldr	r2, [pc, #284]	; (8004ba8 <HAL_GPIO_Init+0x2d8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d101      	bne.n	8004a94 <HAL_GPIO_Init+0x1c4>
 8004a90:	2304      	movs	r3, #4
 8004a92:	e008      	b.n	8004aa6 <HAL_GPIO_Init+0x1d6>
 8004a94:	2307      	movs	r3, #7
 8004a96:	e006      	b.n	8004aa6 <HAL_GPIO_Init+0x1d6>
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e004      	b.n	8004aa6 <HAL_GPIO_Init+0x1d6>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e002      	b.n	8004aa6 <HAL_GPIO_Init+0x1d6>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <HAL_GPIO_Init+0x1d6>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	f002 0203 	and.w	r2, r2, #3
 8004aac:	0092      	lsls	r2, r2, #2
 8004aae:	4093      	lsls	r3, r2
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ab6:	4938      	ldr	r1, [pc, #224]	; (8004b98 <HAL_GPIO_Init+0x2c8>)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	089b      	lsrs	r3, r3, #2
 8004abc:	3302      	adds	r3, #2
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ac4:	4b39      	ldr	r3, [pc, #228]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	43db      	mvns	r3, r3
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ae8:	4a30      	ldr	r2, [pc, #192]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004aee:	4b2f      	ldr	r3, [pc, #188]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	43db      	mvns	r3, r3
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4013      	ands	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b12:	4a26      	ldr	r2, [pc, #152]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b18:	4b24      	ldr	r3, [pc, #144]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	43db      	mvns	r3, r3
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4013      	ands	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b3e:	4a1b      	ldr	r2, [pc, #108]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004b46:	4b19      	ldr	r3, [pc, #100]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	43db      	mvns	r3, r3
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4013      	ands	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b6c:	4a0f      	ldr	r2, [pc, #60]	; (8004bac <HAL_GPIO_Init+0x2dc>)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	3301      	adds	r3, #1
 8004b78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f47f aeab 	bne.w	80048e0 <HAL_GPIO_Init+0x10>
  }
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	48000400 	.word	0x48000400
 8004ba0:	48000800 	.word	0x48000800
 8004ba4:	48000c00 	.word	0x48000c00
 8004ba8:	48001000 	.word	0x48001000
 8004bac:	58000800 	.word	0x58000800

08004bb0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	887b      	ldrh	r3, [r7, #2]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
 8004bcc:	e001      	b.n	8004bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	807b      	strh	r3, [r7, #2]
 8004bec:	4613      	mov	r3, r2
 8004bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bf0:	787b      	ldrb	r3, [r7, #1]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bf6:	887a      	ldrh	r2, [r7, #2]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bfc:	e002      	b.n	8004c04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bfe:	887a      	ldrh	r2, [r7, #2]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c22:	887a      	ldrh	r2, [r7, #2]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4013      	ands	r3, r2
 8004c28:	041a      	lsls	r2, r3, #16
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	43d9      	mvns	r1, r3
 8004c2e:	887b      	ldrh	r3, [r7, #2]
 8004c30:	400b      	ands	r3, r1
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	619a      	str	r2, [r3, #24]
}
 8004c38:	bf00      	nop
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <HAL_HSEM_IRQHandler+0x30>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004c50:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <HAL_HSEM_IRQHandler+0x30>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	4906      	ldr	r1, [pc, #24]	; (8004c74 <HAL_HSEM_IRQHandler+0x30>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004c5e:	4a05      	ldr	r2, [pc, #20]	; (8004c74 <HAL_HSEM_IRQHandler+0x30>)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f807 	bl	8004c78 <HAL_HSEM_FreeCallback>
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	58001500 	.word	0x58001500

08004c78 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e08d      	b.n	8004dba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fe ff06 	bl	8003ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2224      	movs	r2, #36	; 0x24
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0201 	bic.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d107      	bne.n	8004d06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d02:	609a      	str	r2, [r3, #8]
 8004d04:	e006      	b.n	8004d14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d108      	bne.n	8004d2e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d2a:	605a      	str	r2, [r3, #4]
 8004d2c:	e007      	b.n	8004d3e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69d9      	ldr	r1, [r3, #28]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a1a      	ldr	r2, [r3, #32]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	817b      	strh	r3, [r7, #10]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	f040 80fd 	bne.w	8004fe0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_I2C_Master_Transmit+0x30>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e0f6      	b.n	8004fe2 <HAL_I2C_Master_Transmit+0x21e>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dfc:	f7ff fbaa 	bl	8004554 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	2319      	movs	r3, #25
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 fbea 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e0e1      	b.n	8004fe2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2221      	movs	r2, #33	; 0x21
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2210      	movs	r2, #16
 8004e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	893a      	ldrh	r2, [r7, #8]
 8004e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2bff      	cmp	r3, #255	; 0xff
 8004e4e:	d906      	bls.n	8004e5e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	22ff      	movs	r2, #255	; 0xff
 8004e54:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004e56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e007      	b.n	8004e6e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004e68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e6c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d024      	beq.n	8004ec0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	781a      	ldrb	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	3301      	adds	r3, #1
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	8979      	ldrh	r1, [r7, #10]
 8004eb2:	4b4e      	ldr	r3, [pc, #312]	; (8004fec <HAL_I2C_Master_Transmit+0x228>)
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fd59 	bl	8005970 <I2C_TransferConfig>
 8004ebe:	e066      	b.n	8004f8e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	8979      	ldrh	r1, [r7, #10]
 8004ec8:	4b48      	ldr	r3, [pc, #288]	; (8004fec <HAL_I2C_Master_Transmit+0x228>)
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fd4e 	bl	8005970 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004ed4:	e05b      	b.n	8004f8e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	6a39      	ldr	r1, [r7, #32]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fbdd 	bl	800569a <I2C_WaitOnTXISFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e07b      	b.n	8004fe2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	781a      	ldrb	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d034      	beq.n	8004f8e <HAL_I2C_Master_Transmit+0x1ca>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d130      	bne.n	8004f8e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	2200      	movs	r2, #0
 8004f34:	2180      	movs	r1, #128	; 0x80
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fb56 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e04d      	b.n	8004fe2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2bff      	cmp	r3, #255	; 0xff
 8004f4e:	d90e      	bls.n	8004f6e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	22ff      	movs	r2, #255	; 0xff
 8004f54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	8979      	ldrh	r1, [r7, #10]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fd02 	bl	8005970 <I2C_TransferConfig>
 8004f6c:	e00f      	b.n	8004f8e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	8979      	ldrh	r1, [r7, #10]
 8004f80:	2300      	movs	r3, #0
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 fcf1 	bl	8005970 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d19e      	bne.n	8004ed6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	6a39      	ldr	r1, [r7, #32]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 fbc3 	bl	8005728 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e01a      	b.n	8004fe2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6859      	ldr	r1, [r3, #4]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <HAL_I2C_Master_Transmit+0x22c>)
 8004fc0:	400b      	ands	r3, r1
 8004fc2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e000      	b.n	8004fe2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
  }
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	80002000 	.word	0x80002000
 8004ff0:	fe00e800 	.word	0xfe00e800

08004ff4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	461a      	mov	r2, r3
 8005002:	4603      	mov	r3, r0
 8005004:	817b      	strh	r3, [r7, #10]
 8005006:	460b      	mov	r3, r1
 8005008:	813b      	strh	r3, [r7, #8]
 800500a:	4613      	mov	r3, r2
 800500c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b20      	cmp	r3, #32
 8005018:	f040 80f9 	bne.w	800520e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_I2C_Mem_Write+0x34>
 8005022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	d105      	bne.n	8005034 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800502e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0ed      	b.n	8005210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_I2C_Mem_Write+0x4e>
 800503e:	2302      	movs	r3, #2
 8005040:	e0e6      	b.n	8005210 <HAL_I2C_Mem_Write+0x21c>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800504a:	f7ff fa83 	bl	8004554 <HAL_GetTick>
 800504e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	2319      	movs	r3, #25
 8005056:	2201      	movs	r2, #1
 8005058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 fac3 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0d1      	b.n	8005210 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2221      	movs	r2, #33	; 0x21
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2240      	movs	r2, #64	; 0x40
 8005078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a3a      	ldr	r2, [r7, #32]
 8005086:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800508c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005094:	88f8      	ldrh	r0, [r7, #6]
 8005096:	893a      	ldrh	r2, [r7, #8]
 8005098:	8979      	ldrh	r1, [r7, #10]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	9301      	str	r3, [sp, #4]
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	4603      	mov	r3, r0
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f9d3 	bl	8005450 <I2C_RequestMemoryWrite>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0a9      	b.n	8005210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2bff      	cmp	r3, #255	; 0xff
 80050c4:	d90e      	bls.n	80050e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	22ff      	movs	r2, #255	; 0xff
 80050ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	8979      	ldrh	r1, [r7, #10]
 80050d4:	2300      	movs	r3, #0
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 fc47 	bl	8005970 <I2C_TransferConfig>
 80050e2:	e00f      	b.n	8005104 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	8979      	ldrh	r1, [r7, #10]
 80050f6:	2300      	movs	r3, #0
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 fc36 	bl	8005970 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 fac6 	bl	800569a <I2C_WaitOnTXISFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e07b      	b.n	8005210 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	781a      	ldrb	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d034      	beq.n	80051bc <HAL_I2C_Mem_Write+0x1c8>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005156:	2b00      	cmp	r3, #0
 8005158:	d130      	bne.n	80051bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	2200      	movs	r2, #0
 8005162:	2180      	movs	r1, #128	; 0x80
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 fa3f 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e04d      	b.n	8005210 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005178:	b29b      	uxth	r3, r3
 800517a:	2bff      	cmp	r3, #255	; 0xff
 800517c:	d90e      	bls.n	800519c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	22ff      	movs	r2, #255	; 0xff
 8005182:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005188:	b2da      	uxtb	r2, r3
 800518a:	8979      	ldrh	r1, [r7, #10]
 800518c:	2300      	movs	r3, #0
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 fbeb 	bl	8005970 <I2C_TransferConfig>
 800519a:	e00f      	b.n	80051bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	8979      	ldrh	r1, [r7, #10]
 80051ae:	2300      	movs	r3, #0
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 fbda 	bl	8005970 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d19e      	bne.n	8005104 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 faac 	bl	8005728 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e01a      	b.n	8005210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2220      	movs	r2, #32
 80051e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6859      	ldr	r1, [r3, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <HAL_I2C_Mem_Write+0x224>)
 80051ee:	400b      	ands	r3, r1
 80051f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	e000      	b.n	8005210 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800520e:	2302      	movs	r3, #2
  }
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	fe00e800 	.word	0xfe00e800

0800521c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	4608      	mov	r0, r1
 8005226:	4611      	mov	r1, r2
 8005228:	461a      	mov	r2, r3
 800522a:	4603      	mov	r3, r0
 800522c:	817b      	strh	r3, [r7, #10]
 800522e:	460b      	mov	r3, r1
 8005230:	813b      	strh	r3, [r7, #8]
 8005232:	4613      	mov	r3, r2
 8005234:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b20      	cmp	r3, #32
 8005240:	f040 80fd 	bne.w	800543e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_I2C_Mem_Read+0x34>
 800524a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800524c:	2b00      	cmp	r3, #0
 800524e:	d105      	bne.n	800525c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005256:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e0f1      	b.n	8005440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_I2C_Mem_Read+0x4e>
 8005266:	2302      	movs	r3, #2
 8005268:	e0ea      	b.n	8005440 <HAL_I2C_Mem_Read+0x224>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005272:	f7ff f96f 	bl	8004554 <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	2319      	movs	r3, #25
 800527e:	2201      	movs	r2, #1
 8005280:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f9af 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0d5      	b.n	8005440 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2222      	movs	r2, #34	; 0x22
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2240      	movs	r2, #64	; 0x40
 80052a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a3a      	ldr	r2, [r7, #32]
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052bc:	88f8      	ldrh	r0, [r7, #6]
 80052be:	893a      	ldrh	r2, [r7, #8]
 80052c0:	8979      	ldrh	r1, [r7, #10]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	9301      	str	r3, [sp, #4]
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	4603      	mov	r3, r0
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f913 	bl	80054f8 <I2C_RequestMemoryRead>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e0ad      	b.n	8005440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2bff      	cmp	r3, #255	; 0xff
 80052ec:	d90e      	bls.n	800530c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	22ff      	movs	r2, #255	; 0xff
 80052f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	8979      	ldrh	r1, [r7, #10]
 80052fc:	4b52      	ldr	r3, [pc, #328]	; (8005448 <HAL_I2C_Mem_Read+0x22c>)
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fb33 	bl	8005970 <I2C_TransferConfig>
 800530a:	e00f      	b.n	800532c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531a:	b2da      	uxtb	r2, r3
 800531c:	8979      	ldrh	r1, [r7, #10]
 800531e:	4b4a      	ldr	r3, [pc, #296]	; (8005448 <HAL_I2C_Mem_Read+0x22c>)
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 fb22 	bl	8005970 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	2200      	movs	r2, #0
 8005334:	2104      	movs	r1, #4
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 f956 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e07c      	b.n	8005440 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d034      	beq.n	80053ec <HAL_I2C_Mem_Read+0x1d0>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005386:	2b00      	cmp	r3, #0
 8005388:	d130      	bne.n	80053ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	2200      	movs	r2, #0
 8005392:	2180      	movs	r1, #128	; 0x80
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f927 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e04d      	b.n	8005440 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2bff      	cmp	r3, #255	; 0xff
 80053ac:	d90e      	bls.n	80053cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	22ff      	movs	r2, #255	; 0xff
 80053b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	8979      	ldrh	r1, [r7, #10]
 80053bc:	2300      	movs	r3, #0
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 fad3 	bl	8005970 <I2C_TransferConfig>
 80053ca:	e00f      	b.n	80053ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	8979      	ldrh	r1, [r7, #10]
 80053de:	2300      	movs	r3, #0
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 fac2 	bl	8005970 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d19a      	bne.n	800532c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f994 	bl	8005728 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e01a      	b.n	8005440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2220      	movs	r2, #32
 8005410:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6859      	ldr	r1, [r3, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <HAL_I2C_Mem_Read+0x230>)
 800541e:	400b      	ands	r3, r1
 8005420:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	e000      	b.n	8005440 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800543e:	2302      	movs	r3, #2
  }
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	80002400 	.word	0x80002400
 800544c:	fe00e800 	.word	0xfe00e800

08005450 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	4608      	mov	r0, r1
 800545a:	4611      	mov	r1, r2
 800545c:	461a      	mov	r2, r3
 800545e:	4603      	mov	r3, r0
 8005460:	817b      	strh	r3, [r7, #10]
 8005462:	460b      	mov	r3, r1
 8005464:	813b      	strh	r3, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800546a:	88fb      	ldrh	r3, [r7, #6]
 800546c:	b2da      	uxtb	r2, r3
 800546e:	8979      	ldrh	r1, [r7, #10]
 8005470:	4b20      	ldr	r3, [pc, #128]	; (80054f4 <I2C_RequestMemoryWrite+0xa4>)
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 fa79 	bl	8005970 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	69b9      	ldr	r1, [r7, #24]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 f909 	bl	800569a <I2C_WaitOnTXISFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e02c      	b.n	80054ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005492:	88fb      	ldrh	r3, [r7, #6]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d105      	bne.n	80054a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005498:	893b      	ldrh	r3, [r7, #8]
 800549a:	b2da      	uxtb	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	629a      	str	r2, [r3, #40]	; 0x28
 80054a2:	e015      	b.n	80054d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054a4:	893b      	ldrh	r3, [r7, #8]
 80054a6:	0a1b      	lsrs	r3, r3, #8
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	69b9      	ldr	r1, [r7, #24]
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f8ef 	bl	800569a <I2C_WaitOnTXISFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e012      	b.n	80054ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054c6:	893b      	ldrh	r3, [r7, #8]
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2200      	movs	r2, #0
 80054d8:	2180      	movs	r1, #128	; 0x80
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f884 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	80002000 	.word	0x80002000

080054f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	4608      	mov	r0, r1
 8005502:	4611      	mov	r1, r2
 8005504:	461a      	mov	r2, r3
 8005506:	4603      	mov	r3, r0
 8005508:	817b      	strh	r3, [r7, #10]
 800550a:	460b      	mov	r3, r1
 800550c:	813b      	strh	r3, [r7, #8]
 800550e:	4613      	mov	r3, r2
 8005510:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	b2da      	uxtb	r2, r3
 8005516:	8979      	ldrh	r1, [r7, #10]
 8005518:	4b20      	ldr	r3, [pc, #128]	; (800559c <I2C_RequestMemoryRead+0xa4>)
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	2300      	movs	r3, #0
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 fa26 	bl	8005970 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	69b9      	ldr	r1, [r7, #24]
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f8b6 	bl	800569a <I2C_WaitOnTXISFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e02c      	b.n	8005592 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005538:	88fb      	ldrh	r3, [r7, #6]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d105      	bne.n	800554a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800553e:	893b      	ldrh	r3, [r7, #8]
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	629a      	str	r2, [r3, #40]	; 0x28
 8005548:	e015      	b.n	8005576 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800554a:	893b      	ldrh	r3, [r7, #8]
 800554c:	0a1b      	lsrs	r3, r3, #8
 800554e:	b29b      	uxth	r3, r3
 8005550:	b2da      	uxtb	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005558:	69fa      	ldr	r2, [r7, #28]
 800555a:	69b9      	ldr	r1, [r7, #24]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f89c 	bl	800569a <I2C_WaitOnTXISFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e012      	b.n	8005592 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800556c:	893b      	ldrh	r3, [r7, #8]
 800556e:	b2da      	uxtb	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	2200      	movs	r2, #0
 800557e:	2140      	movs	r1, #64	; 0x40
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f831 	bl	80055e8 <I2C_WaitOnFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	80002000 	.word	0x80002000

080055a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d103      	bne.n	80055be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2200      	movs	r2, #0
 80055bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d007      	beq.n	80055dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	619a      	str	r2, [r3, #24]
  }
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	4613      	mov	r3, r2
 80055f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055f8:	e03b      	b.n	8005672 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 f8d6 	bl	80057b0 <I2C_IsErrorOccurred>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e041      	b.n	8005692 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d02d      	beq.n	8005672 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005616:	f7fe ff9d 	bl	8004554 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d302      	bcc.n	800562c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d122      	bne.n	8005672 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4013      	ands	r3, r2
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	429a      	cmp	r2, r3
 800563a:	bf0c      	ite	eq
 800563c:	2301      	moveq	r3, #1
 800563e:	2300      	movne	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	429a      	cmp	r2, r3
 8005648:	d113      	bne.n	8005672 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564e:	f043 0220 	orr.w	r2, r3, #32
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e00f      	b.n	8005692 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699a      	ldr	r2, [r3, #24]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4013      	ands	r3, r2
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	429a      	cmp	r2, r3
 8005680:	bf0c      	ite	eq
 8005682:	2301      	moveq	r3, #1
 8005684:	2300      	movne	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	461a      	mov	r2, r3
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	429a      	cmp	r2, r3
 800568e:	d0b4      	beq.n	80055fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056a6:	e033      	b.n	8005710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f87f 	bl	80057b0 <I2C_IsErrorOccurred>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e031      	b.n	8005720 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c2:	d025      	beq.n	8005710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c4:	f7fe ff46 	bl	8004554 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d302      	bcc.n	80056da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d11a      	bne.n	8005710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d013      	beq.n	8005710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	f043 0220 	orr.w	r2, r3, #32
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e007      	b.n	8005720 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b02      	cmp	r3, #2
 800571c:	d1c4      	bne.n	80056a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005734:	e02f      	b.n	8005796 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f838 	bl	80057b0 <I2C_IsErrorOccurred>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e02d      	b.n	80057a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574a:	f7fe ff03 	bl	8004554 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	429a      	cmp	r2, r3
 8005758:	d302      	bcc.n	8005760 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d11a      	bne.n	8005796 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b20      	cmp	r3, #32
 800576c:	d013      	beq.n	8005796 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e007      	b.n	80057a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d1c8      	bne.n	8005736 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08a      	sub	sp, #40	; 0x28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f003 0310 	and.w	r3, r3, #16
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d068      	beq.n	80058ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2210      	movs	r2, #16
 80057e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057e4:	e049      	b.n	800587a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d045      	beq.n	800587a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057ee:	f7fe feb1 	bl	8004554 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d302      	bcc.n	8005804 <I2C_IsErrorOccurred+0x54>
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d13a      	bne.n	800587a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800580e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005816:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005826:	d121      	bne.n	800586c <I2C_IsErrorOccurred+0xbc>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800582e:	d01d      	beq.n	800586c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005830:	7cfb      	ldrb	r3, [r7, #19]
 8005832:	2b20      	cmp	r3, #32
 8005834:	d01a      	beq.n	800586c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005844:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005846:	f7fe fe85 	bl	8004554 <HAL_GetTick>
 800584a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800584c:	e00e      	b.n	800586c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800584e:	f7fe fe81 	bl	8004554 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b19      	cmp	r3, #25
 800585a:	d907      	bls.n	800586c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	f043 0320 	orr.w	r3, r3, #32
 8005862:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800586a:	e006      	b.n	800587a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b20      	cmp	r3, #32
 8005878:	d1e9      	bne.n	800584e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b20      	cmp	r3, #32
 8005886:	d003      	beq.n	8005890 <I2C_IsErrorOccurred+0xe0>
 8005888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0aa      	beq.n	80057e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005894:	2b00      	cmp	r3, #0
 8005896:	d103      	bne.n	80058a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2220      	movs	r2, #32
 800589e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	f043 0304 	orr.w	r3, r3, #4
 80058a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00b      	beq.n	80058d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	f043 0308 	orr.w	r3, r3, #8
 80058e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00b      	beq.n	800591c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	f043 0302 	orr.w	r3, r3, #2
 800590a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005914:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800591c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01c      	beq.n	800595e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f7ff fe3b 	bl	80055a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6859      	ldr	r1, [r3, #4]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	4b0d      	ldr	r3, [pc, #52]	; (800596c <I2C_IsErrorOccurred+0x1bc>)
 8005936:	400b      	ands	r3, r1
 8005938:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	431a      	orrs	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800595e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005962:	4618      	mov	r0, r3
 8005964:	3728      	adds	r7, #40	; 0x28
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	fe00e800 	.word	0xfe00e800

08005970 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	607b      	str	r3, [r7, #4]
 800597a:	460b      	mov	r3, r1
 800597c:	817b      	strh	r3, [r7, #10]
 800597e:	4613      	mov	r3, r2
 8005980:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005982:	897b      	ldrh	r3, [r7, #10]
 8005984:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005988:	7a7b      	ldrb	r3, [r7, #9]
 800598a:	041b      	lsls	r3, r3, #16
 800598c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005990:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	4313      	orrs	r3, r2
 800599a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800599e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	0d5b      	lsrs	r3, r3, #21
 80059aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80059ae:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <I2C_TransferConfig+0x60>)
 80059b0:	430b      	orrs	r3, r1
 80059b2:	43db      	mvns	r3, r3
 80059b4:	ea02 0103 	and.w	r1, r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80059c2:	bf00      	nop
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	03ff63ff 	.word	0x03ff63ff

080059d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d138      	bne.n	8005a5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e032      	b.n	8005a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2224      	movs	r2, #36	; 0x24
 8005a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0201 	bic.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6819      	ldr	r1, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e000      	b.n	8005a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
  }
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d139      	bne.n	8005af4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e033      	b.n	8005af6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2224      	movs	r2, #36	; 0x24
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 0201 	bic.w	r2, r2, #1
 8005aac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005abc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	e000      	b.n	8005af6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005af4:	2302      	movs	r3, #2
  }
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d01e      	beq.n	8005b54 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005b16:	4b13      	ldr	r3, [pc, #76]	; (8005b64 <HAL_IPCC_Init+0x60>)
 8005b18:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d102      	bne.n	8005b2c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fe f842 	bl	8003bb0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005b2c:	68b8      	ldr	r0, [r7, #8]
 8005b2e:	f000 f85b 	bl	8005be8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f82c 	bl	8005b9c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005b52:	e001      	b.n	8005b58 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	58000c00 	.word	0x58000c00

08005b68 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	4613      	mov	r3, r2
 8005b74:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	e00f      	b.n	8005bca <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	4a0b      	ldr	r2, [pc, #44]	; (8005be0 <IPCC_SetDefaultCallbacks+0x44>)
 8005bb4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3306      	adds	r3, #6
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	4a08      	ldr	r2, [pc, #32]	; (8005be4 <IPCC_SetDefaultCallbacks+0x48>)
 8005bc2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b05      	cmp	r3, #5
 8005bce:	d9ec      	bls.n	8005baa <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	08005b69 	.word	0x08005b69
 8005be4:	08005b83 	.word	0x08005b83

08005be8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005bfc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	223f      	movs	r2, #63	; 0x3f
 8005c02:	609a      	str	r2, [r3, #8]
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e0c0      	b.n	8005da4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f00c fc70 	bl	801251c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2203      	movs	r2, #3
 8005c40:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f004 fd44 	bl	800a6d6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
 8005c52:	e03e      	b.n	8005cd2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c54:	7bfa      	ldrb	r2, [r7, #15]
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	440b      	add	r3, r1
 8005c62:	3311      	adds	r3, #17
 8005c64:	2201      	movs	r2, #1
 8005c66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c68:	7bfa      	ldrb	r2, [r7, #15]
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	440b      	add	r3, r1
 8005c76:	3310      	adds	r3, #16
 8005c78:	7bfa      	ldrb	r2, [r7, #15]
 8005c7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c7c:	7bfa      	ldrb	r2, [r7, #15]
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	440b      	add	r3, r1
 8005c8a:	3313      	adds	r3, #19
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c90:	7bfa      	ldrb	r2, [r7, #15]
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	440b      	add	r3, r1
 8005c9e:	3320      	adds	r3, #32
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ca4:	7bfa      	ldrb	r2, [r7, #15]
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	440b      	add	r3, r1
 8005cb2:	3324      	adds	r3, #36	; 0x24
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	440b      	add	r3, r1
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	73fb      	strb	r3, [r7, #15]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	791b      	ldrb	r3, [r3, #4]
 8005cd6:	7bfa      	ldrb	r2, [r7, #15]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d3bb      	bcc.n	8005c54 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	73fb      	strb	r3, [r7, #15]
 8005ce0:	e044      	b.n	8005d6c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ce2:	7bfa      	ldrb	r2, [r7, #15]
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	440b      	add	r3, r1
 8005cf0:	f203 1351 	addw	r3, r3, #337	; 0x151
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005cf8:	7bfa      	ldrb	r2, [r7, #15]
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	440b      	add	r3, r1
 8005d06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d0a:	7bfa      	ldrb	r2, [r7, #15]
 8005d0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d0e:	7bfa      	ldrb	r2, [r7, #15]
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	440b      	add	r3, r1
 8005d1c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d24:	7bfa      	ldrb	r2, [r7, #15]
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	440b      	add	r3, r1
 8005d32:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d3a:	7bfa      	ldrb	r2, [r7, #15]
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	440b      	add	r3, r1
 8005d48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d50:	7bfa      	ldrb	r2, [r7, #15]
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	440b      	add	r3, r1
 8005d5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	73fb      	strb	r3, [r7, #15]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	791b      	ldrb	r3, [r3, #4]
 8005d70:	7bfa      	ldrb	r2, [r7, #15]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d3b5      	bcc.n	8005ce2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005d82:	f004 fcc3 	bl	800a70c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	7a9b      	ldrb	r3, [r3, #10]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d102      	bne.n	8005da2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f001 fc41 	bl	8007624 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_PCD_Start+0x16>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e012      	b.n	8005de8 <HAL_PCD_Start+0x3c>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f004 fc6a 	bl	800a6a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f006 ff2a 	bl	800cc32 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f006 ff2f 	bl	800cc60 <USB_ReadInterrupts>
 8005e02:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fb04 	bl	800641c <PCD_EP_ISR_Handler>

    return;
 8005e14:	e110      	b.n	8006038 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d013      	beq.n	8005e48 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e32:	b292      	uxth	r2, r2
 8005e34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f00c fc22 	bl	8012682 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005e3e:	2100      	movs	r1, #0
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f8fc 	bl	800603e <HAL_PCD_SetAddress>

    return;
 8005e46:	e0f7      	b.n	8006038 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00c      	beq.n	8005e6c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e64:	b292      	uxth	r2, r2
 8005e66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005e6a:	e0e5      	b.n	8006038 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00c      	beq.n	8005e90 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e88:	b292      	uxth	r2, r2
 8005e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005e8e:	e0d3      	b.n	8006038 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d034      	beq.n	8005f04 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0204 	bic.w	r2, r2, #4
 8005eac:	b292      	uxth	r2, r2
 8005eae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0208 	bic.w	r2, r2, #8
 8005ec4:	b292      	uxth	r2, r2
 8005ec6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d107      	bne.n	8005ee4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005edc:	2100      	movs	r1, #0
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f00c fdc4 	bl	8012a6c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f00c fc05 	bl	80126f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005efc:	b292      	uxth	r2, r2
 8005efe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005f02:	e099      	b.n	8006038 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d027      	beq.n	8005f5e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0208 	orr.w	r2, r2, #8
 8005f20:	b292      	uxth	r2, r2
 8005f22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f38:	b292      	uxth	r2, r2
 8005f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0204 	orr.w	r2, r2, #4
 8005f50:	b292      	uxth	r2, r2
 8005f52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f00c fbb2 	bl	80126c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005f5c:	e06c      	b.n	8006038 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d040      	beq.n	8005fea <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f7a:	b292      	uxth	r2, r2
 8005f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d12b      	bne.n	8005fe2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f042 0204 	orr.w	r2, r2, #4
 8005f9c:	b292      	uxth	r2, r2
 8005f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0208 	orr.w	r2, r2, #8
 8005fb4:	b292      	uxth	r2, r2
 8005fb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	089b      	lsrs	r3, r3, #2
 8005fce:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005fd8:	2101      	movs	r1, #1
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f00c fd46 	bl	8012a6c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005fe0:	e02a      	b.n	8006038 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f00c fb6c 	bl	80126c0 <HAL_PCD_SuspendCallback>
    return;
 8005fe8:	e026      	b.n	8006038 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00f      	beq.n	8006014 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006006:	b292      	uxth	r2, r2
 8006008:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f00c fb2a 	bl	8012666 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006012:	e011      	b.n	8006038 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00c      	beq.n	8006038 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006026:	b29a      	uxth	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006030:	b292      	uxth	r2, r2
 8006032:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006036:	bf00      	nop
  }
}
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	460b      	mov	r3, r1
 8006048:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_PCD_SetAddress+0x1a>
 8006054:	2302      	movs	r3, #2
 8006056:	e012      	b.n	800607e <HAL_PCD_SetAddress+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	78fa      	ldrb	r2, [r7, #3]
 8006064:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	78fa      	ldrb	r2, [r7, #3]
 800606c:	4611      	mov	r1, r2
 800606e:	4618      	mov	r0, r3
 8006070:	f006 fdcb 	bl	800cc0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	4608      	mov	r0, r1
 8006090:	4611      	mov	r1, r2
 8006092:	461a      	mov	r2, r3
 8006094:	4603      	mov	r3, r0
 8006096:	70fb      	strb	r3, [r7, #3]
 8006098:	460b      	mov	r3, r1
 800609a:	803b      	strh	r3, [r7, #0]
 800609c:	4613      	mov	r3, r2
 800609e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	da0e      	bge.n	80060ca <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	f003 0207 	and.w	r2, r3, #7
 80060b2:	4613      	mov	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	3310      	adds	r3, #16
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	4413      	add	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2201      	movs	r2, #1
 80060c6:	705a      	strb	r2, [r3, #1]
 80060c8:	e00e      	b.n	80060e8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	f003 0207 	and.w	r2, r3, #7
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	4413      	add	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80060e8:	78fb      	ldrb	r3, [r7, #3]
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80060f4:	883a      	ldrh	r2, [r7, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	78ba      	ldrb	r2, [r7, #2]
 80060fe:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006100:	78bb      	ldrb	r3, [r7, #2]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d102      	bne.n	800610c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_PCD_EP_Open+0x94>
 8006116:	2302      	movs	r3, #2
 8006118:	e00e      	b.n	8006138 <HAL_PCD_EP_Open+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68f9      	ldr	r1, [r7, #12]
 8006128:	4618      	mov	r0, r3
 800612a:	f004 fb0d 	bl	800a748 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8006136:	7afb      	ldrb	r3, [r7, #11]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800614c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006150:	2b00      	cmp	r3, #0
 8006152:	da0e      	bge.n	8006172 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	f003 0207 	and.w	r2, r3, #7
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	3310      	adds	r3, #16
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	4413      	add	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2201      	movs	r2, #1
 800616e:	705a      	strb	r2, [r3, #1]
 8006170:	e00e      	b.n	8006190 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006172:	78fb      	ldrb	r3, [r7, #3]
 8006174:	f003 0207 	and.w	r2, r3, #7
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	4413      	add	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	b2da      	uxtb	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_PCD_EP_Close+0x6a>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e00e      	b.n	80061c8 <HAL_PCD_EP_Close+0x88>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68f9      	ldr	r1, [r7, #12]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f004 fe89 	bl	800aed0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	607a      	str	r2, [r7, #4]
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	460b      	mov	r3, r1
 80061de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061e0:	7afb      	ldrb	r3, [r7, #11]
 80061e2:	f003 0207 	and.w	r2, r3, #7
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	2200      	movs	r2, #0
 8006208:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2200      	movs	r2, #0
 800620e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006210:	7afb      	ldrb	r3, [r7, #11]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	b2da      	uxtb	r2, r3
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6979      	ldr	r1, [r7, #20]
 8006222:	4618      	mov	r0, r3
 8006224:	f005 f841 	bl	800b2aa <USB_EPStartXfer>

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	460b      	mov	r3, r1
 800623c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800623e:	78fb      	ldrb	r3, [r7, #3]
 8006240:	f003 0207 	and.w	r2, r3, #7
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	440b      	add	r3, r1
 8006250:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006254:	681b      	ldr	r3, [r3, #0]
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b086      	sub	sp, #24
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]
 800626e:	460b      	mov	r3, r1
 8006270:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006272:	7afb      	ldrb	r3, [r7, #11]
 8006274:	f003 0207 	and.w	r2, r3, #7
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	3310      	adds	r3, #16
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4413      	add	r3, r2
 8006286:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2200      	movs	r2, #0
 80062a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2201      	movs	r2, #1
 80062ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062ae:	7afb      	ldrb	r3, [r7, #11]
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6979      	ldr	r1, [r7, #20]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f004 fff2 	bl	800b2aa <USB_EPStartXfer>

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80062dc:	78fb      	ldrb	r3, [r7, #3]
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	7912      	ldrb	r2, [r2, #4]
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d901      	bls.n	80062ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e03e      	b.n	800636c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da0e      	bge.n	8006314 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	f003 0207 	and.w	r2, r3, #7
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	3310      	adds	r3, #16
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4413      	add	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2201      	movs	r2, #1
 8006310:	705a      	strb	r2, [r3, #1]
 8006312:	e00c      	b.n	800632e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006314:	78fa      	ldrb	r2, [r7, #3]
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	4413      	add	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	b2da      	uxtb	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_PCD_EP_SetStall+0x7e>
 800634a:	2302      	movs	r3, #2
 800634c:	e00e      	b.n	800636c <HAL_PCD_EP_SetStall+0x9c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68f9      	ldr	r1, [r7, #12]
 800635c:	4618      	mov	r0, r3
 800635e:	f006 fb55 	bl	800ca0c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	7912      	ldrb	r2, [r2, #4]
 800638a:	4293      	cmp	r3, r2
 800638c:	d901      	bls.n	8006392 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e040      	b.n	8006414 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006396:	2b00      	cmp	r3, #0
 8006398:	da0e      	bge.n	80063b8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	f003 0207 	and.w	r2, r3, #7
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	3310      	adds	r3, #16
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	4413      	add	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2201      	movs	r2, #1
 80063b4:	705a      	strb	r2, [r3, #1]
 80063b6:	e00e      	b.n	80063d6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	f003 0207 	and.w	r2, r3, #7
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	4413      	add	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_PCD_EP_ClrStall+0x82>
 80063f2:	2302      	movs	r3, #2
 80063f4:	e00e      	b.n	8006414 <HAL_PCD_EP_ClrStall+0xa0>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68f9      	ldr	r1, [r7, #12]
 8006404:	4618      	mov	r0, r3
 8006406:	f006 fb52 	bl	800caae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b096      	sub	sp, #88	; 0x58
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006424:	e3ae      	b.n	8006b84 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800642e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006432:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8006440:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006444:	2b00      	cmp	r3, #0
 8006446:	f040 8170 	bne.w	800672a <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800644a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b00      	cmp	r3, #0
 8006454:	d14d      	bne.n	80064f2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006466:	81fb      	strh	r3, [r7, #14]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	89fb      	ldrh	r3, [r7, #14]
 800646e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006476:	b29b      	uxth	r3, r3
 8006478:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3310      	adds	r3, #16
 800647e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006488:	b29b      	uxth	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	4413      	add	r3, r2
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	4413      	add	r3, r2
 800649a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80064a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80064a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064aa:	695a      	ldr	r2, [r3, #20]
 80064ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	441a      	add	r2, r3
 80064b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064b4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80064b6:	2100      	movs	r1, #0
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f00c f8ba 	bl	8012632 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	7b1b      	ldrb	r3, [r3, #12]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 835d 	beq.w	8006b84 <PCD_EP_ISR_Handler+0x768>
 80064ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f040 8358 	bne.w	8006b84 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	7b1b      	ldrb	r3, [r3, #12]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	b292      	uxth	r2, r2
 80064e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	731a      	strb	r2, [r3, #12]
 80064f0:	e348      	b.n	8006b84 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064f8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006504:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800650c:	2b00      	cmp	r3, #0
 800650e:	d032      	beq.n	8006576 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006518:	b29b      	uxth	r3, r3
 800651a:	461a      	mov	r2, r3
 800651c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	4413      	add	r3, r2
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	4413      	add	r3, r2
 800652a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006536:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8006542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006544:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006548:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800654a:	b29b      	uxth	r3, r3
 800654c:	f006 fbda 	bl	800cd04 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	b29a      	uxth	r2, r3
 8006558:	f640 738f 	movw	r3, #3983	; 0xf8f
 800655c:	4013      	ands	r3, r2
 800655e:	823b      	strh	r3, [r7, #16]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	8a3a      	ldrh	r2, [r7, #16]
 8006566:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800656a:	b292      	uxth	r2, r2
 800656c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f00c f832 	bl	80125d8 <HAL_PCD_SetupStageCallback>
 8006574:	e306      	b.n	8006b84 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006576:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800657a:	2b00      	cmp	r3, #0
 800657c:	f280 8302 	bge.w	8006b84 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29a      	uxth	r2, r3
 8006588:	f640 738f 	movw	r3, #3983	; 0xf8f
 800658c:	4013      	ands	r3, r2
 800658e:	83fb      	strh	r3, [r7, #30]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	8bfa      	ldrh	r2, [r7, #30]
 8006596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800659a:	b292      	uxth	r2, r2
 800659c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	461a      	mov	r2, r3
 80065aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	4413      	add	r3, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6812      	ldr	r2, [r2, #0]
 80065b6:	4413      	add	r3, r2
 80065b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80065c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80065c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d019      	beq.n	8006602 <PCD_EP_ISR_Handler+0x1e6>
 80065ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d015      	beq.n	8006602 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065dc:	6959      	ldr	r1, [r3, #20]
 80065de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80065e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	f006 fb8c 	bl	800cd04 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80065ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ee:	695a      	ldr	r2, [r3, #20]
 80065f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	441a      	add	r2, r3
 80065f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80065fa:	2100      	movs	r1, #0
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f00b fffd 	bl	80125fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800660c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006614:	2b00      	cmp	r3, #0
 8006616:	f040 82b5 	bne.w	8006b84 <PCD_EP_ISR_Handler+0x768>
 800661a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800661e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006622:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006626:	f000 82ad 	beq.w	8006b84 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	61bb      	str	r3, [r7, #24]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006638:	b29b      	uxth	r3, r3
 800663a:	461a      	mov	r2, r3
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	4413      	add	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29b      	uxth	r3, r3
 8006650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006654:	b29a      	uxth	r2, r3
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	801a      	strh	r2, [r3, #0]
 800665a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2b3e      	cmp	r3, #62	; 0x3e
 8006660:	d91d      	bls.n	800669e <PCD_EP_ISR_Handler+0x282>
 8006662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	647b      	str	r3, [r7, #68]	; 0x44
 800666a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	2b00      	cmp	r3, #0
 8006674:	d102      	bne.n	800667c <PCD_EP_ISR_Handler+0x260>
 8006676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006678:	3b01      	subs	r3, #1
 800667a:	647b      	str	r3, [r7, #68]	; 0x44
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	b29a      	uxth	r2, r3
 8006682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006684:	b29b      	uxth	r3, r3
 8006686:	029b      	lsls	r3, r3, #10
 8006688:	b29b      	uxth	r3, r3
 800668a:	4313      	orrs	r3, r2
 800668c:	b29b      	uxth	r3, r3
 800668e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006696:	b29a      	uxth	r2, r3
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	e026      	b.n	80066ec <PCD_EP_ISR_Handler+0x2d0>
 800669e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10a      	bne.n	80066bc <PCD_EP_ISR_Handler+0x2a0>
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	e017      	b.n	80066ec <PCD_EP_ISR_Handler+0x2d0>
 80066bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	085b      	lsrs	r3, r3, #1
 80066c2:	647b      	str	r3, [r7, #68]	; 0x44
 80066c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <PCD_EP_ISR_Handler+0x2ba>
 80066d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066d2:	3301      	adds	r3, #1
 80066d4:	647b      	str	r3, [r7, #68]	; 0x44
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29a      	uxth	r2, r3
 80066dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066de:	b29b      	uxth	r3, r3
 80066e0:	029b      	lsls	r3, r3, #10
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4313      	orrs	r3, r2
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fc:	827b      	strh	r3, [r7, #18]
 80066fe:	8a7b      	ldrh	r3, [r7, #18]
 8006700:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006704:	827b      	strh	r3, [r7, #18]
 8006706:	8a7b      	ldrh	r3, [r7, #18]
 8006708:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800670c:	827b      	strh	r3, [r7, #18]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	8a7b      	ldrh	r3, [r7, #18]
 8006714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800671c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006724:	b29b      	uxth	r3, r3
 8006726:	8013      	strh	r3, [r2, #0]
 8006728:	e22c      	b.n	8006b84 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800673e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006742:	2b00      	cmp	r3, #0
 8006744:	f280 80f6 	bge.w	8006934 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	461a      	mov	r2, r3
 800674e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29a      	uxth	r2, r3
 800675a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800675e:	4013      	ands	r3, r2
 8006760:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	461a      	mov	r2, r3
 800676a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006776:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800677a:	b292      	uxth	r2, r2
 800677c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800677e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	4413      	add	r3, r2
 8006792:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006796:	7b1b      	ldrb	r3, [r3, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d123      	bne.n	80067e4 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	4413      	add	r3, r2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6812      	ldr	r2, [r2, #0]
 80067b4:	4413      	add	r3, r2
 80067b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80067c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 808e 	beq.w	80068ea <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067d4:	6959      	ldr	r1, [r3, #20]
 80067d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067d8:	88da      	ldrh	r2, [r3, #6]
 80067da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80067de:	f006 fa91 	bl	800cd04 <USB_ReadPMA>
 80067e2:	e082      	b.n	80068ea <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80067e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067e6:	78db      	ldrb	r3, [r3, #3]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d10a      	bne.n	8006802 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80067ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80067f0:	461a      	mov	r2, r3
 80067f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f9d3 	bl	8006ba0 <HAL_PCD_EP_DB_Receive>
 80067fa:	4603      	mov	r3, r0
 80067fc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006800:	e073      	b.n	80068ea <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	461a      	mov	r2, r3
 8006826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	441a      	add	r2, r3
 800682e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800683e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006842:	b29b      	uxth	r3, r3
 8006844:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	b29b      	uxth	r3, r3
 8006858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d022      	beq.n	80068a6 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006868:	b29b      	uxth	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	4413      	add	r3, r2
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	4413      	add	r3, r2
 800687a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006884:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006888:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800688c:	2b00      	cmp	r3, #0
 800688e:	d02c      	beq.n	80068ea <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6818      	ldr	r0, [r3, #0]
 8006894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006896:	6959      	ldr	r1, [r3, #20]
 8006898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800689a:	891a      	ldrh	r2, [r3, #8]
 800689c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80068a0:	f006 fa30 	bl	800cd04 <USB_ReadPMA>
 80068a4:	e021      	b.n	80068ea <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	4413      	add	r3, r2
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6812      	ldr	r2, [r2, #0]
 80068be:	4413      	add	r3, r2
 80068c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80068ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068dc:	6959      	ldr	r1, [r3, #20]
 80068de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068e0:	895a      	ldrh	r2, [r3, #10]
 80068e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80068e6:	f006 fa0d 	bl	800cd04 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80068ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ec:	69da      	ldr	r2, [r3, #28]
 80068ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80068f2:	441a      	add	r2, r3
 80068f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80068f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068fa:	695a      	ldr	r2, [r3, #20]
 80068fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006900:	441a      	add	r2, r3
 8006902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006904:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d005      	beq.n	800691a <PCD_EP_ISR_Handler+0x4fe>
 800690e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	429a      	cmp	r2, r3
 8006918:	d206      	bcs.n	8006928 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800691a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f00b fe6b 	bl	80125fc <HAL_PCD_DataOutStageCallback>
 8006926:	e005      	b.n	8006934 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800692e:	4618      	mov	r0, r3
 8006930:	f004 fcbb 	bl	800b2aa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006934:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 8121 	beq.w	8006b84 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8006942:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	3310      	adds	r3, #16
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	4413      	add	r3, r2
 8006954:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800696c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006970:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	441a      	add	r2, r3
 8006982:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800698a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800698e:	b29b      	uxth	r3, r3
 8006990:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006994:	78db      	ldrb	r3, [r3, #3]
 8006996:	2b01      	cmp	r3, #1
 8006998:	f040 80a2 	bne.w	8006ae0 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800699c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800699e:	2200      	movs	r2, #0
 80069a0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80069a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069a4:	7b1b      	ldrb	r3, [r3, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 8093 	beq.w	8006ad2 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80069ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80069b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d046      	beq.n	8006a46 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80069b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ba:	785b      	ldrb	r3, [r3, #1]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d126      	bne.n	8006a0e <PCD_EP_ISR_Handler+0x5f2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	461a      	mov	r2, r3
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	4413      	add	r3, r2
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
 80069d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	00da      	lsls	r2, r3, #3
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	4413      	add	r3, r2
 80069e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069e6:	623b      	str	r3, [r7, #32]
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	801a      	strh	r2, [r3, #0]
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	801a      	strh	r2, [r3, #0]
 8006a0c:	e061      	b.n	8006ad2 <PCD_EP_ISR_Handler+0x6b6>
 8006a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a10:	785b      	ldrb	r3, [r3, #1]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d15d      	bne.n	8006ad2 <PCD_EP_ISR_Handler+0x6b6>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	461a      	mov	r2, r3
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2a:	4413      	add	r3, r2
 8006a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	00da      	lsls	r2, r3, #3
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a36:	4413      	add	r3, r2
 8006a38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	2200      	movs	r2, #0
 8006a42:	801a      	strh	r2, [r3, #0]
 8006a44:	e045      	b.n	8006ad2 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d126      	bne.n	8006aa2 <PCD_EP_ISR_Handler+0x686>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a68:	4413      	add	r3, r2
 8006a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	00da      	lsls	r2, r3, #3
 8006a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a74:	4413      	add	r3, r2
 8006a76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	801a      	strh	r2, [r3, #0]
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	e017      	b.n	8006ad2 <PCD_EP_ISR_Handler+0x6b6>
 8006aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aa4:	785b      	ldrb	r3, [r3, #1]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d113      	bne.n	8006ad2 <PCD_EP_ISR_Handler+0x6b6>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab8:	4413      	add	r3, r2
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	00da      	lsls	r2, r3, #3
 8006ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006aca:	63bb      	str	r3, [r7, #56]	; 0x38
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	2200      	movs	r2, #0
 8006ad0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f00b fdaa 	bl	8012632 <HAL_PCD_DataInStageCallback>
 8006ade:	e051      	b.n	8006b84 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006ae0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d144      	bne.n	8006b76 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	461a      	mov	r2, r3
 8006af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	4413      	add	r3, r2
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	4413      	add	r3, r2
 8006b06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b10:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b16:	699a      	ldr	r2, [r3, #24]
 8006b18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d907      	bls.n	8006b30 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8006b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b22:	699a      	ldr	r2, [r3, #24]
 8006b24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b28:	1ad2      	subs	r2, r2, r3
 8006b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b2c:	619a      	str	r2, [r3, #24]
 8006b2e:	e002      	b.n	8006b36 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8006b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b32:	2200      	movs	r2, #0
 8006b34:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f00b fd74 	bl	8012632 <HAL_PCD_DataInStageCallback>
 8006b4a:	e01b      	b.n	8006b84 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b4e:	695a      	ldr	r2, [r3, #20]
 8006b50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b54:	441a      	add	r2, r3
 8006b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b58:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b5c:	69da      	ldr	r2, [r3, #28]
 8006b5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b62:	441a      	add	r2, r3
 8006b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b66:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f004 fb9b 	bl	800b2aa <USB_EPStartXfer>
 8006b74:	e006      	b.n	8006b84 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006b76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f917 	bl	8006db2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	b21b      	sxth	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f6ff ac48 	blt.w	8006426 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3758      	adds	r7, #88	; 0x58
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	4613      	mov	r3, r2
 8006bac:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006bae:	88fb      	ldrh	r3, [r7, #6]
 8006bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d07c      	beq.n	8006cb2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	4413      	add	r3, r2
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	6812      	ldr	r2, [r2, #0]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bdc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	8b7b      	ldrh	r3, [r7, #26]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d306      	bcc.n	8006bf6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	699a      	ldr	r2, [r3, #24]
 8006bec:	8b7b      	ldrh	r3, [r7, #26]
 8006bee:	1ad2      	subs	r2, r2, r3
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	619a      	str	r2, [r3, #24]
 8006bf4:	e002      	b.n	8006bfc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d123      	bne.n	8006c4c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1e:	833b      	strh	r3, [r7, #24]
 8006c20:	8b3b      	ldrh	r3, [r7, #24]
 8006c22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c26:	833b      	strh	r3, [r7, #24]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	441a      	add	r2, r3
 8006c36:	8b3b      	ldrh	r3, [r7, #24]
 8006c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006c4c:	88fb      	ldrh	r3, [r7, #6]
 8006c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d01f      	beq.n	8006c96 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c70:	82fb      	strh	r3, [r7, #22]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	441a      	add	r2, r3
 8006c80:	8afb      	ldrh	r3, [r7, #22]
 8006c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006c96:	8b7b      	ldrh	r3, [r7, #26]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 8085 	beq.w	8006da8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	6959      	ldr	r1, [r3, #20]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	891a      	ldrh	r2, [r3, #8]
 8006caa:	8b7b      	ldrh	r3, [r7, #26]
 8006cac:	f006 f82a 	bl	800cd04 <USB_ReadPMA>
 8006cb0:	e07a      	b.n	8006da8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	4413      	add	r3, r2
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	6812      	ldr	r2, [r2, #0]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cd6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	699a      	ldr	r2, [r3, #24]
 8006cdc:	8b7b      	ldrh	r3, [r7, #26]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d306      	bcc.n	8006cf0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	8b7b      	ldrh	r3, [r7, #26]
 8006ce8:	1ad2      	subs	r2, r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	619a      	str	r2, [r3, #24]
 8006cee:	e002      	b.n	8006cf6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d123      	bne.n	8006d46 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d18:	83fb      	strh	r3, [r7, #30]
 8006d1a:	8bfb      	ldrh	r3, [r7, #30]
 8006d1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d20:	83fb      	strh	r3, [r7, #30]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	8bfb      	ldrh	r3, [r7, #30]
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d11f      	bne.n	8006d90 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6a:	83bb      	strh	r3, [r7, #28]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	441a      	add	r2, r3
 8006d7a:	8bbb      	ldrh	r3, [r7, #28]
 8006d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006d90:	8b7b      	ldrh	r3, [r7, #26]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d008      	beq.n	8006da8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6959      	ldr	r1, [r3, #20]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	895a      	ldrh	r2, [r3, #10]
 8006da2:	8b7b      	ldrh	r3, [r7, #26]
 8006da4:	f005 ffae 	bl	800cd04 <USB_ReadPMA>
    }
  }

  return count;
 8006da8:	8b7b      	ldrh	r3, [r7, #26]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b0a4      	sub	sp, #144	; 0x90
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 81db 	beq.w	8007182 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	4413      	add	r3, r2
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	6812      	ldr	r2, [r2, #0]
 8006de4:	4413      	add	r3, r2
 8006de6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006df0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	699a      	ldr	r2, [r3, #24]
 8006df8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d907      	bls.n	8006e10 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	699a      	ldr	r2, [r3, #24]
 8006e04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006e08:	1ad2      	subs	r2, r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	619a      	str	r2, [r3, #24]
 8006e0e:	e002      	b.n	8006e16 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2200      	movs	r2, #0
 8006e14:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f040 80b9 	bne.w	8006f92 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	785b      	ldrb	r3, [r3, #1]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d126      	bne.n	8006e76 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	461a      	mov	r2, r3
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	4413      	add	r3, r2
 8006e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	00da      	lsls	r2, r3, #3
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	4413      	add	r3, r2
 8006e4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	801a      	strh	r2, [r3, #0]
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	801a      	strh	r2, [r3, #0]
 8006e74:	e01a      	b.n	8006eac <HAL_PCD_EP_DB_Transmit+0xfa>
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	785b      	ldrb	r3, [r3, #1]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d116      	bne.n	8006eac <HAL_PCD_EP_DB_Transmit+0xfa>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	637b      	str	r3, [r7, #52]	; 0x34
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	461a      	mov	r2, r3
 8006e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e92:	4413      	add	r3, r2
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	00da      	lsls	r2, r3, #3
 8006e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d126      	bne.n	8006f08 <HAL_PCD_EP_DB_Transmit+0x156>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	61fb      	str	r3, [r7, #28]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	461a      	mov	r2, r3
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	4413      	add	r3, r2
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	00da      	lsls	r2, r3, #3
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	4413      	add	r3, r2
 8006edc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	801a      	strh	r2, [r3, #0]
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	801a      	strh	r2, [r3, #0]
 8006f06:	e017      	b.n	8006f38 <HAL_PCD_EP_DB_Transmit+0x186>
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	785b      	ldrb	r3, [r3, #1]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d113      	bne.n	8006f38 <HAL_PCD_EP_DB_Transmit+0x186>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	4413      	add	r3, r2
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	00da      	lsls	r2, r3, #3
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f30:	623b      	str	r3, [r7, #32]
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	2200      	movs	r2, #0
 8006f36:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f00b fb77 	bl	8012632 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 82fa 	beq.w	8007544 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6a:	82fb      	strh	r3, [r7, #22]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	461a      	mov	r2, r3
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	441a      	add	r2, r3
 8006f7a:	8afb      	ldrh	r3, [r7, #22]
 8006f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	8013      	strh	r3, [r2, #0]
 8006f90:	e2d8      	b.n	8007544 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d021      	beq.n	8006fe0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	441a      	add	r2, r3
 8006fc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	f040 82ac 	bne.w	8007544 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	695a      	ldr	r2, [r3, #20]
 8006ff0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ff4:	441a      	add	r2, r3
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	69da      	ldr	r2, [r3, #28]
 8006ffe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007002:	441a      	add	r2, r3
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	6a1a      	ldr	r2, [r3, #32]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	429a      	cmp	r2, r3
 8007012:	d30b      	bcc.n	800702c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	6a1a      	ldr	r2, [r3, #32]
 8007020:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007024:	1ad2      	subs	r2, r2, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	621a      	str	r2, [r3, #32]
 800702a:	e017      	b.n	800705c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d108      	bne.n	8007046 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8007034:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007038:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007044:	e00a      	b.n	800705c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2200      	movs	r2, #0
 800705a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	785b      	ldrb	r3, [r3, #1]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d165      	bne.n	8007130 <HAL_PCD_EP_DB_Transmit+0x37e>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007072:	b29b      	uxth	r3, r3
 8007074:	461a      	mov	r2, r3
 8007076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007078:	4413      	add	r3, r2
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	00da      	lsls	r2, r3, #3
 8007082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007084:	4413      	add	r3, r2
 8007086:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800708a:	63bb      	str	r3, [r7, #56]	; 0x38
 800708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	b29b      	uxth	r3, r3
 8007092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007096:	b29a      	uxth	r2, r3
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	801a      	strh	r2, [r3, #0]
 800709c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070a0:	2b3e      	cmp	r3, #62	; 0x3e
 80070a2:	d91d      	bls.n	80070e0 <HAL_PCD_EP_DB_Transmit+0x32e>
 80070a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070a8:	095b      	lsrs	r3, r3, #5
 80070aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80070ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d102      	bne.n	80070be <HAL_PCD_EP_DB_Transmit+0x30c>
 80070b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ba:	3b01      	subs	r3, #1
 80070bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	029b      	lsls	r3, r3, #10
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	4313      	orrs	r3, r2
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d8:	b29a      	uxth	r2, r3
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	801a      	strh	r2, [r3, #0]
 80070de:	e044      	b.n	800716a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80070e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <HAL_PCD_EP_DB_Transmit+0x34c>
 80070e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	e035      	b.n	800716a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80070fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007102:	085b      	lsrs	r3, r3, #1
 8007104:	64bb      	str	r3, [r7, #72]	; 0x48
 8007106:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <HAL_PCD_EP_DB_Transmit+0x366>
 8007112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007114:	3301      	adds	r3, #1
 8007116:	64bb      	str	r3, [r7, #72]	; 0x48
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	b29a      	uxth	r2, r3
 800711e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007120:	b29b      	uxth	r3, r3
 8007122:	029b      	lsls	r3, r3, #10
 8007124:	b29b      	uxth	r3, r3
 8007126:	4313      	orrs	r3, r2
 8007128:	b29a      	uxth	r2, r3
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	801a      	strh	r2, [r3, #0]
 800712e:	e01c      	b.n	800716a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	785b      	ldrb	r3, [r3, #1]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d118      	bne.n	800716a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	647b      	str	r3, [r7, #68]	; 0x44
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007146:	b29b      	uxth	r3, r3
 8007148:	461a      	mov	r2, r3
 800714a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800714c:	4413      	add	r3, r2
 800714e:	647b      	str	r3, [r7, #68]	; 0x44
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	00da      	lsls	r2, r3, #3
 8007156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007158:	4413      	add	r3, r2
 800715a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800715e:	643b      	str	r3, [r7, #64]	; 0x40
 8007160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007164:	b29a      	uxth	r2, r3
 8007166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007168:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	6959      	ldr	r1, [r3, #20]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	891a      	ldrh	r2, [r3, #8]
 8007176:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800717a:	b29b      	uxth	r3, r3
 800717c:	f005 fd80 	bl	800cc80 <USB_WritePMA>
 8007180:	e1e0      	b.n	8007544 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800718a:	b29b      	uxth	r3, r3
 800718c:	461a      	mov	r2, r3
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	4413      	add	r3, r2
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	6812      	ldr	r2, [r2, #0]
 800719a:	4413      	add	r3, r2
 800719c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071a6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	699a      	ldr	r2, [r3, #24]
 80071ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d307      	bcc.n	80071c6 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	699a      	ldr	r2, [r3, #24]
 80071ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80071be:	1ad2      	subs	r2, r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	619a      	str	r2, [r3, #24]
 80071c4:	e002      	b.n	80071cc <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2200      	movs	r2, #0
 80071ca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f040 80c0 	bne.w	8007356 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	785b      	ldrb	r3, [r3, #1]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d126      	bne.n	800722c <HAL_PCD_EP_DB_Transmit+0x47a>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	461a      	mov	r2, r3
 80071f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071f2:	4413      	add	r3, r2
 80071f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	00da      	lsls	r2, r3, #3
 80071fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071fe:	4413      	add	r3, r2
 8007200:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007204:	67bb      	str	r3, [r7, #120]	; 0x78
 8007206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	b29b      	uxth	r3, r3
 800720c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007210:	b29a      	uxth	r2, r3
 8007212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007214:	801a      	strh	r2, [r3, #0]
 8007216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007224:	b29a      	uxth	r2, r3
 8007226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007228:	801a      	strh	r2, [r3, #0]
 800722a:	e01a      	b.n	8007262 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d116      	bne.n	8007262 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	667b      	str	r3, [r7, #100]	; 0x64
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007242:	b29b      	uxth	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007248:	4413      	add	r3, r2
 800724a:	667b      	str	r3, [r7, #100]	; 0x64
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	00da      	lsls	r2, r3, #3
 8007252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007254:	4413      	add	r3, r2
 8007256:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800725a:	663b      	str	r3, [r7, #96]	; 0x60
 800725c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800725e:	2200      	movs	r2, #0
 8007260:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	677b      	str	r3, [r7, #116]	; 0x74
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	785b      	ldrb	r3, [r3, #1]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d12b      	bne.n	80072c8 <HAL_PCD_EP_DB_Transmit+0x516>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800727e:	b29b      	uxth	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007284:	4413      	add	r3, r2
 8007286:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	00da      	lsls	r2, r3, #3
 800728e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007290:	4413      	add	r3, r2
 8007292:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007296:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800729a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072ac:	801a      	strh	r2, [r3, #0]
 80072ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072be:	b29a      	uxth	r2, r3
 80072c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072c4:	801a      	strh	r2, [r3, #0]
 80072c6:	e017      	b.n	80072f8 <HAL_PCD_EP_DB_Transmit+0x546>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	785b      	ldrb	r3, [r3, #1]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d113      	bne.n	80072f8 <HAL_PCD_EP_DB_Transmit+0x546>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072d8:	b29b      	uxth	r3, r3
 80072da:	461a      	mov	r2, r3
 80072dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072de:	4413      	add	r3, r2
 80072e0:	677b      	str	r3, [r7, #116]	; 0x74
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	00da      	lsls	r2, r3, #3
 80072e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072ea:	4413      	add	r3, r2
 80072ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072f0:	673b      	str	r3, [r7, #112]	; 0x70
 80072f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072f4:	2200      	movs	r2, #0
 80072f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	4619      	mov	r1, r3
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f00b f997 	bl	8012632 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007304:	88fb      	ldrh	r3, [r7, #6]
 8007306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800730a:	2b00      	cmp	r3, #0
 800730c:	f040 811a 	bne.w	8007544 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	461a      	mov	r2, r3
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	b29b      	uxth	r3, r3
 8007322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	441a      	add	r2, r3
 800733c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8007340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007348:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800734c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007350:	b29b      	uxth	r3, r3
 8007352:	8013      	strh	r3, [r2, #0]
 8007354:	e0f6      	b.n	8007544 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007356:	88fb      	ldrh	r3, [r7, #6]
 8007358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d121      	bne.n	80073a4 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	b29b      	uxth	r3, r3
 8007372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	441a      	add	r2, r3
 800738c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007398:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800739c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	f040 80ca 	bne.w	8007544 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	695a      	ldr	r2, [r3, #20]
 80073b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80073b8:	441a      	add	r2, r3
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	69da      	ldr	r2, [r3, #28]
 80073c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80073c6:	441a      	add	r2, r3
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	6a1a      	ldr	r2, [r3, #32]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d30b      	bcc.n	80073f0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	6a1a      	ldr	r2, [r3, #32]
 80073e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073e8:	1ad2      	subs	r2, r2, r3
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	621a      	str	r2, [r3, #32]
 80073ee:	e017      	b.n	8007420 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d108      	bne.n	800740a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80073f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80073fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007408:	e00a      	b.n	8007420 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2200      	movs	r2, #0
 8007416:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	657b      	str	r3, [r7, #84]	; 0x54
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	785b      	ldrb	r3, [r3, #1]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d165      	bne.n	80074fa <HAL_PCD_EP_DB_Transmit+0x748>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800743c:	b29b      	uxth	r3, r3
 800743e:	461a      	mov	r2, r3
 8007440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007442:	4413      	add	r3, r2
 8007444:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	00da      	lsls	r2, r3, #3
 800744c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800744e:	4413      	add	r3, r2
 8007450:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007454:	65bb      	str	r3, [r7, #88]	; 0x58
 8007456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007460:	b29a      	uxth	r2, r3
 8007462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007464:	801a      	strh	r2, [r3, #0]
 8007466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800746a:	2b3e      	cmp	r3, #62	; 0x3e
 800746c:	d91d      	bls.n	80074aa <HAL_PCD_EP_DB_Transmit+0x6f8>
 800746e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	66bb      	str	r3, [r7, #104]	; 0x68
 8007476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800747a:	f003 031f 	and.w	r3, r3, #31
 800747e:	2b00      	cmp	r3, #0
 8007480:	d102      	bne.n	8007488 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007484:	3b01      	subs	r3, #1
 8007486:	66bb      	str	r3, [r7, #104]	; 0x68
 8007488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	b29a      	uxth	r2, r3
 800748e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007490:	b29b      	uxth	r3, r3
 8007492:	029b      	lsls	r3, r3, #10
 8007494:	b29b      	uxth	r3, r3
 8007496:	4313      	orrs	r3, r2
 8007498:	b29b      	uxth	r3, r3
 800749a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800749e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074a6:	801a      	strh	r2, [r3, #0]
 80074a8:	e041      	b.n	800752e <HAL_PCD_EP_DB_Transmit+0x77c>
 80074aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10a      	bne.n	80074c8 <HAL_PCD_EP_DB_Transmit+0x716>
 80074b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074c4:	801a      	strh	r2, [r3, #0]
 80074c6:	e032      	b.n	800752e <HAL_PCD_EP_DB_Transmit+0x77c>
 80074c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074cc:	085b      	lsrs	r3, r3, #1
 80074ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80074d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <HAL_PCD_EP_DB_Transmit+0x730>
 80074dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074de:	3301      	adds	r3, #1
 80074e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80074e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	029b      	lsls	r3, r3, #10
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	4313      	orrs	r3, r2
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074f6:	801a      	strh	r2, [r3, #0]
 80074f8:	e019      	b.n	800752e <HAL_PCD_EP_DB_Transmit+0x77c>
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	785b      	ldrb	r3, [r3, #1]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d115      	bne.n	800752e <HAL_PCD_EP_DB_Transmit+0x77c>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800750a:	b29b      	uxth	r3, r3
 800750c:	461a      	mov	r2, r3
 800750e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007510:	4413      	add	r3, r2
 8007512:	657b      	str	r3, [r7, #84]	; 0x54
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	00da      	lsls	r2, r3, #3
 800751a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800751c:	4413      	add	r3, r2
 800751e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007522:	653b      	str	r3, [r7, #80]	; 0x50
 8007524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007528:	b29a      	uxth	r2, r3
 800752a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800752c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	6959      	ldr	r1, [r3, #20]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	895a      	ldrh	r2, [r3, #10]
 800753a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800753e:	b29b      	uxth	r3, r3
 8007540:	f005 fb9e 	bl	800cc80 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800755e:	82bb      	strh	r3, [r7, #20]
 8007560:	8abb      	ldrh	r3, [r7, #20]
 8007562:	f083 0310 	eor.w	r3, r3, #16
 8007566:	82bb      	strh	r3, [r7, #20]
 8007568:	8abb      	ldrh	r3, [r7, #20]
 800756a:	f083 0320 	eor.w	r3, r3, #32
 800756e:	82bb      	strh	r3, [r7, #20]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	441a      	add	r2, r3
 800757e:	8abb      	ldrh	r3, [r7, #20]
 8007580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800758c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007590:	b29b      	uxth	r3, r3
 8007592:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3790      	adds	r7, #144	; 0x90
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800759e:	b480      	push	{r7}
 80075a0:	b087      	sub	sp, #28
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	607b      	str	r3, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	817b      	strh	r3, [r7, #10]
 80075ac:	4613      	mov	r3, r2
 80075ae:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80075b0:	897b      	ldrh	r3, [r7, #10]
 80075b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075bc:	897b      	ldrh	r3, [r7, #10]
 80075be:	f003 0207 	and.w	r2, r3, #7
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	3310      	adds	r3, #16
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	e009      	b.n	80075e8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80075d4:	897a      	ldrh	r2, [r7, #10]
 80075d6:	4613      	mov	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	00db      	lsls	r3, r3, #3
 80075de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	4413      	add	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80075e8:	893b      	ldrh	r3, [r7, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d107      	bne.n	80075fe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2200      	movs	r2, #0
 80075f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	80da      	strh	r2, [r3, #6]
 80075fc:	e00b      	b.n	8007616 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2201      	movs	r2, #1
 8007602:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	b29a      	uxth	r2, r3
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	0c1b      	lsrs	r3, r3, #16
 8007610:	b29a      	uxth	r2, r3
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	371c      	adds	r7, #28
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007648:	b29b      	uxth	r3, r3
 800764a:	f043 0301 	orr.w	r3, r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800765c:	b29b      	uxth	r3, r3
 800765e:	f043 0302 	orr.w	r3, r3, #2
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800767c:	4b05      	ldr	r3, [pc, #20]	; (8007694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a04      	ldr	r2, [pc, #16]	; (8007694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007686:	6013      	str	r3, [r2, #0]
}
 8007688:	bf00      	nop
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	58000400 	.word	0x58000400

08007698 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800769c:	4b04      	ldr	r3, [pc, #16]	; (80076b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	58000400 	.word	0x58000400

080076b4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80076b4:	b480      	push	{r7}
 80076b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80076b8:	4b05      	ldr	r3, [pc, #20]	; (80076d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	4a04      	ldr	r2, [pc, #16]	; (80076d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80076be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076c2:	6053      	str	r3, [r2, #4]
}
 80076c4:	bf00      	nop
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	58000400 	.word	0x58000400

080076d4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80076d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076e6:	d101      	bne.n	80076ec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <LL_RCC_HSE_Enable>:
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80076fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800770a:	6013      	str	r3, [r2, #0]
}
 800770c:	bf00      	nop
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <LL_RCC_HSE_Disable>:
{
 8007716:	b480      	push	{r7}
 8007718:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800771a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007728:	6013      	str	r3, [r2, #0]
}
 800772a:	bf00      	nop
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <LL_RCC_HSE_IsReady>:
{
 8007734:	b480      	push	{r7}
 8007736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007742:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007746:	d101      	bne.n	800774c <LL_RCC_HSE_IsReady+0x18>
 8007748:	2301      	movs	r3, #1
 800774a:	e000      	b.n	800774e <LL_RCC_HSE_IsReady+0x1a>
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <LL_RCC_HSI_Enable>:
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800775c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800776a:	6013      	str	r3, [r2, #0]
}
 800776c:	bf00      	nop
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <LL_RCC_HSI_Disable>:
{
 8007776:	b480      	push	{r7}
 8007778:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800777a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007788:	6013      	str	r3, [r2, #0]
}
 800778a:	bf00      	nop
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <LL_RCC_HSI_IsReady>:
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a6:	d101      	bne.n	80077ac <LL_RCC_HSI_IsReady+0x18>
 80077a8:	2301      	movs	r3, #1
 80077aa:	e000      	b.n	80077ae <LL_RCC_HSI_IsReady+0x1a>
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80077c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	061b      	lsls	r3, r3, #24
 80077ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077d2:	4313      	orrs	r3, r2
 80077d4:	604b      	str	r3, [r1, #4]
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <LL_RCC_HSI48_Enable>:
{
 80077e2:	b480      	push	{r7}
 80077e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80077e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077f2:	f043 0301 	orr.w	r3, r3, #1
 80077f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80077fa:	bf00      	nop
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <LL_RCC_HSI48_Disable>:
{
 8007804:	b480      	push	{r7}
 8007806:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800780c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007814:	f023 0301 	bic.w	r3, r3, #1
 8007818:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800781c:	bf00      	nop
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <LL_RCC_HSI48_IsReady>:
{
 8007826:	b480      	push	{r7}
 8007828:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800782a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800782e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b02      	cmp	r3, #2
 8007838:	d101      	bne.n	800783e <LL_RCC_HSI48_IsReady+0x18>
 800783a:	2301      	movs	r3, #1
 800783c:	e000      	b.n	8007840 <LL_RCC_HSI48_IsReady+0x1a>
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <LL_RCC_LSE_Enable>:
{
 800784a:	b480      	push	{r7}
 800784c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800784e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007856:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007862:	bf00      	nop
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <LL_RCC_LSE_Disable>:
{
 800786c:	b480      	push	{r7}
 800786e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800787c:	f023 0301 	bic.w	r3, r3, #1
 8007880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007884:	bf00      	nop
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <LL_RCC_LSE_EnableBypass>:
{
 800788e:	b480      	push	{r7}
 8007890:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800789e:	f043 0304 	orr.w	r3, r3, #4
 80078a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80078a6:	bf00      	nop
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <LL_RCC_LSE_DisableBypass>:
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80078b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078c0:	f023 0304 	bic.w	r3, r3, #4
 80078c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80078c8:	bf00      	nop
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <LL_RCC_LSE_IsReady>:
{
 80078d2:	b480      	push	{r7}
 80078d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80078d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d101      	bne.n	80078ea <LL_RCC_LSE_IsReady+0x18>
 80078e6:	2301      	movs	r3, #1
 80078e8:	e000      	b.n	80078ec <LL_RCC_LSE_IsReady+0x1a>
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <LL_RCC_LSI1_Enable>:
{
 80078f6:	b480      	push	{r7}
 80078f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80078fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007906:	f043 0301 	orr.w	r3, r3, #1
 800790a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800790e:	bf00      	nop
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <LL_RCC_LSI1_Disable>:
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800791c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007928:	f023 0301 	bic.w	r3, r3, #1
 800792c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007930:	bf00      	nop
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <LL_RCC_LSI1_IsReady>:
{
 800793a:	b480      	push	{r7}
 800793c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800793e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b02      	cmp	r3, #2
 800794c:	d101      	bne.n	8007952 <LL_RCC_LSI1_IsReady+0x18>
 800794e:	2301      	movs	r3, #1
 8007950:	e000      	b.n	8007954 <LL_RCC_LSI1_IsReady+0x1a>
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <LL_RCC_LSI2_Enable>:
{
 800795e:	b480      	push	{r7}
 8007960:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800796a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800796e:	f043 0304 	orr.w	r3, r3, #4
 8007972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007976:	bf00      	nop
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <LL_RCC_LSI2_Disable>:
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800798c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007990:	f023 0304 	bic.w	r3, r3, #4
 8007994:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007998:	bf00      	nop
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <LL_RCC_LSI2_IsReady>:
{
 80079a2:	b480      	push	{r7}
 80079a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80079a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079ae:	f003 0308 	and.w	r3, r3, #8
 80079b2:	2b08      	cmp	r3, #8
 80079b4:	d101      	bne.n	80079ba <LL_RCC_LSI2_IsReady+0x18>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e000      	b.n	80079bc <LL_RCC_LSI2_IsReady+0x1a>
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <LL_RCC_LSI2_SetTrimming>:
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80079ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079e2:	4313      	orrs	r3, r2
 80079e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <LL_RCC_MSI_Enable>:
{
 80079f4:	b480      	push	{r7}
 80079f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80079f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a02:	f043 0301 	orr.w	r3, r3, #1
 8007a06:	6013      	str	r3, [r2, #0]
}
 8007a08:	bf00      	nop
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <LL_RCC_MSI_Disable>:
{
 8007a12:	b480      	push	{r7}
 8007a14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a20:	f023 0301 	bic.w	r3, r3, #1
 8007a24:	6013      	str	r3, [r2, #0]
}
 8007a26:	bf00      	nop
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <LL_RCC_MSI_IsReady>:
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d101      	bne.n	8007a46 <LL_RCC_MSI_IsReady+0x16>
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <LL_RCC_MSI_IsReady+0x18>
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <LL_RCC_MSI_SetRange>:
{
 8007a52:	b480      	push	{r7}
 8007a54:	b083      	sub	sp, #12
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8007a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	600b      	str	r3, [r1, #0]
}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <LL_RCC_MSI_GetRange>:
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a8a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2bb0      	cmp	r3, #176	; 0xb0
 8007a90:	d901      	bls.n	8007a96 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007a92:	23b0      	movs	r3, #176	; 0xb0
 8007a94:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007a96:	687b      	ldr	r3, [r7, #4]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	021b      	lsls	r3, r3, #8
 8007aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	604b      	str	r3, [r1, #4]
}
 8007ac2:	bf00      	nop
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <LL_RCC_SetSysClkSource>:
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f023 0203 	bic.w	r2, r3, #3
 8007ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	608b      	str	r3, [r1, #8]
}
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <LL_RCC_GetSysClkSource>:
{
 8007af6:	b480      	push	{r7}
 8007af8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f003 030c 	and.w	r3, r3, #12
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <LL_RCC_SetAHBPrescaler>:
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	608b      	str	r3, [r1, #8]
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <LL_C2_RCC_SetAHBPrescaler>:
{
 8007b36:	b480      	push	{r7}
 8007b38:	b083      	sub	sp, #12
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b42:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007b46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <LL_RCC_SetAHB4Prescaler>:
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007b72:	f023 020f 	bic.w	r2, r3, #15
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	091b      	lsrs	r3, r3, #4
 8007b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <LL_RCC_SetAPB1Prescaler>:
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	608b      	str	r3, [r1, #8]
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <LL_RCC_SetAPB2Prescaler>:
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	608b      	str	r3, [r1, #8]
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <LL_RCC_GetAHBPrescaler>:
{
 8007be0:	b480      	push	{r7}
 8007be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <LL_RCC_GetAHB4Prescaler>:
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c00:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007c04:	011b      	lsls	r3, r3, #4
 8007c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8007c14:	b480      	push	{r7}
 8007c16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c26:	6013      	str	r3, [r2, #0]
}
 8007c28:	bf00      	nop
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8007c32:	b480      	push	{r7}
 8007c34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c44:	6013      	str	r3, [r2, #0]
}
 8007c46:	bf00      	nop
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007c50:	b480      	push	{r7}
 8007c52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c62:	d101      	bne.n	8007c68 <LL_RCC_PLL_IsReady+0x18>
 8007c64:	2301      	movs	r3, #1
 8007c66:	e000      	b.n	8007c6a <LL_RCC_PLL_IsReady+0x1a>
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	0a1b      	lsrs	r3, r3, #8
 8007c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f003 0303 	and.w	r3, r3, #3
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce8:	d101      	bne.n	8007cee <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e000      	b.n	8007cf0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d0e:	d101      	bne.n	8007d14 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007d10:	2301      	movs	r3, #1
 8007d12:	e000      	b.n	8007d16 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d34:	d101      	bne.n	8007d3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007d36:	2301      	movs	r3, #1
 8007d38:	e000      	b.n	8007d3c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007d46:	b480      	push	{r7}
 8007d48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d58:	d101      	bne.n	8007d5e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e000      	b.n	8007d60 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d7c:	d101      	bne.n	8007d82 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e000      	b.n	8007d84 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
	...

08007d90 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d90:	b590      	push	{r4, r7, lr}
 8007d92:	b08d      	sub	sp, #52	; 0x34
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e363      	b.n	800846a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0320 	and.w	r3, r3, #32
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 808d 	beq.w	8007eca <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007db0:	f7ff fea1 	bl	8007af6 <LL_RCC_GetSysClkSource>
 8007db4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007db6:	f7ff ff82 	bl	8007cbe <LL_RCC_PLL_GetMainSource>
 8007dba:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d005      	beq.n	8007dce <HAL_RCC_OscConfig+0x3e>
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc4:	2b0c      	cmp	r3, #12
 8007dc6:	d147      	bne.n	8007e58 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d144      	bne.n	8007e58 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e347      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007dde:	f7ff fe4c 	bl	8007a7a <LL_RCC_MSI_GetRange>
 8007de2:	4603      	mov	r3, r0
 8007de4:	429c      	cmp	r4, r3
 8007de6:	d914      	bls.n	8007e12 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 fd03 	bl	80087f8 <RCC_SetFlashLatencyFromMSIRange>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e336      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7ff fe26 	bl	8007a52 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7ff fe4a 	bl	8007aa4 <LL_RCC_MSI_SetCalibTrimming>
 8007e10:	e013      	b.n	8007e3a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff fe1b 	bl	8007a52 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff fe3f 	bl	8007aa4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fce4 	bl	80087f8 <RCC_SetFlashLatencyFromMSIRange>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e317      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007e3a:	f000 fcc9 	bl	80087d0 <HAL_RCC_GetHCLKFreq>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	4aa4      	ldr	r2, [pc, #656]	; (80080d4 <HAL_RCC_OscConfig+0x344>)
 8007e42:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007e44:	4ba4      	ldr	r3, [pc, #656]	; (80080d8 <HAL_RCC_OscConfig+0x348>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fc fb35 	bl	80044b8 <HAL_InitTick>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d039      	beq.n	8007ec8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e308      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01e      	beq.n	8007e9e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007e60:	f7ff fdc8 	bl	80079f4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007e64:	f7fc fb76 	bl	8004554 <HAL_GetTick>
 8007e68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007e6a:	e008      	b.n	8007e7e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007e6c:	f7fc fb72 	bl	8004554 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e2f5      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007e7e:	f7ff fdd7 	bl	8007a30 <LL_RCC_MSI_IsReady>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0f1      	beq.n	8007e6c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7ff fde0 	bl	8007a52 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff fe04 	bl	8007aa4 <LL_RCC_MSI_SetCalibTrimming>
 8007e9c:	e015      	b.n	8007eca <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007e9e:	f7ff fdb8 	bl	8007a12 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007ea2:	f7fc fb57 	bl	8004554 <HAL_GetTick>
 8007ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007ea8:	e008      	b.n	8007ebc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007eaa:	f7fc fb53 	bl	8004554 <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d901      	bls.n	8007ebc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e2d6      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007ebc:	f7ff fdb8 	bl	8007a30 <LL_RCC_MSI_IsReady>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1f1      	bne.n	8007eaa <HAL_RCC_OscConfig+0x11a>
 8007ec6:	e000      	b.n	8007eca <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007ec8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d047      	beq.n	8007f66 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ed6:	f7ff fe0e 	bl	8007af6 <LL_RCC_GetSysClkSource>
 8007eda:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007edc:	f7ff feef 	bl	8007cbe <LL_RCC_PLL_GetMainSource>
 8007ee0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d005      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x164>
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	2b0c      	cmp	r3, #12
 8007eec:	d108      	bne.n	8007f00 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	d105      	bne.n	8007f00 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d134      	bne.n	8007f66 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e2b4      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f08:	d102      	bne.n	8007f10 <HAL_RCC_OscConfig+0x180>
 8007f0a:	f7ff fbf5 	bl	80076f8 <LL_RCC_HSE_Enable>
 8007f0e:	e001      	b.n	8007f14 <HAL_RCC_OscConfig+0x184>
 8007f10:	f7ff fc01 	bl	8007716 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d012      	beq.n	8007f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f1c:	f7fc fb1a 	bl	8004554 <HAL_GetTick>
 8007f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007f22:	e008      	b.n	8007f36 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f24:	f7fc fb16 	bl	8004554 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	2b64      	cmp	r3, #100	; 0x64
 8007f30:	d901      	bls.n	8007f36 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e299      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007f36:	f7ff fbfd 	bl	8007734 <LL_RCC_HSE_IsReady>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0f1      	beq.n	8007f24 <HAL_RCC_OscConfig+0x194>
 8007f40:	e011      	b.n	8007f66 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f42:	f7fc fb07 	bl	8004554 <HAL_GetTick>
 8007f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007f48:	e008      	b.n	8007f5c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f4a:	f7fc fb03 	bl	8004554 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b64      	cmp	r3, #100	; 0x64
 8007f56:	d901      	bls.n	8007f5c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e286      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007f5c:	f7ff fbea 	bl	8007734 <LL_RCC_HSE_IsReady>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1f1      	bne.n	8007f4a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d04c      	beq.n	800800c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f72:	f7ff fdc0 	bl	8007af6 <LL_RCC_GetSysClkSource>
 8007f76:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f78:	f7ff fea1 	bl	8007cbe <LL_RCC_PLL_GetMainSource>
 8007f7c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	2b04      	cmp	r3, #4
 8007f82:	d005      	beq.n	8007f90 <HAL_RCC_OscConfig+0x200>
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b0c      	cmp	r3, #12
 8007f88:	d10e      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d10b      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d101      	bne.n	8007f9c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e266      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7ff fc09 	bl	80077b8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007fa6:	e031      	b.n	800800c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d019      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fb0:	f7ff fbd2 	bl	8007758 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb4:	f7fc face 	bl	8004554 <HAL_GetTick>
 8007fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007fba:	e008      	b.n	8007fce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fbc:	f7fc faca 	bl	8004554 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e24d      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007fce:	f7ff fbe1 	bl	8007794 <LL_RCC_HSI_IsReady>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0f1      	beq.n	8007fbc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff fbeb 	bl	80077b8 <LL_RCC_HSI_SetCalibTrimming>
 8007fe2:	e013      	b.n	800800c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fe4:	f7ff fbc7 	bl	8007776 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe8:	f7fc fab4 	bl	8004554 <HAL_GetTick>
 8007fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007fee:	e008      	b.n	8008002 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ff0:	f7fc fab0 	bl	8004554 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d901      	bls.n	8008002 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e233      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008002:	f7ff fbc7 	bl	8007794 <LL_RCC_HSI_IsReady>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1f1      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0308 	and.w	r3, r3, #8
 8008014:	2b00      	cmp	r3, #0
 8008016:	d106      	bne.n	8008026 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 80a3 	beq.w	800816c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d076      	beq.n	800811c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0310 	and.w	r3, r3, #16
 8008036:	2b00      	cmp	r3, #0
 8008038:	d046      	beq.n	80080c8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800803a:	f7ff fc7e 	bl	800793a <LL_RCC_LSI1_IsReady>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d113      	bne.n	800806c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008044:	f7ff fc57 	bl	80078f6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008048:	f7fc fa84 	bl	8004554 <HAL_GetTick>
 800804c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800804e:	e008      	b.n	8008062 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008050:	f7fc fa80 	bl	8004554 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b02      	cmp	r3, #2
 800805c:	d901      	bls.n	8008062 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e203      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008062:	f7ff fc6a 	bl	800793a <LL_RCC_LSI1_IsReady>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0f1      	beq.n	8008050 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800806c:	f7ff fc77 	bl	800795e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008070:	f7fc fa70 	bl	8004554 <HAL_GetTick>
 8008074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008078:	f7fc fa6c 	bl	8004554 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b03      	cmp	r3, #3
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e1ef      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800808a:	f7ff fc8a 	bl	80079a2 <LL_RCC_LSI2_IsReady>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0f1      	beq.n	8008078 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	4618      	mov	r0, r3
 800809a:	f7ff fc94 	bl	80079c6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800809e:	f7ff fc3b 	bl	8007918 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a2:	f7fc fa57 	bl	8004554 <HAL_GetTick>
 80080a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80080a8:	e008      	b.n	80080bc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80080aa:	f7fc fa53 	bl	8004554 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e1d6      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80080bc:	f7ff fc3d 	bl	800793a <LL_RCC_LSI1_IsReady>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1f1      	bne.n	80080aa <HAL_RCC_OscConfig+0x31a>
 80080c6:	e051      	b.n	800816c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80080c8:	f7ff fc15 	bl	80078f6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080cc:	f7fc fa42 	bl	8004554 <HAL_GetTick>
 80080d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80080d2:	e00c      	b.n	80080ee <HAL_RCC_OscConfig+0x35e>
 80080d4:	2000004c 	.word	0x2000004c
 80080d8:	20000050 	.word	0x20000050
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80080dc:	f7fc fa3a 	bl	8004554 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d901      	bls.n	80080ee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e1bd      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80080ee:	f7ff fc24 	bl	800793a <LL_RCC_LSI1_IsReady>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d0f1      	beq.n	80080dc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80080f8:	f7ff fc42 	bl	8007980 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80080fc:	e008      	b.n	8008110 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80080fe:	f7fc fa29 	bl	8004554 <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	2b03      	cmp	r3, #3
 800810a:	d901      	bls.n	8008110 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e1ac      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008110:	f7ff fc47 	bl	80079a2 <LL_RCC_LSI2_IsReady>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1f1      	bne.n	80080fe <HAL_RCC_OscConfig+0x36e>
 800811a:	e027      	b.n	800816c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800811c:	f7ff fc30 	bl	8007980 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008120:	f7fc fa18 	bl	8004554 <HAL_GetTick>
 8008124:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008128:	f7fc fa14 	bl	8004554 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b03      	cmp	r3, #3
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e197      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800813a:	f7ff fc32 	bl	80079a2 <LL_RCC_LSI2_IsReady>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1f1      	bne.n	8008128 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008144:	f7ff fbe8 	bl	8007918 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008148:	f7fc fa04 	bl	8004554 <HAL_GetTick>
 800814c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800814e:	e008      	b.n	8008162 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008150:	f7fc fa00 	bl	8004554 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	2b02      	cmp	r3, #2
 800815c:	d901      	bls.n	8008162 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e183      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008162:	f7ff fbea 	bl	800793a <LL_RCC_LSI1_IsReady>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1f1      	bne.n	8008150 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d05b      	beq.n	8008230 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008178:	4ba7      	ldr	r3, [pc, #668]	; (8008418 <HAL_RCC_OscConfig+0x688>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008180:	2b00      	cmp	r3, #0
 8008182:	d114      	bne.n	80081ae <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008184:	f7ff fa78 	bl	8007678 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008188:	f7fc f9e4 	bl	8004554 <HAL_GetTick>
 800818c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800818e:	e008      	b.n	80081a2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008190:	f7fc f9e0 	bl	8004554 <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	2b02      	cmp	r3, #2
 800819c:	d901      	bls.n	80081a2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e163      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081a2:	4b9d      	ldr	r3, [pc, #628]	; (8008418 <HAL_RCC_OscConfig+0x688>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0f0      	beq.n	8008190 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d102      	bne.n	80081bc <HAL_RCC_OscConfig+0x42c>
 80081b6:	f7ff fb48 	bl	800784a <LL_RCC_LSE_Enable>
 80081ba:	e00c      	b.n	80081d6 <HAL_RCC_OscConfig+0x446>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	2b05      	cmp	r3, #5
 80081c2:	d104      	bne.n	80081ce <HAL_RCC_OscConfig+0x43e>
 80081c4:	f7ff fb63 	bl	800788e <LL_RCC_LSE_EnableBypass>
 80081c8:	f7ff fb3f 	bl	800784a <LL_RCC_LSE_Enable>
 80081cc:	e003      	b.n	80081d6 <HAL_RCC_OscConfig+0x446>
 80081ce:	f7ff fb4d 	bl	800786c <LL_RCC_LSE_Disable>
 80081d2:	f7ff fb6d 	bl	80078b0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d014      	beq.n	8008208 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081de:	f7fc f9b9 	bl	8004554 <HAL_GetTick>
 80081e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80081e4:	e00a      	b.n	80081fc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081e6:	f7fc f9b5 	bl	8004554 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d901      	bls.n	80081fc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e136      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80081fc:	f7ff fb69 	bl	80078d2 <LL_RCC_LSE_IsReady>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0ef      	beq.n	80081e6 <HAL_RCC_OscConfig+0x456>
 8008206:	e013      	b.n	8008230 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008208:	f7fc f9a4 	bl	8004554 <HAL_GetTick>
 800820c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800820e:	e00a      	b.n	8008226 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008210:	f7fc f9a0 	bl	8004554 <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	f241 3288 	movw	r2, #5000	; 0x1388
 800821e:	4293      	cmp	r3, r2
 8008220:	d901      	bls.n	8008226 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e121      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008226:	f7ff fb54 	bl	80078d2 <LL_RCC_LSE_IsReady>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1ef      	bne.n	8008210 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008238:	2b00      	cmp	r3, #0
 800823a:	d02c      	beq.n	8008296 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008240:	2b00      	cmp	r3, #0
 8008242:	d014      	beq.n	800826e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008244:	f7ff facd 	bl	80077e2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008248:	f7fc f984 	bl	8004554 <HAL_GetTick>
 800824c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800824e:	e008      	b.n	8008262 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008250:	f7fc f980 	bl	8004554 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d901      	bls.n	8008262 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e103      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008262:	f7ff fae0 	bl	8007826 <LL_RCC_HSI48_IsReady>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0f1      	beq.n	8008250 <HAL_RCC_OscConfig+0x4c0>
 800826c:	e013      	b.n	8008296 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800826e:	f7ff fac9 	bl	8007804 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008272:	f7fc f96f 	bl	8004554 <HAL_GetTick>
 8008276:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008278:	e008      	b.n	800828c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800827a:	f7fc f96b 	bl	8004554 <HAL_GetTick>
 800827e:	4602      	mov	r2, r0
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	2b02      	cmp	r3, #2
 8008286:	d901      	bls.n	800828c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e0ee      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800828c:	f7ff facb 	bl	8007826 <LL_RCC_HSI48_IsReady>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1f1      	bne.n	800827a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 80e4 	beq.w	8008468 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082a0:	f7ff fc29 	bl	8007af6 <LL_RCC_GetSysClkSource>
 80082a4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80082a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	f040 80b4 	bne.w	8008420 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f003 0203 	and.w	r2, r3, #3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d123      	bne.n	800830e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d11c      	bne.n	800830e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	0a1b      	lsrs	r3, r3, #8
 80082d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d114      	bne.n	800830e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d10d      	bne.n	800830e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d106      	bne.n	800830e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800830a:	429a      	cmp	r2, r3
 800830c:	d05d      	beq.n	80083ca <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	2b0c      	cmp	r3, #12
 8008312:	d058      	beq.n	80083c6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e0a1      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008326:	f7ff fc84 	bl	8007c32 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800832a:	f7fc f913 	bl	8004554 <HAL_GetTick>
 800832e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008330:	e008      	b.n	8008344 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008332:	f7fc f90f 	bl	8004554 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d901      	bls.n	8008344 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e092      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1ef      	bne.n	8008332 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	4b30      	ldr	r3, [pc, #192]	; (800841c <HAL_RCC_OscConfig+0x68c>)
 800835a:	4013      	ands	r3, r2
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008364:	4311      	orrs	r1, r2
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800836a:	0212      	lsls	r2, r2, #8
 800836c:	4311      	orrs	r1, r2
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008372:	4311      	orrs	r1, r2
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008378:	4311      	orrs	r1, r2
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800837e:	430a      	orrs	r2, r1
 8008380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008384:	4313      	orrs	r3, r2
 8008386:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008388:	f7ff fc44 	bl	8007c14 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800838c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800839a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800839c:	f7fc f8da 	bl	8004554 <HAL_GetTick>
 80083a0:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083a2:	e008      	b.n	80083b6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083a4:	f7fc f8d6 	bl	8004554 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d901      	bls.n	80083b6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e059      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0ef      	beq.n	80083a4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80083c4:	e050      	b.n	8008468 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e04f      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d147      	bne.n	8008468 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80083d8:	f7ff fc1c 	bl	8007c14 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80083dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80083ec:	f7fc f8b2 	bl	8004554 <HAL_GetTick>
 80083f0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083f2:	e008      	b.n	8008406 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083f4:	f7fc f8ae 	bl	8004554 <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d901      	bls.n	8008406 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e031      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0ef      	beq.n	80083f4 <HAL_RCC_OscConfig+0x664>
 8008414:	e028      	b.n	8008468 <HAL_RCC_OscConfig+0x6d8>
 8008416:	bf00      	nop
 8008418:	58000400 	.word	0x58000400
 800841c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	2b0c      	cmp	r3, #12
 8008424:	d01e      	beq.n	8008464 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008426:	f7ff fc04 	bl	8007c32 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842a:	f7fc f893 	bl	8004554 <HAL_GetTick>
 800842e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008430:	e008      	b.n	8008444 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008432:	f7fc f88f 	bl	8004554 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e012      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1ef      	bne.n	8008432 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008456:	68da      	ldr	r2, [r3, #12]
 8008458:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800845c:	4b05      	ldr	r3, [pc, #20]	; (8008474 <HAL_RCC_OscConfig+0x6e4>)
 800845e:	4013      	ands	r3, r2
 8008460:	60cb      	str	r3, [r1, #12]
 8008462:	e001      	b.n	8008468 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e000      	b.n	800846a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3734      	adds	r7, #52	; 0x34
 800846e:	46bd      	mov	sp, r7
 8008470:	bd90      	pop	{r4, r7, pc}
 8008472:	bf00      	nop
 8008474:	eefefffc 	.word	0xeefefffc

08008478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e12d      	b.n	80086e8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800848c:	4b98      	ldr	r3, [pc, #608]	; (80086f0 <HAL_RCC_ClockConfig+0x278>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	429a      	cmp	r2, r3
 8008498:	d91b      	bls.n	80084d2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800849a:	4b95      	ldr	r3, [pc, #596]	; (80086f0 <HAL_RCC_ClockConfig+0x278>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f023 0207 	bic.w	r2, r3, #7
 80084a2:	4993      	ldr	r1, [pc, #588]	; (80086f0 <HAL_RCC_ClockConfig+0x278>)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084aa:	f7fc f853 	bl	8004554 <HAL_GetTick>
 80084ae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084b0:	e008      	b.n	80084c4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80084b2:	f7fc f84f 	bl	8004554 <HAL_GetTick>
 80084b6:	4602      	mov	r2, r0
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d901      	bls.n	80084c4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e111      	b.n	80086e8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084c4:	4b8a      	ldr	r3, [pc, #552]	; (80086f0 <HAL_RCC_ClockConfig+0x278>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d1ef      	bne.n	80084b2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d016      	beq.n	800850c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7ff fb13 	bl	8007b0e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80084e8:	f7fc f834 	bl	8004554 <HAL_GetTick>
 80084ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80084ee:	e008      	b.n	8008502 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80084f0:	f7fc f830 	bl	8004554 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d901      	bls.n	8008502 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e0f2      	b.n	80086e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008502:	f7ff fbe8 	bl	8007cd6 <LL_RCC_IsActiveFlag_HPRE>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d0f1      	beq.n	80084f0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0320 	and.w	r3, r3, #32
 8008514:	2b00      	cmp	r3, #0
 8008516:	d016      	beq.n	8008546 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	4618      	mov	r0, r3
 800851e:	f7ff fb0a 	bl	8007b36 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008522:	f7fc f817 	bl	8004554 <HAL_GetTick>
 8008526:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008528:	e008      	b.n	800853c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800852a:	f7fc f813 	bl	8004554 <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	2b02      	cmp	r3, #2
 8008536:	d901      	bls.n	800853c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e0d5      	b.n	80086e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800853c:	f7ff fbdd 	bl	8007cfa <LL_RCC_IsActiveFlag_C2HPRE>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0f1      	beq.n	800852a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d016      	beq.n	8008580 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fb03 	bl	8007b62 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800855c:	f7fb fffa 	bl	8004554 <HAL_GetTick>
 8008560:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008562:	e008      	b.n	8008576 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008564:	f7fb fff6 	bl	8004554 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	2b02      	cmp	r3, #2
 8008570:	d901      	bls.n	8008576 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e0b8      	b.n	80086e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008576:	f7ff fbd3 	bl	8007d20 <LL_RCC_IsActiveFlag_SHDHPRE>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0f1      	beq.n	8008564 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	d016      	beq.n	80085ba <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fafd 	bl	8007b90 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008596:	f7fb ffdd 	bl	8004554 <HAL_GetTick>
 800859a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800859c:	e008      	b.n	80085b0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800859e:	f7fb ffd9 	bl	8004554 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d901      	bls.n	80085b0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e09b      	b.n	80086e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80085b0:	f7ff fbc9 	bl	8007d46 <LL_RCC_IsActiveFlag_PPRE1>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0f1      	beq.n	800859e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0308 	and.w	r3, r3, #8
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d017      	beq.n	80085f6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7ff faf3 	bl	8007bb8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80085d2:	f7fb ffbf 	bl	8004554 <HAL_GetTick>
 80085d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80085d8:	e008      	b.n	80085ec <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80085da:	f7fb ffbb 	bl	8004554 <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d901      	bls.n	80085ec <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e07d      	b.n	80086e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80085ec:	f7ff fbbd 	bl	8007d6a <LL_RCC_IsActiveFlag_PPRE2>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0f1      	beq.n	80085da <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d043      	beq.n	800868a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	2b02      	cmp	r3, #2
 8008608:	d106      	bne.n	8008618 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800860a:	f7ff f893 	bl	8007734 <LL_RCC_HSE_IsReady>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d11e      	bne.n	8008652 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e067      	b.n	80086e8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	2b03      	cmp	r3, #3
 800861e:	d106      	bne.n	800862e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008620:	f7ff fb16 	bl	8007c50 <LL_RCC_PLL_IsReady>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d113      	bne.n	8008652 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e05c      	b.n	80086e8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d106      	bne.n	8008644 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008636:	f7ff f9fb 	bl	8007a30 <LL_RCC_MSI_IsReady>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d108      	bne.n	8008652 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e051      	b.n	80086e8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008644:	f7ff f8a6 	bl	8007794 <LL_RCC_HSI_IsReady>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e04a      	b.n	80086e8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff fa39 	bl	8007ace <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800865c:	f7fb ff7a 	bl	8004554 <HAL_GetTick>
 8008660:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008662:	e00a      	b.n	800867a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008664:	f7fb ff76 	bl	8004554 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008672:	4293      	cmp	r3, r2
 8008674:	d901      	bls.n	800867a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e036      	b.n	80086e8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800867a:	f7ff fa3c 	bl	8007af6 <LL_RCC_GetSysClkSource>
 800867e:	4602      	mov	r2, r0
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	429a      	cmp	r2, r3
 8008688:	d1ec      	bne.n	8008664 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800868a:	4b19      	ldr	r3, [pc, #100]	; (80086f0 <HAL_RCC_ClockConfig+0x278>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	429a      	cmp	r2, r3
 8008696:	d21b      	bcs.n	80086d0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008698:	4b15      	ldr	r3, [pc, #84]	; (80086f0 <HAL_RCC_ClockConfig+0x278>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f023 0207 	bic.w	r2, r3, #7
 80086a0:	4913      	ldr	r1, [pc, #76]	; (80086f0 <HAL_RCC_ClockConfig+0x278>)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086a8:	f7fb ff54 	bl	8004554 <HAL_GetTick>
 80086ac:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ae:	e008      	b.n	80086c2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80086b0:	f7fb ff50 	bl	8004554 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d901      	bls.n	80086c2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e012      	b.n	80086e8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086c2:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <HAL_RCC_ClockConfig+0x278>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d1ef      	bne.n	80086b0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80086d0:	f000 f87e 	bl	80087d0 <HAL_RCC_GetHCLKFreq>
 80086d4:	4603      	mov	r3, r0
 80086d6:	4a07      	ldr	r2, [pc, #28]	; (80086f4 <HAL_RCC_ClockConfig+0x27c>)
 80086d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80086da:	f7fb ff47 	bl	800456c <HAL_GetTickPrio>
 80086de:	4603      	mov	r3, r0
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fb fee9 	bl	80044b8 <HAL_InitTick>
 80086e6:	4603      	mov	r3, r0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	58004000 	.word	0x58004000
 80086f4:	2000004c 	.word	0x2000004c

080086f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086f8:	b590      	push	{r4, r7, lr}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086fe:	f7ff f9fa 	bl	8007af6 <LL_RCC_GetSysClkSource>
 8008702:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10a      	bne.n	8008720 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800870a:	f7ff f9b6 	bl	8007a7a <LL_RCC_MSI_GetRange>
 800870e:	4603      	mov	r3, r0
 8008710:	091b      	lsrs	r3, r3, #4
 8008712:	f003 030f 	and.w	r3, r3, #15
 8008716:	4a2b      	ldr	r2, [pc, #172]	; (80087c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800871c:	60fb      	str	r3, [r7, #12]
 800871e:	e04b      	b.n	80087b8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b04      	cmp	r3, #4
 8008724:	d102      	bne.n	800872c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008726:	4b28      	ldr	r3, [pc, #160]	; (80087c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	e045      	b.n	80087b8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b08      	cmp	r3, #8
 8008730:	d10a      	bne.n	8008748 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008732:	f7fe ffcf 	bl	80076d4 <LL_RCC_HSE_IsEnabledDiv2>
 8008736:	4603      	mov	r3, r0
 8008738:	2b01      	cmp	r3, #1
 800873a:	d102      	bne.n	8008742 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800873c:	4b22      	ldr	r3, [pc, #136]	; (80087c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	e03a      	b.n	80087b8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008742:	4b22      	ldr	r3, [pc, #136]	; (80087cc <HAL_RCC_GetSysClockFreq+0xd4>)
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	e037      	b.n	80087b8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008748:	f7ff fab9 	bl	8007cbe <LL_RCC_PLL_GetMainSource>
 800874c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b02      	cmp	r3, #2
 8008752:	d003      	beq.n	800875c <HAL_RCC_GetSysClockFreq+0x64>
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2b03      	cmp	r3, #3
 8008758:	d003      	beq.n	8008762 <HAL_RCC_GetSysClockFreq+0x6a>
 800875a:	e00d      	b.n	8008778 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800875c:	4b1a      	ldr	r3, [pc, #104]	; (80087c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800875e:	60bb      	str	r3, [r7, #8]
        break;
 8008760:	e015      	b.n	800878e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008762:	f7fe ffb7 	bl	80076d4 <LL_RCC_HSE_IsEnabledDiv2>
 8008766:	4603      	mov	r3, r0
 8008768:	2b01      	cmp	r3, #1
 800876a:	d102      	bne.n	8008772 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800876c:	4b16      	ldr	r3, [pc, #88]	; (80087c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800876e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008770:	e00d      	b.n	800878e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008772:	4b16      	ldr	r3, [pc, #88]	; (80087cc <HAL_RCC_GetSysClockFreq+0xd4>)
 8008774:	60bb      	str	r3, [r7, #8]
        break;
 8008776:	e00a      	b.n	800878e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008778:	f7ff f97f 	bl	8007a7a <LL_RCC_MSI_GetRange>
 800877c:	4603      	mov	r3, r0
 800877e:	091b      	lsrs	r3, r3, #4
 8008780:	f003 030f 	and.w	r3, r3, #15
 8008784:	4a0f      	ldr	r2, [pc, #60]	; (80087c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800878a:	60bb      	str	r3, [r7, #8]
        break;
 800878c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800878e:	f7ff fa71 	bl	8007c74 <LL_RCC_PLL_GetN>
 8008792:	4602      	mov	r2, r0
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	fb03 f402 	mul.w	r4, r3, r2
 800879a:	f7ff fa84 	bl	8007ca6 <LL_RCC_PLL_GetDivider>
 800879e:	4603      	mov	r3, r0
 80087a0:	091b      	lsrs	r3, r3, #4
 80087a2:	3301      	adds	r3, #1
 80087a4:	fbb4 f4f3 	udiv	r4, r4, r3
 80087a8:	f7ff fa71 	bl	8007c8e <LL_RCC_PLL_GetR>
 80087ac:	4603      	mov	r3, r0
 80087ae:	0f5b      	lsrs	r3, r3, #29
 80087b0:	3301      	adds	r3, #1
 80087b2:	fbb4 f3f3 	udiv	r3, r4, r3
 80087b6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80087b8:	68fb      	ldr	r3, [r7, #12]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd90      	pop	{r4, r7, pc}
 80087c2:	bf00      	nop
 80087c4:	08014468 	.word	0x08014468
 80087c8:	00f42400 	.word	0x00f42400
 80087cc:	01e84800 	.word	0x01e84800

080087d0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087d0:	b598      	push	{r3, r4, r7, lr}
 80087d2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80087d4:	f7ff ff90 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 80087d8:	4604      	mov	r4, r0
 80087da:	f7ff fa01 	bl	8007be0 <LL_RCC_GetAHBPrescaler>
 80087de:	4603      	mov	r3, r0
 80087e0:	091b      	lsrs	r3, r3, #4
 80087e2:	f003 030f 	and.w	r3, r3, #15
 80087e6:	4a03      	ldr	r2, [pc, #12]	; (80087f4 <HAL_RCC_GetHCLKFreq+0x24>)
 80087e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ec:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	bd98      	pop	{r3, r4, r7, pc}
 80087f4:	08014428 	.word	0x08014428

080087f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80087f8:	b590      	push	{r4, r7, lr}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2bb0      	cmp	r3, #176	; 0xb0
 8008804:	d903      	bls.n	800880e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008806:	4b15      	ldr	r3, [pc, #84]	; (800885c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	e007      	b.n	800881e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	091b      	lsrs	r3, r3, #4
 8008812:	f003 030f 	and.w	r3, r3, #15
 8008816:	4a11      	ldr	r2, [pc, #68]	; (800885c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800881c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800881e:	f7ff f9eb 	bl	8007bf8 <LL_RCC_GetAHB4Prescaler>
 8008822:	4603      	mov	r3, r0
 8008824:	091b      	lsrs	r3, r3, #4
 8008826:	f003 030f 	and.w	r3, r3, #15
 800882a:	4a0d      	ldr	r2, [pc, #52]	; (8008860 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800882c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	fbb2 f3f3 	udiv	r3, r2, r3
 8008836:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	4a0a      	ldr	r2, [pc, #40]	; (8008864 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800883c:	fba2 2303 	umull	r2, r3, r2, r3
 8008840:	0c9c      	lsrs	r4, r3, #18
 8008842:	f7fe ff29 	bl	8007698 <HAL_PWREx_GetVoltageRange>
 8008846:	4603      	mov	r3, r0
 8008848:	4619      	mov	r1, r3
 800884a:	4620      	mov	r0, r4
 800884c:	f000 f80c 	bl	8008868 <RCC_SetFlashLatency>
 8008850:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	bd90      	pop	{r4, r7, pc}
 800885a:	bf00      	nop
 800885c:	08014468 	.word	0x08014468
 8008860:	08014428 	.word	0x08014428
 8008864:	431bde83 	.word	0x431bde83

08008868 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008868:	b590      	push	{r4, r7, lr}
 800886a:	b093      	sub	sp, #76	; 0x4c
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008872:	4b37      	ldr	r3, [pc, #220]	; (8008950 <RCC_SetFlashLatency+0xe8>)
 8008874:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8008878:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800887a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800887e:	4a35      	ldr	r2, [pc, #212]	; (8008954 <RCC_SetFlashLatency+0xec>)
 8008880:	f107 031c 	add.w	r3, r7, #28
 8008884:	ca07      	ldmia	r2, {r0, r1, r2}
 8008886:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800888a:	4b33      	ldr	r3, [pc, #204]	; (8008958 <RCC_SetFlashLatency+0xf0>)
 800888c:	f107 040c 	add.w	r4, r7, #12
 8008890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008892:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008896:	2300      	movs	r3, #0
 8008898:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088a0:	d11a      	bne.n	80088d8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80088a2:	2300      	movs	r3, #0
 80088a4:	643b      	str	r3, [r7, #64]	; 0x40
 80088a6:	e013      	b.n	80088d0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80088a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	3348      	adds	r3, #72	; 0x48
 80088ae:	443b      	add	r3, r7
 80088b0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d807      	bhi.n	80088ca <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80088ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	3348      	adds	r3, #72	; 0x48
 80088c0:	443b      	add	r3, r7
 80088c2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80088c6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80088c8:	e020      	b.n	800890c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80088ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088cc:	3301      	adds	r3, #1
 80088ce:	643b      	str	r3, [r7, #64]	; 0x40
 80088d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d9e8      	bls.n	80088a8 <RCC_SetFlashLatency+0x40>
 80088d6:	e019      	b.n	800890c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80088d8:	2300      	movs	r3, #0
 80088da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088dc:	e013      	b.n	8008906 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80088de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	3348      	adds	r3, #72	; 0x48
 80088e4:	443b      	add	r3, r7
 80088e6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d807      	bhi.n	8008900 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80088f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	3348      	adds	r3, #72	; 0x48
 80088f6:	443b      	add	r3, r7
 80088f8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80088fc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80088fe:	e005      	b.n	800890c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008902:	3301      	adds	r3, #1
 8008904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008908:	2b02      	cmp	r3, #2
 800890a:	d9e8      	bls.n	80088de <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800890c:	4b13      	ldr	r3, [pc, #76]	; (800895c <RCC_SetFlashLatency+0xf4>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f023 0207 	bic.w	r2, r3, #7
 8008914:	4911      	ldr	r1, [pc, #68]	; (800895c <RCC_SetFlashLatency+0xf4>)
 8008916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008918:	4313      	orrs	r3, r2
 800891a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800891c:	f7fb fe1a 	bl	8004554 <HAL_GetTick>
 8008920:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008922:	e008      	b.n	8008936 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008924:	f7fb fe16 	bl	8004554 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	2b02      	cmp	r3, #2
 8008930:	d901      	bls.n	8008936 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e007      	b.n	8008946 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008936:	4b09      	ldr	r3, [pc, #36]	; (800895c <RCC_SetFlashLatency+0xf4>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008940:	429a      	cmp	r2, r3
 8008942:	d1ef      	bne.n	8008924 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	374c      	adds	r7, #76	; 0x4c
 800894a:	46bd      	mov	sp, r7
 800894c:	bd90      	pop	{r4, r7, pc}
 800894e:	bf00      	nop
 8008950:	0801423c 	.word	0x0801423c
 8008954:	0801424c 	.word	0x0801424c
 8008958:	08014258 	.word	0x08014258
 800895c:	58004000 	.word	0x58004000

08008960 <LL_RCC_LSE_IsEnabled>:
{
 8008960:	b480      	push	{r7}
 8008962:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	2b01      	cmp	r3, #1
 8008972:	d101      	bne.n	8008978 <LL_RCC_LSE_IsEnabled+0x18>
 8008974:	2301      	movs	r3, #1
 8008976:	e000      	b.n	800897a <LL_RCC_LSE_IsEnabled+0x1a>
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <LL_RCC_LSE_IsReady>:
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800898c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008990:	f003 0302 	and.w	r3, r3, #2
 8008994:	2b02      	cmp	r3, #2
 8008996:	d101      	bne.n	800899c <LL_RCC_LSE_IsReady+0x18>
 8008998:	2301      	movs	r3, #1
 800899a:	e000      	b.n	800899e <LL_RCC_LSE_IsReady+0x1a>
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <LL_RCC_MSI_EnablePLLMode>:
{
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80089ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089b6:	f043 0304 	orr.w	r3, r3, #4
 80089ba:	6013      	str	r3, [r2, #0]
}
 80089bc:	bf00      	nop
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <LL_RCC_SetRFWKPClockSource>:
{
 80089c6:	b480      	push	{r7}
 80089c8:	b083      	sub	sp, #12
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80089ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80089da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80089e6:	bf00      	nop
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <LL_RCC_SetSMPSClockSource>:
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80089fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	f023 0203 	bic.w	r2, r3, #3
 8008a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <LL_RCC_SetSMPSPrescaler>:
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <LL_RCC_SetUSARTClockSource>:
{
 8008a42:	b480      	push	{r7}
 8008a44:	b083      	sub	sp, #12
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a52:	f023 0203 	bic.w	r2, r3, #3
 8008a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008a62:	bf00      	nop
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <LL_RCC_SetLPUARTClockSource>:
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008a8e:	bf00      	nop
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <LL_RCC_SetI2CClockSource>:
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aa6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	091b      	lsrs	r3, r3, #4
 8008aae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008ab2:	43db      	mvns	r3, r3
 8008ab4:	401a      	ands	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	011b      	lsls	r3, r3, #4
 8008aba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <LL_RCC_SetLPTIMClockSource>:
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ae0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	0c1b      	lsrs	r3, r3, #16
 8008ae8:	041b      	lsls	r3, r3, #16
 8008aea:	43db      	mvns	r3, r3
 8008aec:	401a      	ands	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	041b      	lsls	r3, r3, #16
 8008af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008af6:	4313      	orrs	r3, r2
 8008af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <LL_RCC_SetSAIClockSource>:
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008b1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <LL_RCC_SetRNGClockSource>:
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b44:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <LL_RCC_SetCLK48ClockSource>:
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008b74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <LL_RCC_SetUSBClockSource>:
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7ff ffe3 	bl	8008b60 <LL_RCC_SetCLK48ClockSource>
}
 8008b9a:	bf00      	nop
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <LL_RCC_SetADCClockSource>:
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b083      	sub	sp, #12
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <LL_RCC_SetRTCClockSource>:
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008bee:	bf00      	nop
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <LL_RCC_GetRTCClockSource>:
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <LL_RCC_ForceBackupDomainReset>:
{
 8008c14:	b480      	push	{r7}
 8008c16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008c2c:	bf00      	nop
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008c36:	b480      	push	{r7}
 8008c38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008c4e:	bf00      	nop
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <LL_RCC_PLLSAI1_Enable>:
{
 8008c58:	b480      	push	{r7}
 8008c5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c6a:	6013      	str	r3, [r2, #0]
}
 8008c6c:	bf00      	nop
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <LL_RCC_PLLSAI1_Disable>:
{
 8008c76:	b480      	push	{r7}
 8008c78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c88:	6013      	str	r3, [r2, #0]
}
 8008c8a:	bf00      	nop
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <LL_RCC_PLLSAI1_IsReady>:
{
 8008c94:	b480      	push	{r7}
 8008c96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ca6:	d101      	bne.n	8008cac <LL_RCC_PLLSAI1_IsReady+0x18>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e000      	b.n	8008cae <LL_RCC_PLLSAI1_IsReady+0x1a>
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <LL_APB1_GRP1_ForceReset>:
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8008cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	638b      	str	r3, [r1, #56]	; 0x38
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <LL_APB1_GRP1_ReleaseReset>:
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8008ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	43db      	mvns	r3, r3
 8008cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	638b      	str	r3, [r1, #56]	; 0x38
}
 8008cf6:	bf00      	nop
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b088      	sub	sp, #32
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008d0e:	2300      	movs	r3, #0
 8008d10:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d034      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008d26:	d021      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8008d28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008d2c:	d81b      	bhi.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d32:	d01d      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008d34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d38:	d815      	bhi.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00b      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d42:	d110      	bne.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d52:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008d54:	e00d      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	3304      	adds	r3, #4
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 f988 	bl	8009070 <RCCEx_PLLSAI1_ConfigNP>
 8008d60:	4603      	mov	r3, r0
 8008d62:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008d64:	e005      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	77fb      	strb	r3, [r7, #31]
        break;
 8008d6a:	e002      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008d6c:	bf00      	nop
 8008d6e:	e000      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d72:	7ffb      	ldrb	r3, [r7, #31]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d105      	bne.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7ff fec3 	bl	8008b08 <LL_RCC_SetSAIClockSource>
 8008d82:	e001      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d84:	7ffb      	ldrb	r3, [r7, #31]
 8008d86:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d046      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008d94:	f7ff ff31 	bl	8008bfa <LL_RCC_GetRTCClockSource>
 8008d98:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d03c      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008da4:	f7fe fc68 	bl	8007678 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d105      	bne.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7ff ff0b 	bl	8008bce <LL_RCC_SetRTCClockSource>
 8008db8:	e02e      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dc2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008dc4:	f7ff ff26 	bl	8008c14 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008dc8:	f7ff ff35 	bl	8008c36 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008de4:	f7ff fdbc 	bl	8008960 <LL_RCC_LSE_IsEnabled>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d114      	bne.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008dee:	f7fb fbb1 	bl	8004554 <HAL_GetTick>
 8008df2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008df4:	e00b      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008df6:	f7fb fbad 	bl	8004554 <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d902      	bls.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	77fb      	strb	r3, [r7, #31]
              break;
 8008e0c:	e004      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008e0e:	f7ff fdb9 	bl	8008984 <LL_RCC_LSE_IsReady>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d1ee      	bne.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008e18:	7ffb      	ldrb	r3, [r7, #31]
 8008e1a:	77bb      	strb	r3, [r7, #30]
 8008e1c:	e001      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e1e:	7ffb      	ldrb	r3, [r7, #31]
 8008e20:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d004      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7ff fe05 	bl	8008a42 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0302 	and.w	r3, r3, #2
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d004      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff fe10 	bl	8008a6e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0310 	and.w	r3, r3, #16
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d004      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7ff fe38 	bl	8008ad4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0320 	and.w	r3, r3, #32
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d004      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7ff fe2d 	bl	8008ad4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0304 	and.w	r3, r3, #4
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d004      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7ff fe05 	bl	8008a9a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0308 	and.w	r3, r3, #8
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d004      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7ff fdfa 	bl	8008a9a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d022      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7ff fe68 	bl	8008b8c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ec4:	d107      	bne.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ed0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ed4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ede:	d10b      	bne.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 f91e 	bl	8009126 <RCCEx_PLLSAI1_ConfigNQ>
 8008eea:	4603      	mov	r3, r0
 8008eec:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008eee:	7ffb      	ldrb	r3, [r7, #31]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8008ef4:	7ffb      	ldrb	r3, [r7, #31]
 8008ef6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d02b      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0c:	d008      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f16:	d003      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d105      	bne.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7ff fe05 	bl	8008b34 <LL_RCC_SetRNGClockSource>
 8008f2a:	e00a      	b.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f34:	60fb      	str	r3, [r7, #12]
 8008f36:	2000      	movs	r0, #0
 8008f38:	f7ff fdfc 	bl	8008b34 <LL_RCC_SetRNGClockSource>
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f7ff fe0f 	bl	8008b60 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008f4a:	d107      	bne.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d022      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7ff fe18 	bl	8008ba2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f7a:	d107      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f8a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f94:	d10b      	bne.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	3304      	adds	r3, #4
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 f91e 	bl	80091dc <RCCEx_PLLSAI1_ConfigNR>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008fa4:	7ffb      	ldrb	r3, [r7, #31]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008faa:	7ffb      	ldrb	r3, [r7, #31]
 8008fac:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d004      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7ff fd01 	bl	80089c6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d009      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff fd20 	bl	8008a1a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7ff fd07 	bl	80089f2 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8008fe4:	7fbb      	ldrb	r3, [r7, #30]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3720      	adds	r7, #32
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8008ff2:	f7ff fcd9 	bl	80089a8 <LL_RCC_MSI_EnablePLLMode>
}
 8008ff6:	bf00      	nop
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8009004:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8009008:	f7ff fe56 	bl	8008cb8 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 800900c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8009010:	f7ff fe64 	bl	8008cdc <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	431a      	orrs	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	4313      	orrs	r3, r2
 800902e:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	041b      	lsls	r3, r3, #16
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	4313      	orrs	r3, r2
 800903a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800903c:	4a0b      	ldr	r2, [pc, #44]	; (800906c <HAL_RCCEx_CRSConfig+0x70>)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8009042:	4b0a      	ldr	r3, [pc, #40]	; (800906c <HAL_RCCEx_CRSConfig+0x70>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	021b      	lsls	r3, r3, #8
 8009050:	4906      	ldr	r1, [pc, #24]	; (800906c <HAL_RCCEx_CRSConfig+0x70>)
 8009052:	4313      	orrs	r3, r2
 8009054:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8009056:	4b05      	ldr	r3, [pc, #20]	; (800906c <HAL_RCCEx_CRSConfig+0x70>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a04      	ldr	r2, [pc, #16]	; (800906c <HAL_RCCEx_CRSConfig+0x70>)
 800905c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009060:	6013      	str	r3, [r2, #0]
}
 8009062:	bf00      	nop
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	40006000 	.word	0x40006000

08009070 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800907c:	f7ff fdfb 	bl	8008c76 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009080:	f7fb fa68 	bl	8004554 <HAL_GetTick>
 8009084:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009086:	e009      	b.n	800909c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009088:	f7fb fa64 	bl	8004554 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	2b02      	cmp	r3, #2
 8009094:	d902      	bls.n	800909c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	73fb      	strb	r3, [r7, #15]
      break;
 800909a:	e004      	b.n	80090a6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800909c:	f7ff fdfa 	bl	8008c94 <LL_RCC_PLLSAI1_IsReady>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1f0      	bne.n	8009088 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d137      	bne.n	800911c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80090ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	021b      	lsls	r3, r3, #8
 80090bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80090c0:	4313      	orrs	r3, r2
 80090c2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80090c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80090d6:	4313      	orrs	r3, r2
 80090d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80090da:	f7ff fdbd 	bl	8008c58 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090de:	f7fb fa39 	bl	8004554 <HAL_GetTick>
 80090e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80090e4:	e009      	b.n	80090fa <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80090e6:	f7fb fa35 	bl	8004554 <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d902      	bls.n	80090fa <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	73fb      	strb	r3, [r7, #15]
        break;
 80090f8:	e004      	b.n	8009104 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80090fa:	f7ff fdcb 	bl	8008c94 <LL_RCC_PLLSAI1_IsReady>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b01      	cmp	r3, #1
 8009102:	d1f0      	bne.n	80090e6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8009104:	7bfb      	ldrb	r3, [r7, #15]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d108      	bne.n	800911c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800910a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800910e:	691a      	ldr	r2, [r3, #16]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009118:	4313      	orrs	r3, r2
 800911a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800911c:	7bfb      	ldrb	r3, [r7, #15]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b084      	sub	sp, #16
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009132:	f7ff fda0 	bl	8008c76 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009136:	f7fb fa0d 	bl	8004554 <HAL_GetTick>
 800913a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800913c:	e009      	b.n	8009152 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800913e:	f7fb fa09 	bl	8004554 <HAL_GetTick>
 8009142:	4602      	mov	r2, r0
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	2b02      	cmp	r3, #2
 800914a:	d902      	bls.n	8009152 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	73fb      	strb	r3, [r7, #15]
      break;
 8009150:	e004      	b.n	800915c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009152:	f7ff fd9f 	bl	8008c94 <LL_RCC_PLLSAI1_IsReady>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1f0      	bne.n	800913e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800915c:	7bfb      	ldrb	r3, [r7, #15]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d137      	bne.n	80091d2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	021b      	lsls	r3, r3, #8
 8009172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009176:	4313      	orrs	r3, r2
 8009178:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800917a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800918c:	4313      	orrs	r3, r2
 800918e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009190:	f7ff fd62 	bl	8008c58 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009194:	f7fb f9de 	bl	8004554 <HAL_GetTick>
 8009198:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800919a:	e009      	b.n	80091b0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800919c:	f7fb f9da 	bl	8004554 <HAL_GetTick>
 80091a0:	4602      	mov	r2, r0
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d902      	bls.n	80091b0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	73fb      	strb	r3, [r7, #15]
        break;
 80091ae:	e004      	b.n	80091ba <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80091b0:	f7ff fd70 	bl	8008c94 <LL_RCC_PLLSAI1_IsReady>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d1f0      	bne.n	800919c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d108      	bne.n	80091d2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80091c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091c4:	691a      	ldr	r2, [r3, #16]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091ce:	4313      	orrs	r3, r2
 80091d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80091e8:	f7ff fd45 	bl	8008c76 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80091ec:	f7fb f9b2 	bl	8004554 <HAL_GetTick>
 80091f0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80091f2:	e009      	b.n	8009208 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80091f4:	f7fb f9ae 	bl	8004554 <HAL_GetTick>
 80091f8:	4602      	mov	r2, r0
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d902      	bls.n	8009208 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	73fb      	strb	r3, [r7, #15]
      break;
 8009206:	e004      	b.n	8009212 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009208:	f7ff fd44 	bl	8008c94 <LL_RCC_PLLSAI1_IsReady>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1f0      	bne.n	80091f4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009212:	7bfb      	ldrb	r3, [r7, #15]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d137      	bne.n	8009288 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	021b      	lsls	r3, r3, #8
 8009228:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800922c:	4313      	orrs	r3, r2
 800922e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8009230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009242:	4313      	orrs	r3, r2
 8009244:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009246:	f7ff fd07 	bl	8008c58 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800924a:	f7fb f983 	bl	8004554 <HAL_GetTick>
 800924e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009250:	e009      	b.n	8009266 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009252:	f7fb f97f 	bl	8004554 <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	2b02      	cmp	r3, #2
 800925e:	d902      	bls.n	8009266 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	73fb      	strb	r3, [r7, #15]
        break;
 8009264:	e004      	b.n	8009270 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009266:	f7ff fd15 	bl	8008c94 <LL_RCC_PLLSAI1_IsReady>
 800926a:	4603      	mov	r3, r0
 800926c:	2b01      	cmp	r3, #1
 800926e:	d1f0      	bne.n	8009252 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d108      	bne.n	8009288 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800927a:	691a      	ldr	r2, [r3, #16]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009284:	4313      	orrs	r3, r2
 8009286:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009288:	7bfb      	ldrb	r3, [r7, #15]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
	...

08009294 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e09f      	b.n	80093e6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d106      	bne.n	80092c0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7fa fe76 	bl	8003fac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80092c8:	4b49      	ldr	r3, [pc, #292]	; (80093f0 <HAL_RTC_Init+0x15c>)
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	f003 0310 	and.w	r3, r3, #16
 80092d0:	2b10      	cmp	r3, #16
 80092d2:	d07e      	beq.n	80093d2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	22ca      	movs	r2, #202	; 0xca
 80092da:	625a      	str	r2, [r3, #36]	; 0x24
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2253      	movs	r2, #83	; 0x53
 80092e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f8ab 	bl	8009440 <RTC_EnterInitMode>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00a      	beq.n	8009306 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	22ff      	movs	r2, #255	; 0xff
 80092f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2204      	movs	r2, #4
 80092fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	73fb      	strb	r3, [r7, #15]
 8009304:	e067      	b.n	80093d6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	6812      	ldr	r2, [r2, #0]
 8009310:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009318:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6899      	ldr	r1, [r3, #8]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	431a      	orrs	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	431a      	orrs	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	68d2      	ldr	r2, [r2, #12]
 8009340:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6919      	ldr	r1, [r3, #16]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	041a      	lsls	r2, r3, #16
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68da      	ldr	r2, [r3, #12]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009364:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0203 	bic.w	r2, r2, #3
 8009374:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	69da      	ldr	r2, [r3, #28]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	431a      	orrs	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	f003 0320 	and.w	r3, r3, #32
 8009398:	2b00      	cmp	r3, #0
 800939a:	d113      	bne.n	80093c4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f829 	bl	80093f4 <HAL_RTC_WaitForSynchro>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00d      	beq.n	80093c4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	22ff      	movs	r2, #255	; 0xff
 80093ae:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2204      	movs	r2, #4
 80093b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e010      	b.n	80093e6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	22ff      	movs	r2, #255	; 0xff
 80093ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73fb      	strb	r3, [r7, #15]
 80093d0:	e001      	b.n	80093d6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d103      	bne.n	80093e4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	40002800 	.word	0x40002800

080093f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800940a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800940c:	f7fb f8a2 	bl	8004554 <HAL_GetTick>
 8009410:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009412:	e009      	b.n	8009428 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009414:	f7fb f89e 	bl	8004554 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009422:	d901      	bls.n	8009428 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e007      	b.n	8009438 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f003 0320 	and.w	r3, r3, #32
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0ee      	beq.n	8009414 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009452:	2b00      	cmp	r3, #0
 8009454:	d119      	bne.n	800948a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f04f 32ff 	mov.w	r2, #4294967295
 800945e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009460:	f7fb f878 	bl	8004554 <HAL_GetTick>
 8009464:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009466:	e009      	b.n	800947c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009468:	f7fb f874 	bl	8004554 <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009476:	d901      	bls.n	800947c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e007      	b.n	800948c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0ee      	beq.n	8009468 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d101      	bne.n	80094ae <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80094aa:	2302      	movs	r3, #2
 80094ac:	e0a8      	b.n	8009600 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2202      	movs	r2, #2
 80094ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	22ca      	movs	r2, #202	; 0xca
 80094c4:	625a      	str	r2, [r3, #36]	; 0x24
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2253      	movs	r2, #83	; 0x53
 80094cc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d020      	beq.n	800951e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80094dc:	f7fb f83a 	bl	8004554 <HAL_GetTick>
 80094e0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80094e2:	e015      	b.n	8009510 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80094e4:	f7fb f836 	bl	8004554 <HAL_GetTick>
 80094e8:	4602      	mov	r2, r0
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094f2:	d90d      	bls.n	8009510 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	22ff      	movs	r2, #255	; 0xff
 80094fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2203      	movs	r2, #3
 8009500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e077      	b.n	8009600 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	f003 0304 	and.w	r3, r3, #4
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e2      	bne.n	80094e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689a      	ldr	r2, [r3, #8]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800952c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	b2da      	uxtb	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800953e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009540:	f7fb f808 	bl	8004554 <HAL_GetTick>
 8009544:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009546:	e015      	b.n	8009574 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009548:	f7fb f804 	bl	8004554 <HAL_GetTick>
 800954c:	4602      	mov	r2, r0
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009556:	d90d      	bls.n	8009574 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	22ff      	movs	r2, #255	; 0xff
 800955e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2203      	movs	r2, #3
 8009564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8009570:	2303      	movs	r3, #3
 8009572:	e045      	b.n	8009600 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	f003 0304 	and.w	r3, r3, #4
 800957e:	2b00      	cmp	r3, #0
 8009580:	d0e2      	beq.n	8009548 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f022 0207 	bic.w	r2, r2, #7
 8009598:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6899      	ldr	r1, [r3, #8]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80095aa:	4b17      	ldr	r3, [pc, #92]	; (8009608 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80095ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095b0:	4a15      	ldr	r2, [pc, #84]	; (8009608 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80095b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80095ba:	4b13      	ldr	r3, [pc, #76]	; (8009608 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a12      	ldr	r2, [pc, #72]	; (8009608 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80095c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095c4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689a      	ldr	r2, [r3, #8]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095d4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689a      	ldr	r2, [r3, #8]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80095e4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	22ff      	movs	r2, #255	; 0xff
 80095ec:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	58000800 	.word	0x58000800

0800960c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e049      	b.n	80096b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b00      	cmp	r3, #0
 8009628:	d106      	bne.n	8009638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f7fa fea6 	bl	8004384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2202      	movs	r2, #2
 800963c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3304      	adds	r3, #4
 8009648:	4619      	mov	r1, r3
 800964a:	4610      	mov	r0, r2
 800964c:	f000 fb96 	bl	8009d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
	...

080096bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d001      	beq.n	80096d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e02e      	b.n	8009732 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2202      	movs	r2, #2
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a17      	ldr	r2, [pc, #92]	; (8009740 <HAL_TIM_Base_Start+0x84>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d004      	beq.n	80096f0 <HAL_TIM_Base_Start+0x34>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ee:	d115      	bne.n	800971c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689a      	ldr	r2, [r3, #8]
 80096f6:	4b13      	ldr	r3, [pc, #76]	; (8009744 <HAL_TIM_Base_Start+0x88>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b06      	cmp	r3, #6
 8009700:	d015      	beq.n	800972e <HAL_TIM_Base_Start+0x72>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009708:	d011      	beq.n	800972e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f042 0201 	orr.w	r2, r2, #1
 8009718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800971a:	e008      	b.n	800972e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f042 0201 	orr.w	r2, r2, #1
 800972a:	601a      	str	r2, [r3, #0]
 800972c:	e000      	b.n	8009730 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800972e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	40012c00 	.word	0x40012c00
 8009744:	00010007 	.word	0x00010007

08009748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e049      	b.n	80097ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f841 	bl	80097f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2202      	movs	r2, #2
 8009778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3304      	adds	r3, #4
 8009784:	4619      	mov	r1, r3
 8009786:	4610      	mov	r0, r2
 8009788:	f000 faf8 	bl	8009d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80097fe:	bf00      	nop
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
	...

0800980c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d109      	bne.n	8009830 <HAL_TIM_PWM_Start+0x24>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b01      	cmp	r3, #1
 8009826:	bf14      	ite	ne
 8009828:	2301      	movne	r3, #1
 800982a:	2300      	moveq	r3, #0
 800982c:	b2db      	uxtb	r3, r3
 800982e:	e03c      	b.n	80098aa <HAL_TIM_PWM_Start+0x9e>
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b04      	cmp	r3, #4
 8009834:	d109      	bne.n	800984a <HAL_TIM_PWM_Start+0x3e>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b01      	cmp	r3, #1
 8009840:	bf14      	ite	ne
 8009842:	2301      	movne	r3, #1
 8009844:	2300      	moveq	r3, #0
 8009846:	b2db      	uxtb	r3, r3
 8009848:	e02f      	b.n	80098aa <HAL_TIM_PWM_Start+0x9e>
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	2b08      	cmp	r3, #8
 800984e:	d109      	bne.n	8009864 <HAL_TIM_PWM_Start+0x58>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2b01      	cmp	r3, #1
 800985a:	bf14      	ite	ne
 800985c:	2301      	movne	r3, #1
 800985e:	2300      	moveq	r3, #0
 8009860:	b2db      	uxtb	r3, r3
 8009862:	e022      	b.n	80098aa <HAL_TIM_PWM_Start+0x9e>
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2b0c      	cmp	r3, #12
 8009868:	d109      	bne.n	800987e <HAL_TIM_PWM_Start+0x72>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b01      	cmp	r3, #1
 8009874:	bf14      	ite	ne
 8009876:	2301      	movne	r3, #1
 8009878:	2300      	moveq	r3, #0
 800987a:	b2db      	uxtb	r3, r3
 800987c:	e015      	b.n	80098aa <HAL_TIM_PWM_Start+0x9e>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b10      	cmp	r3, #16
 8009882:	d109      	bne.n	8009898 <HAL_TIM_PWM_Start+0x8c>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b01      	cmp	r3, #1
 800988e:	bf14      	ite	ne
 8009890:	2301      	movne	r3, #1
 8009892:	2300      	moveq	r3, #0
 8009894:	b2db      	uxtb	r3, r3
 8009896:	e008      	b.n	80098aa <HAL_TIM_PWM_Start+0x9e>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	bf14      	ite	ne
 80098a4:	2301      	movne	r3, #1
 80098a6:	2300      	moveq	r3, #0
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e079      	b.n	80099a6 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d104      	bne.n	80098c2 <HAL_TIM_PWM_Start+0xb6>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2202      	movs	r2, #2
 80098bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098c0:	e023      	b.n	800990a <HAL_TIM_PWM_Start+0xfe>
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	d104      	bne.n	80098d2 <HAL_TIM_PWM_Start+0xc6>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2202      	movs	r2, #2
 80098cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098d0:	e01b      	b.n	800990a <HAL_TIM_PWM_Start+0xfe>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b08      	cmp	r3, #8
 80098d6:	d104      	bne.n	80098e2 <HAL_TIM_PWM_Start+0xd6>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2202      	movs	r2, #2
 80098dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098e0:	e013      	b.n	800990a <HAL_TIM_PWM_Start+0xfe>
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b0c      	cmp	r3, #12
 80098e6:	d104      	bne.n	80098f2 <HAL_TIM_PWM_Start+0xe6>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2202      	movs	r2, #2
 80098ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098f0:	e00b      	b.n	800990a <HAL_TIM_PWM_Start+0xfe>
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b10      	cmp	r3, #16
 80098f6:	d104      	bne.n	8009902 <HAL_TIM_PWM_Start+0xf6>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009900:	e003      	b.n	800990a <HAL_TIM_PWM_Start+0xfe>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2202      	movs	r2, #2
 8009906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2201      	movs	r2, #1
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	4618      	mov	r0, r3
 8009914:	f000 fdbc 	bl	800a490 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a24      	ldr	r2, [pc, #144]	; (80099b0 <HAL_TIM_PWM_Start+0x1a4>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d009      	beq.n	8009936 <HAL_TIM_PWM_Start+0x12a>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a23      	ldr	r2, [pc, #140]	; (80099b4 <HAL_TIM_PWM_Start+0x1a8>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d004      	beq.n	8009936 <HAL_TIM_PWM_Start+0x12a>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a21      	ldr	r2, [pc, #132]	; (80099b8 <HAL_TIM_PWM_Start+0x1ac>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d101      	bne.n	800993a <HAL_TIM_PWM_Start+0x12e>
 8009936:	2301      	movs	r3, #1
 8009938:	e000      	b.n	800993c <HAL_TIM_PWM_Start+0x130>
 800993a:	2300      	movs	r3, #0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d007      	beq.n	8009950 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800994e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a16      	ldr	r2, [pc, #88]	; (80099b0 <HAL_TIM_PWM_Start+0x1a4>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d004      	beq.n	8009964 <HAL_TIM_PWM_Start+0x158>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009962:	d115      	bne.n	8009990 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689a      	ldr	r2, [r3, #8]
 800996a:	4b14      	ldr	r3, [pc, #80]	; (80099bc <HAL_TIM_PWM_Start+0x1b0>)
 800996c:	4013      	ands	r3, r2
 800996e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2b06      	cmp	r3, #6
 8009974:	d015      	beq.n	80099a2 <HAL_TIM_PWM_Start+0x196>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800997c:	d011      	beq.n	80099a2 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f042 0201 	orr.w	r2, r2, #1
 800998c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800998e:	e008      	b.n	80099a2 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f042 0201 	orr.w	r2, r2, #1
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	e000      	b.n	80099a4 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	40012c00 	.word	0x40012c00
 80099b4:	40014400 	.word	0x40014400
 80099b8:	40014800 	.word	0x40014800
 80099bc:	00010007 	.word	0x00010007

080099c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d101      	bne.n	80099de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099da:	2302      	movs	r3, #2
 80099dc:	e0ff      	b.n	8009bde <HAL_TIM_PWM_ConfigChannel+0x21e>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b14      	cmp	r3, #20
 80099ea:	f200 80f0 	bhi.w	8009bce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80099ee:	a201      	add	r2, pc, #4	; (adr r2, 80099f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80099f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f4:	08009a49 	.word	0x08009a49
 80099f8:	08009bcf 	.word	0x08009bcf
 80099fc:	08009bcf 	.word	0x08009bcf
 8009a00:	08009bcf 	.word	0x08009bcf
 8009a04:	08009a89 	.word	0x08009a89
 8009a08:	08009bcf 	.word	0x08009bcf
 8009a0c:	08009bcf 	.word	0x08009bcf
 8009a10:	08009bcf 	.word	0x08009bcf
 8009a14:	08009acb 	.word	0x08009acb
 8009a18:	08009bcf 	.word	0x08009bcf
 8009a1c:	08009bcf 	.word	0x08009bcf
 8009a20:	08009bcf 	.word	0x08009bcf
 8009a24:	08009b0b 	.word	0x08009b0b
 8009a28:	08009bcf 	.word	0x08009bcf
 8009a2c:	08009bcf 	.word	0x08009bcf
 8009a30:	08009bcf 	.word	0x08009bcf
 8009a34:	08009b4d 	.word	0x08009b4d
 8009a38:	08009bcf 	.word	0x08009bcf
 8009a3c:	08009bcf 	.word	0x08009bcf
 8009a40:	08009bcf 	.word	0x08009bcf
 8009a44:	08009b8d 	.word	0x08009b8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68b9      	ldr	r1, [r7, #8]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 fa04 	bl	8009e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699a      	ldr	r2, [r3, #24]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f042 0208 	orr.w	r2, r2, #8
 8009a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	699a      	ldr	r2, [r3, #24]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f022 0204 	bic.w	r2, r2, #4
 8009a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6999      	ldr	r1, [r3, #24]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	691a      	ldr	r2, [r3, #16]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	619a      	str	r2, [r3, #24]
      break;
 8009a86:	e0a5      	b.n	8009bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68b9      	ldr	r1, [r7, #8]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 fa60 	bl	8009f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	699a      	ldr	r2, [r3, #24]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	699a      	ldr	r2, [r3, #24]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6999      	ldr	r1, [r3, #24]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	021a      	lsls	r2, r3, #8
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	619a      	str	r2, [r3, #24]
      break;
 8009ac8:	e084      	b.n	8009bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 fab9 	bl	800a048 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	69da      	ldr	r2, [r3, #28]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f042 0208 	orr.w	r2, r2, #8
 8009ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	69da      	ldr	r2, [r3, #28]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f022 0204 	bic.w	r2, r2, #4
 8009af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	69d9      	ldr	r1, [r3, #28]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	691a      	ldr	r2, [r3, #16]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	61da      	str	r2, [r3, #28]
      break;
 8009b08:	e064      	b.n	8009bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 fb11 	bl	800a138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	69da      	ldr	r2, [r3, #28]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	69da      	ldr	r2, [r3, #28]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69d9      	ldr	r1, [r3, #28]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	021a      	lsls	r2, r3, #8
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	61da      	str	r2, [r3, #28]
      break;
 8009b4a:	e043      	b.n	8009bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68b9      	ldr	r1, [r7, #8]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 fb4e 	bl	800a1f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f042 0208 	orr.w	r2, r2, #8
 8009b66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 0204 	bic.w	r2, r2, #4
 8009b76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	691a      	ldr	r2, [r3, #16]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	430a      	orrs	r2, r1
 8009b88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b8a:	e023      	b.n	8009bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68b9      	ldr	r1, [r7, #8]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f000 fb86 	bl	800a2a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ba6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	021a      	lsls	r2, r3, #8
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009bcc:	e002      	b.n	8009bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8009bd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop

08009be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d101      	bne.n	8009c04 <HAL_TIM_ConfigClockSource+0x1c>
 8009c00:	2302      	movs	r3, #2
 8009c02:	e0b6      	b.n	8009d72 <HAL_TIM_ConfigClockSource+0x18a>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009c22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c40:	d03e      	beq.n	8009cc0 <HAL_TIM_ConfigClockSource+0xd8>
 8009c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c46:	f200 8087 	bhi.w	8009d58 <HAL_TIM_ConfigClockSource+0x170>
 8009c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c4e:	f000 8086 	beq.w	8009d5e <HAL_TIM_ConfigClockSource+0x176>
 8009c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c56:	d87f      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x170>
 8009c58:	2b70      	cmp	r3, #112	; 0x70
 8009c5a:	d01a      	beq.n	8009c92 <HAL_TIM_ConfigClockSource+0xaa>
 8009c5c:	2b70      	cmp	r3, #112	; 0x70
 8009c5e:	d87b      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x170>
 8009c60:	2b60      	cmp	r3, #96	; 0x60
 8009c62:	d050      	beq.n	8009d06 <HAL_TIM_ConfigClockSource+0x11e>
 8009c64:	2b60      	cmp	r3, #96	; 0x60
 8009c66:	d877      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x170>
 8009c68:	2b50      	cmp	r3, #80	; 0x50
 8009c6a:	d03c      	beq.n	8009ce6 <HAL_TIM_ConfigClockSource+0xfe>
 8009c6c:	2b50      	cmp	r3, #80	; 0x50
 8009c6e:	d873      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x170>
 8009c70:	2b40      	cmp	r3, #64	; 0x40
 8009c72:	d058      	beq.n	8009d26 <HAL_TIM_ConfigClockSource+0x13e>
 8009c74:	2b40      	cmp	r3, #64	; 0x40
 8009c76:	d86f      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x170>
 8009c78:	2b30      	cmp	r3, #48	; 0x30
 8009c7a:	d064      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0x15e>
 8009c7c:	2b30      	cmp	r3, #48	; 0x30
 8009c7e:	d86b      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x170>
 8009c80:	2b20      	cmp	r3, #32
 8009c82:	d060      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0x15e>
 8009c84:	2b20      	cmp	r3, #32
 8009c86:	d867      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x170>
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d05c      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0x15e>
 8009c8c:	2b10      	cmp	r3, #16
 8009c8e:	d05a      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0x15e>
 8009c90:	e062      	b.n	8009d58 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ca2:	f000 fbd5 	bl	800a450 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009cb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	609a      	str	r2, [r3, #8]
      break;
 8009cbe:	e04f      	b.n	8009d60 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009cd0:	f000 fbbe 	bl	800a450 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	689a      	ldr	r2, [r3, #8]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ce2:	609a      	str	r2, [r3, #8]
      break;
 8009ce4:	e03c      	b.n	8009d60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f000 fb30 	bl	800a358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2150      	movs	r1, #80	; 0x50
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 fb89 	bl	800a416 <TIM_ITRx_SetConfig>
      break;
 8009d04:	e02c      	b.n	8009d60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d12:	461a      	mov	r2, r3
 8009d14:	f000 fb4f 	bl	800a3b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2160      	movs	r1, #96	; 0x60
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 fb79 	bl	800a416 <TIM_ITRx_SetConfig>
      break;
 8009d24:	e01c      	b.n	8009d60 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d32:	461a      	mov	r2, r3
 8009d34:	f000 fb10 	bl	800a358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2140      	movs	r1, #64	; 0x40
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 fb69 	bl	800a416 <TIM_ITRx_SetConfig>
      break;
 8009d44:	e00c      	b.n	8009d60 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4610      	mov	r0, r2
 8009d52:	f000 fb60 	bl	800a416 <TIM_ITRx_SetConfig>
      break;
 8009d56:	e003      	b.n	8009d60 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d5c:	e000      	b.n	8009d60 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009d5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
	...

08009d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a30      	ldr	r2, [pc, #192]	; (8009e50 <TIM_Base_SetConfig+0xd4>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d003      	beq.n	8009d9c <TIM_Base_SetConfig+0x20>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d9a:	d108      	bne.n	8009dae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a27      	ldr	r2, [pc, #156]	; (8009e50 <TIM_Base_SetConfig+0xd4>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d00b      	beq.n	8009dce <TIM_Base_SetConfig+0x52>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dbc:	d007      	beq.n	8009dce <TIM_Base_SetConfig+0x52>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a24      	ldr	r2, [pc, #144]	; (8009e54 <TIM_Base_SetConfig+0xd8>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d003      	beq.n	8009dce <TIM_Base_SetConfig+0x52>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a23      	ldr	r2, [pc, #140]	; (8009e58 <TIM_Base_SetConfig+0xdc>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d108      	bne.n	8009de0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	689a      	ldr	r2, [r3, #8]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a12      	ldr	r2, [pc, #72]	; (8009e50 <TIM_Base_SetConfig+0xd4>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d007      	beq.n	8009e1c <TIM_Base_SetConfig+0xa0>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a11      	ldr	r2, [pc, #68]	; (8009e54 <TIM_Base_SetConfig+0xd8>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d003      	beq.n	8009e1c <TIM_Base_SetConfig+0xa0>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a10      	ldr	r2, [pc, #64]	; (8009e58 <TIM_Base_SetConfig+0xdc>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d103      	bne.n	8009e24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	691a      	ldr	r2, [r3, #16]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d105      	bne.n	8009e42 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	f023 0201 	bic.w	r2, r3, #1
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	611a      	str	r2, [r3, #16]
  }
}
 8009e42:	bf00      	nop
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	40012c00 	.word	0x40012c00
 8009e54:	40014400 	.word	0x40014400
 8009e58:	40014800 	.word	0x40014800

08009e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	f023 0201 	bic.w	r2, r3, #1
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f023 0303 	bic.w	r3, r3, #3
 8009e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f023 0302 	bic.w	r3, r3, #2
 8009ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a24      	ldr	r2, [pc, #144]	; (8009f48 <TIM_OC1_SetConfig+0xec>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d007      	beq.n	8009ecc <TIM_OC1_SetConfig+0x70>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a23      	ldr	r2, [pc, #140]	; (8009f4c <TIM_OC1_SetConfig+0xf0>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d003      	beq.n	8009ecc <TIM_OC1_SetConfig+0x70>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a22      	ldr	r2, [pc, #136]	; (8009f50 <TIM_OC1_SetConfig+0xf4>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d10c      	bne.n	8009ee6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	f023 0308 	bic.w	r3, r3, #8
 8009ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f023 0304 	bic.w	r3, r3, #4
 8009ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a17      	ldr	r2, [pc, #92]	; (8009f48 <TIM_OC1_SetConfig+0xec>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d007      	beq.n	8009efe <TIM_OC1_SetConfig+0xa2>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a17      	ldr	r2, [pc, #92]	; (8009f50 <TIM_OC1_SetConfig+0xf4>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d003      	beq.n	8009efe <TIM_OC1_SetConfig+0xa2>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a14      	ldr	r2, [pc, #80]	; (8009f4c <TIM_OC1_SetConfig+0xf0>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d111      	bne.n	8009f22 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	621a      	str	r2, [r3, #32]
}
 8009f3c:	bf00      	nop
 8009f3e:	371c      	adds	r7, #28
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr
 8009f48:	40012c00 	.word	0x40012c00
 8009f4c:	40014800 	.word	0x40014800
 8009f50:	40014400 	.word	0x40014400

08009f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a1b      	ldr	r3, [r3, #32]
 8009f68:	f023 0210 	bic.w	r2, r3, #16
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	021b      	lsls	r3, r3, #8
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f023 0320 	bic.w	r3, r3, #32
 8009fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	011b      	lsls	r3, r3, #4
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a22      	ldr	r2, [pc, #136]	; (800a03c <TIM_OC2_SetConfig+0xe8>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d10d      	bne.n	8009fd4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	011b      	lsls	r3, r3, #4
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a19      	ldr	r2, [pc, #100]	; (800a03c <TIM_OC2_SetConfig+0xe8>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d007      	beq.n	8009fec <TIM_OC2_SetConfig+0x98>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a18      	ldr	r2, [pc, #96]	; (800a040 <TIM_OC2_SetConfig+0xec>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d003      	beq.n	8009fec <TIM_OC2_SetConfig+0x98>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a17      	ldr	r2, [pc, #92]	; (800a044 <TIM_OC2_SetConfig+0xf0>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d113      	bne.n	800a014 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	695b      	ldr	r3, [r3, #20]
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	693a      	ldr	r2, [r7, #16]
 800a004:	4313      	orrs	r3, r2
 800a006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	699b      	ldr	r3, [r3, #24]
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	4313      	orrs	r3, r2
 800a012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	685a      	ldr	r2, [r3, #4]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	621a      	str	r2, [r3, #32]
}
 800a02e:	bf00      	nop
 800a030:	371c      	adds	r7, #28
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	40012c00 	.word	0x40012c00
 800a040:	40014400 	.word	0x40014400
 800a044:	40014800 	.word	0x40014800

0800a048 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a1b      	ldr	r3, [r3, #32]
 800a05c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a07a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f023 0303 	bic.w	r3, r3, #3
 800a082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	021b      	lsls	r3, r3, #8
 800a09c:	697a      	ldr	r2, [r7, #20]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a21      	ldr	r2, [pc, #132]	; (800a12c <TIM_OC3_SetConfig+0xe4>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d10d      	bne.n	800a0c6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	021b      	lsls	r3, r3, #8
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a18      	ldr	r2, [pc, #96]	; (800a12c <TIM_OC3_SetConfig+0xe4>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d007      	beq.n	800a0de <TIM_OC3_SetConfig+0x96>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a17      	ldr	r2, [pc, #92]	; (800a130 <TIM_OC3_SetConfig+0xe8>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d003      	beq.n	800a0de <TIM_OC3_SetConfig+0x96>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a16      	ldr	r2, [pc, #88]	; (800a134 <TIM_OC3_SetConfig+0xec>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d113      	bne.n	800a106 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	011b      	lsls	r3, r3, #4
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	011b      	lsls	r3, r3, #4
 800a100:	693a      	ldr	r2, [r7, #16]
 800a102:	4313      	orrs	r3, r2
 800a104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	697a      	ldr	r2, [r7, #20]
 800a11e:	621a      	str	r2, [r3, #32]
}
 800a120:	bf00      	nop
 800a122:	371c      	adds	r7, #28
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	40012c00 	.word	0x40012c00
 800a130:	40014400 	.word	0x40014400
 800a134:	40014800 	.word	0x40014800

0800a138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a138:	b480      	push	{r7}
 800a13a:	b087      	sub	sp, #28
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a1b      	ldr	r3, [r3, #32]
 800a14c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	69db      	ldr	r3, [r3, #28]
 800a15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a16a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	021b      	lsls	r3, r3, #8
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	031b      	lsls	r3, r3, #12
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	4313      	orrs	r3, r2
 800a192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a14      	ldr	r2, [pc, #80]	; (800a1e8 <TIM_OC4_SetConfig+0xb0>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d007      	beq.n	800a1ac <TIM_OC4_SetConfig+0x74>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a13      	ldr	r2, [pc, #76]	; (800a1ec <TIM_OC4_SetConfig+0xb4>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d003      	beq.n	800a1ac <TIM_OC4_SetConfig+0x74>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a12      	ldr	r2, [pc, #72]	; (800a1f0 <TIM_OC4_SetConfig+0xb8>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d109      	bne.n	800a1c0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	019b      	lsls	r3, r3, #6
 800a1ba:	697a      	ldr	r2, [r7, #20]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	621a      	str	r2, [r3, #32]
}
 800a1da:	bf00      	nop
 800a1dc:	371c      	adds	r7, #28
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	40012c00 	.word	0x40012c00
 800a1ec:	40014400 	.word	0x40014400
 800a1f0:	40014800 	.word	0x40014800

0800a1f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	4313      	orrs	r3, r2
 800a230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a238:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	041b      	lsls	r3, r3, #16
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	4313      	orrs	r3, r2
 800a244:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a13      	ldr	r2, [pc, #76]	; (800a298 <TIM_OC5_SetConfig+0xa4>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d007      	beq.n	800a25e <TIM_OC5_SetConfig+0x6a>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a12      	ldr	r2, [pc, #72]	; (800a29c <TIM_OC5_SetConfig+0xa8>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d003      	beq.n	800a25e <TIM_OC5_SetConfig+0x6a>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4a11      	ldr	r2, [pc, #68]	; (800a2a0 <TIM_OC5_SetConfig+0xac>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d109      	bne.n	800a272 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a264:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	021b      	lsls	r3, r3, #8
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	4313      	orrs	r3, r2
 800a270:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	685a      	ldr	r2, [r3, #4]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	621a      	str	r2, [r3, #32]
}
 800a28c:	bf00      	nop
 800a28e:	371c      	adds	r7, #28
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr
 800a298:	40012c00 	.word	0x40012c00
 800a29c:	40014400 	.word	0x40014400
 800a2a0:	40014800 	.word	0x40014800

0800a2a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	021b      	lsls	r3, r3, #8
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	051b      	lsls	r3, r3, #20
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a14      	ldr	r2, [pc, #80]	; (800a34c <TIM_OC6_SetConfig+0xa8>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d007      	beq.n	800a310 <TIM_OC6_SetConfig+0x6c>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a13      	ldr	r2, [pc, #76]	; (800a350 <TIM_OC6_SetConfig+0xac>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d003      	beq.n	800a310 <TIM_OC6_SetConfig+0x6c>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a12      	ldr	r2, [pc, #72]	; (800a354 <TIM_OC6_SetConfig+0xb0>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d109      	bne.n	800a324 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a316:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	029b      	lsls	r3, r3, #10
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	4313      	orrs	r3, r2
 800a322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	685a      	ldr	r2, [r3, #4]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	621a      	str	r2, [r3, #32]
}
 800a33e:	bf00      	nop
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	40012c00 	.word	0x40012c00
 800a350:	40014400 	.word	0x40014400
 800a354:	40014800 	.word	0x40014800

0800a358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a358:	b480      	push	{r7}
 800a35a:	b087      	sub	sp, #28
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6a1b      	ldr	r3, [r3, #32]
 800a368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	f023 0201 	bic.w	r2, r3, #1
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	011b      	lsls	r3, r3, #4
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f023 030a 	bic.w	r3, r3, #10
 800a394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	621a      	str	r2, [r3, #32]
}
 800a3aa:	bf00      	nop
 800a3ac:	371c      	adds	r7, #28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	b087      	sub	sp, #28
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	f023 0210 	bic.w	r2, r3, #16
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	031b      	lsls	r3, r3, #12
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	011b      	lsls	r3, r3, #4
 800a3f8:	697a      	ldr	r2, [r7, #20]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	621a      	str	r2, [r3, #32]
}
 800a40a:	bf00      	nop
 800a40c:	371c      	adds	r7, #28
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a416:	b480      	push	{r7}
 800a418:	b085      	sub	sp, #20
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a42c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	4313      	orrs	r3, r2
 800a438:	f043 0307 	orr.w	r3, r3, #7
 800a43c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	609a      	str	r2, [r3, #8]
}
 800a444:	bf00      	nop
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
 800a45c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a46a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	021a      	lsls	r2, r3, #8
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	431a      	orrs	r2, r3
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	4313      	orrs	r3, r2
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	609a      	str	r2, [r3, #8]
}
 800a484:	bf00      	nop
 800a486:	371c      	adds	r7, #28
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a490:	b480      	push	{r7}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f003 031f 	and.w	r3, r3, #31
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6a1a      	ldr	r2, [r3, #32]
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	43db      	mvns	r3, r3
 800a4b2:	401a      	ands	r2, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6a1a      	ldr	r2, [r3, #32]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	f003 031f 	and.w	r3, r3, #31
 800a4c2:	6879      	ldr	r1, [r7, #4]
 800a4c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a4c8:	431a      	orrs	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	621a      	str	r2, [r3, #32]
}
 800a4ce:	bf00      	nop
 800a4d0:	371c      	adds	r7, #28
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
	...

0800a4dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d101      	bne.n	800a4f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	e04a      	b.n	800a58a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2202      	movs	r2, #2
 800a500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a1f      	ldr	r2, [pc, #124]	; (800a598 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d108      	bne.n	800a530 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a524:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	4313      	orrs	r3, r2
 800a540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a12      	ldr	r2, [pc, #72]	; (800a598 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d004      	beq.n	800a55e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a55c:	d10c      	bne.n	800a578 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	4313      	orrs	r3, r2
 800a56e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	40012c00 	.word	0x40012c00

0800a59c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d101      	bne.n	800a5b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	e06e      	b.n	800a696 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	4313      	orrs	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	695b      	ldr	r3, [r3, #20]
 800a610:	4313      	orrs	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61e:	4313      	orrs	r3, r2
 800a620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	699b      	ldr	r3, [r3, #24]
 800a62c:	041b      	lsls	r3, r3, #16
 800a62e:	4313      	orrs	r3, r2
 800a630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	69db      	ldr	r3, [r3, #28]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a17      	ldr	r2, [pc, #92]	; (800a6a4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d11c      	bne.n	800a684 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a654:	051b      	lsls	r3, r3, #20
 800a656:	4313      	orrs	r3, r2
 800a658:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	6a1b      	ldr	r3, [r3, #32]
 800a664:	4313      	orrs	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a672:	4313      	orrs	r3, r2
 800a674:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a680:	4313      	orrs	r3, r2
 800a682:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	40012c00 	.word	0x40012c00

0800a6a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a6b8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a6bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b085      	sub	sp, #20
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a6de:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a6e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	43db      	mvns	r3, r3
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3714      	adds	r7, #20
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	1d3b      	adds	r3, r7, #4
 800a716:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3714      	adds	r7, #20
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a748:	b480      	push	{r7}
 800a74a:	b09d      	sub	sp, #116	; 0x74
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	881b      	ldrh	r3, [r3, #0]
 800a764:	b29b      	uxth	r3, r3
 800a766:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a76a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a76e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	78db      	ldrb	r3, [r3, #3]
 800a776:	2b03      	cmp	r3, #3
 800a778:	d81f      	bhi.n	800a7ba <USB_ActivateEndpoint+0x72>
 800a77a:	a201      	add	r2, pc, #4	; (adr r2, 800a780 <USB_ActivateEndpoint+0x38>)
 800a77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a780:	0800a791 	.word	0x0800a791
 800a784:	0800a7ad 	.word	0x0800a7ad
 800a788:	0800a7c3 	.word	0x0800a7c3
 800a78c:	0800a79f 	.word	0x0800a79f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a790:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a794:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a798:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a79c:	e012      	b.n	800a7c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a79e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a7a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a7a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a7aa:	e00b      	b.n	800a7c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a7ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a7b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a7b8:	e004      	b.n	800a7c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a7c0:	e000      	b.n	800a7c4 <USB_ActivateEndpoint+0x7c>
      break;
 800a7c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	441a      	add	r2, r3
 800a7ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a7d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	b21b      	sxth	r3, r3
 800a7f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7fe:	b21a      	sxth	r2, r3
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	b21b      	sxth	r3, r3
 800a806:	4313      	orrs	r3, r2
 800a808:	b21b      	sxth	r3, r3
 800a80a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	441a      	add	r2, r3
 800a818:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a81c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	7b1b      	ldrb	r3, [r3, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	f040 8178 	bne.w	800ab2a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	785b      	ldrb	r3, [r3, #1]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f000 8084 	beq.w	800a94c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	61bb      	str	r3, [r7, #24]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a84e:	b29b      	uxth	r3, r3
 800a850:	461a      	mov	r2, r3
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	4413      	add	r3, r2
 800a856:	61bb      	str	r3, [r7, #24]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	00da      	lsls	r2, r3, #3
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	4413      	add	r3, r2
 800a862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a866:	617b      	str	r3, [r7, #20]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	88db      	ldrh	r3, [r3, #6]
 800a86c:	085b      	lsrs	r3, r3, #1
 800a86e:	b29b      	uxth	r3, r3
 800a870:	005b      	lsls	r3, r3, #1
 800a872:	b29a      	uxth	r2, r3
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	881b      	ldrh	r3, [r3, #0]
 800a884:	827b      	strh	r3, [r7, #18]
 800a886:	8a7b      	ldrh	r3, [r7, #18]
 800a888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d01b      	beq.n	800a8c8 <USB_ActivateEndpoint+0x180>
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	881b      	ldrh	r3, [r3, #0]
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8a6:	823b      	strh	r3, [r7, #16]
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	441a      	add	r2, r3
 800a8b2:	8a3b      	ldrh	r3, [r7, #16]
 800a8b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	78db      	ldrb	r3, [r3, #3]
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d020      	beq.n	800a912 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8e6:	81bb      	strh	r3, [r7, #12]
 800a8e8:	89bb      	ldrh	r3, [r7, #12]
 800a8ea:	f083 0320 	eor.w	r3, r3, #32
 800a8ee:	81bb      	strh	r3, [r7, #12]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	441a      	add	r2, r3
 800a8fa:	89bb      	ldrh	r3, [r7, #12]
 800a8fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	8013      	strh	r3, [r2, #0]
 800a910:	e2d5      	b.n	800aebe <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	881b      	ldrh	r3, [r3, #0]
 800a91e:	b29b      	uxth	r3, r3
 800a920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a928:	81fb      	strh	r3, [r7, #14]
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	441a      	add	r2, r3
 800a934:	89fb      	ldrh	r3, [r7, #14]
 800a936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a93a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a93e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a946:	b29b      	uxth	r3, r3
 800a948:	8013      	strh	r3, [r2, #0]
 800a94a:	e2b8      	b.n	800aebe <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	633b      	str	r3, [r7, #48]	; 0x30
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a956:	b29b      	uxth	r3, r3
 800a958:	461a      	mov	r2, r3
 800a95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95c:	4413      	add	r3, r2
 800a95e:	633b      	str	r3, [r7, #48]	; 0x30
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	00da      	lsls	r2, r3, #3
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	4413      	add	r3, r2
 800a96a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a96e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	88db      	ldrh	r3, [r3, #6]
 800a974:	085b      	lsrs	r3, r3, #1
 800a976:	b29b      	uxth	r3, r3
 800a978:	005b      	lsls	r3, r3, #1
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	62bb      	str	r3, [r7, #40]	; 0x28
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	461a      	mov	r2, r3
 800a98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a990:	4413      	add	r3, r2
 800a992:	62bb      	str	r3, [r7, #40]	; 0x28
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	00da      	lsls	r2, r3, #3
 800a99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99c:	4413      	add	r3, r2
 800a99e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	881b      	ldrh	r3, [r3, #0]
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	801a      	strh	r2, [r3, #0]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	2b3e      	cmp	r3, #62	; 0x3e
 800a9ba:	d91d      	bls.n	800a9f8 <USB_ActivateEndpoint+0x2b0>
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	095b      	lsrs	r3, r3, #5
 800a9c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	f003 031f 	and.w	r3, r3, #31
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d102      	bne.n	800a9d6 <USB_ActivateEndpoint+0x28e>
 800a9d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	029b      	lsls	r3, r3, #10
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	801a      	strh	r2, [r3, #0]
 800a9f6:	e026      	b.n	800aa46 <USB_ActivateEndpoint+0x2fe>
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10a      	bne.n	800aa16 <USB_ActivateEndpoint+0x2ce>
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	881b      	ldrh	r3, [r3, #0]
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	801a      	strh	r2, [r3, #0]
 800aa14:	e017      	b.n	800aa46 <USB_ActivateEndpoint+0x2fe>
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	085b      	lsrs	r3, r3, #1
 800aa1c:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d002      	beq.n	800aa30 <USB_ActivateEndpoint+0x2e8>
 800aa2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	029b      	lsls	r3, r3, #10
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4413      	add	r3, r2
 800aa50:	881b      	ldrh	r3, [r3, #0]
 800aa52:	847b      	strh	r3, [r7, #34]	; 0x22
 800aa54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d01b      	beq.n	800aa96 <USB_ActivateEndpoint+0x34e>
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4413      	add	r3, r2
 800aa68:	881b      	ldrh	r3, [r3, #0]
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa74:	843b      	strh	r3, [r7, #32]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	441a      	add	r2, r3
 800aa80:	8c3b      	ldrh	r3, [r7, #32]
 800aa82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d124      	bne.n	800aae8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	4413      	add	r3, r2
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab4:	83bb      	strh	r3, [r7, #28]
 800aab6:	8bbb      	ldrh	r3, [r7, #28]
 800aab8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aabc:	83bb      	strh	r3, [r7, #28]
 800aabe:	8bbb      	ldrh	r3, [r7, #28]
 800aac0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aac4:	83bb      	strh	r3, [r7, #28]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	441a      	add	r2, r3
 800aad0:	8bbb      	ldrh	r3, [r7, #28]
 800aad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	8013      	strh	r3, [r2, #0]
 800aae6:	e1ea      	b.n	800aebe <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	881b      	ldrh	r3, [r3, #0]
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aafa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aafe:	83fb      	strh	r3, [r7, #30]
 800ab00:	8bfb      	ldrh	r3, [r7, #30]
 800ab02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ab06:	83fb      	strh	r3, [r7, #30]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	441a      	add	r2, r3
 800ab12:	8bfb      	ldrh	r3, [r7, #30]
 800ab14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	8013      	strh	r3, [r2, #0]
 800ab28:	e1c9      	b.n	800aebe <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	78db      	ldrb	r3, [r3, #3]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d11e      	bne.n	800ab70 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab48:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	441a      	add	r2, r3
 800ab56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ab5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab62:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ab66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	8013      	strh	r3, [r2, #0]
 800ab6e:	e01d      	b.n	800abac <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4413      	add	r3, r2
 800ab7a:	881b      	ldrh	r3, [r3, #0]
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ab82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	441a      	add	r2, r3
 800ab94:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ab98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	461a      	mov	r2, r3
 800abba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abbc:	4413      	add	r3, r2
 800abbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	00da      	lsls	r2, r3, #3
 800abc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abc8:	4413      	add	r3, r2
 800abca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abce:	65bb      	str	r3, [r7, #88]	; 0x58
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	891b      	ldrh	r3, [r3, #8]
 800abd4:	085b      	lsrs	r3, r3, #1
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	005b      	lsls	r3, r3, #1
 800abda:	b29a      	uxth	r2, r3
 800abdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abde:	801a      	strh	r2, [r3, #0]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	657b      	str	r3, [r7, #84]	; 0x54
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abea:	b29b      	uxth	r3, r3
 800abec:	461a      	mov	r2, r3
 800abee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abf0:	4413      	add	r3, r2
 800abf2:	657b      	str	r3, [r7, #84]	; 0x54
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	00da      	lsls	r2, r3, #3
 800abfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abfc:	4413      	add	r3, r2
 800abfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ac02:	653b      	str	r3, [r7, #80]	; 0x50
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	895b      	ldrh	r3, [r3, #10]
 800ac08:	085b      	lsrs	r3, r3, #1
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac12:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	785b      	ldrb	r3, [r3, #1]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f040 8093 	bne.w	800ad44 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	881b      	ldrh	r3, [r3, #0]
 800ac2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ac2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ac32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d01b      	beq.n	800ac72 <USB_ActivateEndpoint+0x52a>
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4413      	add	r3, r2
 800ac44:	881b      	ldrh	r3, [r3, #0]
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac50:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	441a      	add	r2, r3
 800ac5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ac5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	881b      	ldrh	r3, [r3, #0]
 800ac7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ac80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ac82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d01b      	beq.n	800acc2 <USB_ActivateEndpoint+0x57a>
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	881b      	ldrh	r3, [r3, #0]
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aca0:	877b      	strh	r3, [r7, #58]	; 0x3a
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	441a      	add	r2, r3
 800acac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800acae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	881b      	ldrh	r3, [r3, #0]
 800acce:	b29b      	uxth	r3, r3
 800acd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acd8:	873b      	strh	r3, [r7, #56]	; 0x38
 800acda:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800acdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ace0:	873b      	strh	r3, [r7, #56]	; 0x38
 800ace2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ace4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ace8:	873b      	strh	r3, [r7, #56]	; 0x38
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	441a      	add	r2, r3
 800acf4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800acf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	881b      	ldrh	r3, [r3, #0]
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad20:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	441a      	add	r2, r3
 800ad2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	8013      	strh	r3, [r2, #0]
 800ad42:	e0bc      	b.n	800aebe <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4413      	add	r3, r2
 800ad4e:	881b      	ldrh	r3, [r3, #0]
 800ad50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ad54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ad58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d01d      	beq.n	800ad9c <USB_ActivateEndpoint+0x654>
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	881b      	ldrh	r3, [r3, #0]
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	441a      	add	r2, r3
 800ad84:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ad88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	4413      	add	r3, r2
 800ada6:	881b      	ldrh	r3, [r3, #0]
 800ada8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800adac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800adb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d01d      	beq.n	800adf4 <USB_ActivateEndpoint+0x6ac>
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	881b      	ldrh	r3, [r3, #0]
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	441a      	add	r2, r3
 800addc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ade0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ade4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ade8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	78db      	ldrb	r3, [r3, #3]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d024      	beq.n	800ae46 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	4413      	add	r3, r2
 800ae06:	881b      	ldrh	r3, [r3, #0]
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ae16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ae1a:	f083 0320 	eor.w	r3, r3, #32
 800ae1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	441a      	add	r2, r3
 800ae2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ae30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	8013      	strh	r3, [r2, #0]
 800ae44:	e01d      	b.n	800ae82 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	4413      	add	r3, r2
 800ae50:	881b      	ldrh	r3, [r3, #0]
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae5c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	441a      	add	r2, r3
 800ae6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ae6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	4413      	add	r3, r2
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	441a      	add	r2, r3
 800aea6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aeaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aeb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800aebe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3774      	adds	r7, #116	; 0x74
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop

0800aed0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b08d      	sub	sp, #52	; 0x34
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	7b1b      	ldrb	r3, [r3, #12]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f040 808e 	bne.w	800b000 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	785b      	ldrb	r3, [r3, #1]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d044      	beq.n	800af76 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	81bb      	strh	r3, [r7, #12]
 800aefa:	89bb      	ldrh	r3, [r7, #12]
 800aefc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af00:	2b00      	cmp	r3, #0
 800af02:	d01b      	beq.n	800af3c <USB_DeactivateEndpoint+0x6c>
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	b29b      	uxth	r3, r3
 800af12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af1a:	817b      	strh	r3, [r7, #10]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	441a      	add	r2, r3
 800af26:	897b      	ldrh	r3, [r7, #10]
 800af28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af38:	b29b      	uxth	r3, r3
 800af3a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	881b      	ldrh	r3, [r3, #0]
 800af48:	b29b      	uxth	r3, r3
 800af4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af52:	813b      	strh	r3, [r7, #8]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	441a      	add	r2, r3
 800af5e:	893b      	ldrh	r3, [r7, #8]
 800af60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af70:	b29b      	uxth	r3, r3
 800af72:	8013      	strh	r3, [r2, #0]
 800af74:	e192      	b.n	800b29c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	881b      	ldrh	r3, [r3, #0]
 800af82:	827b      	strh	r3, [r7, #18]
 800af84:	8a7b      	ldrh	r3, [r7, #18]
 800af86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d01b      	beq.n	800afc6 <USB_DeactivateEndpoint+0xf6>
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4413      	add	r3, r2
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afa4:	823b      	strh	r3, [r7, #16]
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	441a      	add	r2, r3
 800afb0:	8a3b      	ldrh	r3, [r7, #16]
 800afb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	881b      	ldrh	r3, [r3, #0]
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afdc:	81fb      	strh	r3, [r7, #14]
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	441a      	add	r2, r3
 800afe8:	89fb      	ldrh	r3, [r7, #14]
 800afea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800affa:	b29b      	uxth	r3, r3
 800affc:	8013      	strh	r3, [r2, #0]
 800affe:	e14d      	b.n	800b29c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	785b      	ldrb	r3, [r3, #1]
 800b004:	2b00      	cmp	r3, #0
 800b006:	f040 80a5 	bne.w	800b154 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4413      	add	r3, r2
 800b014:	881b      	ldrh	r3, [r3, #0]
 800b016:	843b      	strh	r3, [r7, #32]
 800b018:	8c3b      	ldrh	r3, [r7, #32]
 800b01a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d01b      	beq.n	800b05a <USB_DeactivateEndpoint+0x18a>
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	4413      	add	r3, r2
 800b02c:	881b      	ldrh	r3, [r3, #0]
 800b02e:	b29b      	uxth	r3, r3
 800b030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b038:	83fb      	strh	r3, [r7, #30]
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	441a      	add	r2, r3
 800b044:	8bfb      	ldrh	r3, [r7, #30]
 800b046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b04a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b04e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b056:	b29b      	uxth	r3, r3
 800b058:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	881b      	ldrh	r3, [r3, #0]
 800b066:	83bb      	strh	r3, [r7, #28]
 800b068:	8bbb      	ldrh	r3, [r7, #28]
 800b06a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d01b      	beq.n	800b0aa <USB_DeactivateEndpoint+0x1da>
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	881b      	ldrh	r3, [r3, #0]
 800b07e:	b29b      	uxth	r3, r3
 800b080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b088:	837b      	strh	r3, [r7, #26]
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	441a      	add	r2, r3
 800b094:	8b7b      	ldrh	r3, [r7, #26]
 800b096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b09a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b09e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	881b      	ldrh	r3, [r3, #0]
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c0:	833b      	strh	r3, [r7, #24]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	441a      	add	r2, r3
 800b0cc:	8b3b      	ldrh	r3, [r7, #24]
 800b0ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	881b      	ldrh	r3, [r3, #0]
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0f8:	82fb      	strh	r3, [r7, #22]
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	441a      	add	r2, r3
 800b104:	8afb      	ldrh	r3, [r7, #22]
 800b106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b10a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b10e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b116:	b29b      	uxth	r3, r3
 800b118:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	881b      	ldrh	r3, [r3, #0]
 800b126:	b29b      	uxth	r3, r3
 800b128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b12c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b130:	82bb      	strh	r3, [r7, #20]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	441a      	add	r2, r3
 800b13c:	8abb      	ldrh	r3, [r7, #20]
 800b13e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b14a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b14e:	b29b      	uxth	r3, r3
 800b150:	8013      	strh	r3, [r2, #0]
 800b152:	e0a3      	b.n	800b29c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	881b      	ldrh	r3, [r3, #0]
 800b160:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b162:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d01b      	beq.n	800b1a4 <USB_DeactivateEndpoint+0x2d4>
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4413      	add	r3, r2
 800b176:	881b      	ldrh	r3, [r3, #0]
 800b178:	b29b      	uxth	r3, r3
 800b17a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b17e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b182:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	441a      	add	r2, r3
 800b18e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b19c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4413      	add	r3, r2
 800b1ae:	881b      	ldrh	r3, [r3, #0]
 800b1b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b1b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d01b      	beq.n	800b1f4 <USB_DeactivateEndpoint+0x324>
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	881b      	ldrh	r3, [r3, #0]
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1d2:	853b      	strh	r3, [r7, #40]	; 0x28
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	441a      	add	r2, r3
 800b1de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b1e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	b29b      	uxth	r3, r3
 800b202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b20a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	441a      	add	r2, r3
 800b216:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b21c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b228:	b29b      	uxth	r3, r3
 800b22a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	4413      	add	r3, r2
 800b236:	881b      	ldrh	r3, [r3, #0]
 800b238:	b29b      	uxth	r3, r3
 800b23a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b23e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b242:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	441a      	add	r2, r3
 800b24e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b25c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b260:	b29b      	uxth	r3, r3
 800b262:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	4413      	add	r3, r2
 800b26e:	881b      	ldrh	r3, [r3, #0]
 800b270:	b29b      	uxth	r3, r3
 800b272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b27a:	847b      	strh	r3, [r7, #34]	; 0x22
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	441a      	add	r2, r3
 800b286:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b28c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b298:	b29b      	uxth	r3, r3
 800b29a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3734      	adds	r7, #52	; 0x34
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr

0800b2aa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b0c2      	sub	sp, #264	; 0x108
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2b8:	6018      	str	r0, [r3, #0]
 800b2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2c2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	785b      	ldrb	r3, [r3, #1]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	f040 86b7 	bne.w	800c044 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b2d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	699a      	ldr	r2, [r3, #24]
 800b2e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d908      	bls.n	800b304 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b2f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b302:	e007      	b.n	800b314 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	7b1b      	ldrb	r3, [r3, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d13a      	bne.n	800b39a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6959      	ldr	r1, [r3, #20]
 800b330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	88da      	ldrh	r2, [r3, #6]
 800b33c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b340:	b29b      	uxth	r3, r3
 800b342:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b346:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b34a:	6800      	ldr	r0, [r0, #0]
 800b34c:	f001 fc98 	bl	800cc80 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	613b      	str	r3, [r7, #16]
 800b35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	461a      	mov	r2, r3
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	4413      	add	r3, r2
 800b372:	613b      	str	r3, [r7, #16]
 800b374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	00da      	lsls	r2, r3, #3
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	4413      	add	r3, r2
 800b386:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b38a:	60fb      	str	r3, [r7, #12]
 800b38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b390:	b29a      	uxth	r2, r3
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	801a      	strh	r2, [r3, #0]
 800b396:	f000 be1f 	b.w	800bfd8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b39a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b39e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	78db      	ldrb	r3, [r3, #3]
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	f040 8462 	bne.w	800bc70 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	6a1a      	ldr	r2, [r3, #32]
 800b3b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	f240 83df 	bls.w	800bb88 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	4413      	add	r3, r2
 800b3e4:	881b      	ldrh	r3, [r3, #0]
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b3f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	441a      	add	r2, r3
 800b40e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b41a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b41e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b422:	b29b      	uxth	r3, r3
 800b424:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b42a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6a1a      	ldr	r2, [r3, #32]
 800b432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b436:	1ad2      	subs	r2, r2, r3
 800b438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b43c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	881b      	ldrh	r3, [r3, #0]
 800b460:	b29b      	uxth	r3, r3
 800b462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b466:	2b00      	cmp	r3, #0
 800b468:	f000 81c7 	beq.w	800b7fa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b46c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b470:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	633b      	str	r3, [r7, #48]	; 0x30
 800b478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	785b      	ldrb	r3, [r3, #1]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d177      	bne.n	800b578 <USB_EPStartXfer+0x2ce>
 800b488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	62bb      	str	r3, [r7, #40]	; 0x28
 800b494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b498:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a8:	4413      	add	r3, r2
 800b4aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	00da      	lsls	r2, r3, #3
 800b4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4bc:	4413      	add	r3, r2
 800b4be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c6:	881b      	ldrh	r3, [r3, #0]
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d2:	801a      	strh	r2, [r3, #0]
 800b4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d8:	2b3e      	cmp	r3, #62	; 0x3e
 800b4da:	d921      	bls.n	800b520 <USB_EPStartXfer+0x276>
 800b4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4e0:	095b      	lsrs	r3, r3, #5
 800b4e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ea:	f003 031f 	and.w	r3, r3, #31
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d104      	bne.n	800b4fc <USB_EPStartXfer+0x252>
 800b4f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fe:	881b      	ldrh	r3, [r3, #0]
 800b500:	b29a      	uxth	r2, r3
 800b502:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b506:	b29b      	uxth	r3, r3
 800b508:	029b      	lsls	r3, r3, #10
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	4313      	orrs	r3, r2
 800b50e:	b29b      	uxth	r3, r3
 800b510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b518:	b29a      	uxth	r2, r3
 800b51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51c:	801a      	strh	r2, [r3, #0]
 800b51e:	e050      	b.n	800b5c2 <USB_EPStartXfer+0x318>
 800b520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b524:	2b00      	cmp	r3, #0
 800b526:	d10a      	bne.n	800b53e <USB_EPStartXfer+0x294>
 800b528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52a:	881b      	ldrh	r3, [r3, #0]
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b536:	b29a      	uxth	r2, r3
 800b538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53a:	801a      	strh	r2, [r3, #0]
 800b53c:	e041      	b.n	800b5c2 <USB_EPStartXfer+0x318>
 800b53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b542:	085b      	lsrs	r3, r3, #1
 800b544:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54c:	f003 0301 	and.w	r3, r3, #1
 800b550:	2b00      	cmp	r3, #0
 800b552:	d004      	beq.n	800b55e <USB_EPStartXfer+0x2b4>
 800b554:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b558:	3301      	adds	r3, #1
 800b55a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b560:	881b      	ldrh	r3, [r3, #0]
 800b562:	b29a      	uxth	r2, r3
 800b564:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b568:	b29b      	uxth	r3, r3
 800b56a:	029b      	lsls	r3, r3, #10
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	4313      	orrs	r3, r2
 800b570:	b29a      	uxth	r2, r3
 800b572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b574:	801a      	strh	r2, [r3, #0]
 800b576:	e024      	b.n	800b5c2 <USB_EPStartXfer+0x318>
 800b578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b57c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	785b      	ldrb	r3, [r3, #1]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d11c      	bne.n	800b5c2 <USB_EPStartXfer+0x318>
 800b588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b58c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b596:	b29b      	uxth	r3, r3
 800b598:	461a      	mov	r2, r3
 800b59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59c:	4413      	add	r3, r2
 800b59e:	633b      	str	r3, [r7, #48]	; 0x30
 800b5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	00da      	lsls	r2, r3, #3
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	4413      	add	r3, r2
 800b5b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b5c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	895b      	ldrh	r3, [r3, #10]
 800b5ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	6959      	ldr	r1, [r3, #20]
 800b5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b5e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b5ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b5f0:	6800      	ldr	r0, [r0, #0]
 800b5f2:	f001 fb45 	bl	800cc80 <USB_WritePMA>
            ep->xfer_buff += len;
 800b5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	695a      	ldr	r2, [r3, #20]
 800b602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b606:	441a      	add	r2, r3
 800b608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b60c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	6a1a      	ldr	r2, [r3, #32]
 800b620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d90f      	bls.n	800b650 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	6a1a      	ldr	r2, [r3, #32]
 800b63c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b640:	1ad2      	subs	r2, r2, r3
 800b642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	621a      	str	r2, [r3, #32]
 800b64e:	e00e      	b.n	800b66e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	6a1b      	ldr	r3, [r3, #32]
 800b65c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2200      	movs	r2, #0
 800b66c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b66e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	785b      	ldrb	r3, [r3, #1]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d177      	bne.n	800b76e <USB_EPStartXfer+0x4c4>
 800b67e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	61bb      	str	r3, [r7, #24]
 800b68a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b68e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b698:	b29b      	uxth	r3, r3
 800b69a:	461a      	mov	r2, r3
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	4413      	add	r3, r2
 800b6a0:	61bb      	str	r3, [r7, #24]
 800b6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	00da      	lsls	r2, r3, #3
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b6b8:	617b      	str	r3, [r7, #20]
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	881b      	ldrh	r3, [r3, #0]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	801a      	strh	r2, [r3, #0]
 800b6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ce:	2b3e      	cmp	r3, #62	; 0x3e
 800b6d0:	d921      	bls.n	800b716 <USB_EPStartXfer+0x46c>
 800b6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d6:	095b      	lsrs	r3, r3, #5
 800b6d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e0:	f003 031f 	and.w	r3, r3, #31
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d104      	bne.n	800b6f2 <USB_EPStartXfer+0x448>
 800b6e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	881b      	ldrh	r3, [r3, #0]
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	029b      	lsls	r3, r3, #10
 800b700:	b29b      	uxth	r3, r3
 800b702:	4313      	orrs	r3, r2
 800b704:	b29b      	uxth	r3, r3
 800b706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b70a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b70e:	b29a      	uxth	r2, r3
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	801a      	strh	r2, [r3, #0]
 800b714:	e056      	b.n	800b7c4 <USB_EPStartXfer+0x51a>
 800b716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10a      	bne.n	800b734 <USB_EPStartXfer+0x48a>
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	b29b      	uxth	r3, r3
 800b724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	801a      	strh	r2, [r3, #0]
 800b732:	e047      	b.n	800b7c4 <USB_EPStartXfer+0x51a>
 800b734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b738:	085b      	lsrs	r3, r3, #1
 800b73a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b742:	f003 0301 	and.w	r3, r3, #1
 800b746:	2b00      	cmp	r3, #0
 800b748:	d004      	beq.n	800b754 <USB_EPStartXfer+0x4aa>
 800b74a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b74e:	3301      	adds	r3, #1
 800b750:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	881b      	ldrh	r3, [r3, #0]
 800b758:	b29a      	uxth	r2, r3
 800b75a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b75e:	b29b      	uxth	r3, r3
 800b760:	029b      	lsls	r3, r3, #10
 800b762:	b29b      	uxth	r3, r3
 800b764:	4313      	orrs	r3, r2
 800b766:	b29a      	uxth	r2, r3
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	801a      	strh	r2, [r3, #0]
 800b76c:	e02a      	b.n	800b7c4 <USB_EPStartXfer+0x51a>
 800b76e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	785b      	ldrb	r3, [r3, #1]
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d122      	bne.n	800b7c4 <USB_EPStartXfer+0x51a>
 800b77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	623b      	str	r3, [r7, #32]
 800b78a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b78e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b798:	b29b      	uxth	r3, r3
 800b79a:	461a      	mov	r2, r3
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	4413      	add	r3, r2
 800b7a0:	623b      	str	r3, [r7, #32]
 800b7a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	00da      	lsls	r2, r3, #3
 800b7b0:	6a3b      	ldr	r3, [r7, #32]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b7b8:	61fb      	str	r3, [r7, #28]
 800b7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b7c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	891b      	ldrh	r3, [r3, #8]
 800b7d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b7d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	6959      	ldr	r1, [r3, #20]
 800b7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b7ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b7ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b7f2:	6800      	ldr	r0, [r0, #0]
 800b7f4:	f001 fa44 	bl	800cc80 <USB_WritePMA>
 800b7f8:	e3ee      	b.n	800bfd8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b7fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	785b      	ldrb	r3, [r3, #1]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d177      	bne.n	800b8fa <USB_EPStartXfer+0x650>
 800b80a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b80e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	64bb      	str	r3, [r7, #72]	; 0x48
 800b816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b81a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b824:	b29b      	uxth	r3, r3
 800b826:	461a      	mov	r2, r3
 800b828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b82a:	4413      	add	r3, r2
 800b82c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	00da      	lsls	r2, r3, #3
 800b83c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b83e:	4413      	add	r3, r2
 800b840:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b844:	647b      	str	r3, [r7, #68]	; 0x44
 800b846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b850:	b29a      	uxth	r2, r3
 800b852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b854:	801a      	strh	r2, [r3, #0]
 800b856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85a:	2b3e      	cmp	r3, #62	; 0x3e
 800b85c:	d921      	bls.n	800b8a2 <USB_EPStartXfer+0x5f8>
 800b85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b862:	095b      	lsrs	r3, r3, #5
 800b864:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b86c:	f003 031f 	and.w	r3, r3, #31
 800b870:	2b00      	cmp	r3, #0
 800b872:	d104      	bne.n	800b87e <USB_EPStartXfer+0x5d4>
 800b874:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b878:	3b01      	subs	r3, #1
 800b87a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b87e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	b29a      	uxth	r2, r3
 800b884:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b888:	b29b      	uxth	r3, r3
 800b88a:	029b      	lsls	r3, r3, #10
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	4313      	orrs	r3, r2
 800b890:	b29b      	uxth	r3, r3
 800b892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b89e:	801a      	strh	r2, [r3, #0]
 800b8a0:	e056      	b.n	800b950 <USB_EPStartXfer+0x6a6>
 800b8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d10a      	bne.n	800b8c0 <USB_EPStartXfer+0x616>
 800b8aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ac:	881b      	ldrh	r3, [r3, #0]
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8b8:	b29a      	uxth	r2, r3
 800b8ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8bc:	801a      	strh	r2, [r3, #0]
 800b8be:	e047      	b.n	800b950 <USB_EPStartXfer+0x6a6>
 800b8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c4:	085b      	lsrs	r3, r3, #1
 800b8c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d004      	beq.n	800b8e0 <USB_EPStartXfer+0x636>
 800b8d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b8da:	3301      	adds	r3, #1
 800b8dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b8e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8e2:	881b      	ldrh	r3, [r3, #0]
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	029b      	lsls	r3, r3, #10
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8f6:	801a      	strh	r2, [r3, #0]
 800b8f8:	e02a      	b.n	800b950 <USB_EPStartXfer+0x6a6>
 800b8fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	785b      	ldrb	r3, [r3, #1]
 800b906:	2b01      	cmp	r3, #1
 800b908:	d122      	bne.n	800b950 <USB_EPStartXfer+0x6a6>
 800b90a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b90e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	653b      	str	r3, [r7, #80]	; 0x50
 800b916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b91a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b924:	b29b      	uxth	r3, r3
 800b926:	461a      	mov	r2, r3
 800b928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b92a:	4413      	add	r3, r2
 800b92c:	653b      	str	r3, [r7, #80]	; 0x50
 800b92e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	00da      	lsls	r2, r3, #3
 800b93c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b93e:	4413      	add	r3, r2
 800b940:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b944:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b94e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	891b      	ldrh	r3, [r3, #8]
 800b95c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	6959      	ldr	r1, [r3, #20]
 800b96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b970:	b29b      	uxth	r3, r3
 800b972:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b976:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b97a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b97e:	6800      	ldr	r0, [r0, #0]
 800b980:	f001 f97e 	bl	800cc80 <USB_WritePMA>
            ep->xfer_buff += len;
 800b984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	695a      	ldr	r2, [r3, #20]
 800b990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b994:	441a      	add	r2, r3
 800b996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b99a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6a1a      	ldr	r2, [r3, #32]
 800b9ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d90f      	bls.n	800b9de <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b9be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	6a1a      	ldr	r2, [r3, #32]
 800b9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ce:	1ad2      	subs	r2, r2, r3
 800b9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	621a      	str	r2, [r3, #32]
 800b9dc:	e00e      	b.n	800b9fc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b9de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	6a1b      	ldr	r3, [r3, #32]
 800b9ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b9ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b9fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	643b      	str	r3, [r7, #64]	; 0x40
 800ba08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	785b      	ldrb	r3, [r3, #1]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d177      	bne.n	800bb08 <USB_EPStartXfer+0x85e>
 800ba18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	461a      	mov	r2, r3
 800ba36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba38:	4413      	add	r3, r2
 800ba3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	00da      	lsls	r2, r3, #3
 800ba4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba52:	637b      	str	r3, [r7, #52]	; 0x34
 800ba54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba56:	881b      	ldrh	r3, [r3, #0]
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba62:	801a      	strh	r2, [r3, #0]
 800ba64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba68:	2b3e      	cmp	r3, #62	; 0x3e
 800ba6a:	d921      	bls.n	800bab0 <USB_EPStartXfer+0x806>
 800ba6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba70:	095b      	lsrs	r3, r3, #5
 800ba72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba7a:	f003 031f 	and.w	r3, r3, #31
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d104      	bne.n	800ba8c <USB_EPStartXfer+0x7e2>
 800ba82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba86:	3b01      	subs	r3, #1
 800ba88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba8e:	881b      	ldrh	r3, [r3, #0]
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	029b      	lsls	r3, r3, #10
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baac:	801a      	strh	r2, [r3, #0]
 800baae:	e050      	b.n	800bb52 <USB_EPStartXfer+0x8a8>
 800bab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10a      	bne.n	800bace <USB_EPStartXfer+0x824>
 800bab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baba:	881b      	ldrh	r3, [r3, #0]
 800babc:	b29b      	uxth	r3, r3
 800babe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baca:	801a      	strh	r2, [r3, #0]
 800bacc:	e041      	b.n	800bb52 <USB_EPStartXfer+0x8a8>
 800bace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad2:	085b      	lsrs	r3, r3, #1
 800bad4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d004      	beq.n	800baee <USB_EPStartXfer+0x844>
 800bae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bae8:	3301      	adds	r3, #1
 800baea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800baee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baf0:	881b      	ldrh	r3, [r3, #0]
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	029b      	lsls	r3, r3, #10
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	4313      	orrs	r3, r2
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb04:	801a      	strh	r2, [r3, #0]
 800bb06:	e024      	b.n	800bb52 <USB_EPStartXfer+0x8a8>
 800bb08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	785b      	ldrb	r3, [r3, #1]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d11c      	bne.n	800bb52 <USB_EPStartXfer+0x8a8>
 800bb18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	461a      	mov	r2, r3
 800bb2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb2c:	4413      	add	r3, r2
 800bb2e:	643b      	str	r3, [r7, #64]	; 0x40
 800bb30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	00da      	lsls	r2, r3, #3
 800bb3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb40:	4413      	add	r3, r2
 800bb42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bb52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	895b      	ldrh	r3, [r3, #10]
 800bb5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	6959      	ldr	r1, [r3, #20]
 800bb6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bb78:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bb7c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bb80:	6800      	ldr	r0, [r0, #0]
 800bb82:	f001 f87d 	bl	800cc80 <USB_WritePMA>
 800bb86:	e227      	b.n	800bfd8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bb88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	6a1b      	ldr	r3, [r3, #32]
 800bb94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bb98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4413      	add	r3, r2
 800bbb2:	881b      	ldrh	r3, [r3, #0]
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bbba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbbe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bbc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	441a      	add	r2, r3
 800bbdc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bbe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bbf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	461a      	mov	r2, r3
 800bc12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc14:	4413      	add	r3, r2
 800bc16:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	00da      	lsls	r2, r3, #3
 800bc26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc28:	4413      	add	r3, r2
 800bc2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc2e:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bc3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	891b      	ldrh	r3, [r3, #8]
 800bc46:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	6959      	ldr	r1, [r3, #20]
 800bc56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bc60:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bc64:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bc68:	6800      	ldr	r0, [r0, #0]
 800bc6a:	f001 f809 	bl	800cc80 <USB_WritePMA>
 800bc6e:	e1b3      	b.n	800bfd8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bc70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	6a1a      	ldr	r2, [r3, #32]
 800bc7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc80:	1ad2      	subs	r2, r2, r3
 800bc82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bc8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4413      	add	r3, r2
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f000 80c6 	beq.w	800be42 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bcb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	673b      	str	r3, [r7, #112]	; 0x70
 800bcc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	785b      	ldrb	r3, [r3, #1]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d177      	bne.n	800bdc2 <USB_EPStartXfer+0xb18>
 800bcd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	461a      	mov	r2, r3
 800bcf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcf2:	4413      	add	r3, r2
 800bcf4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	00da      	lsls	r2, r3, #3
 800bd04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd06:	4413      	add	r3, r2
 800bd08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd0c:	667b      	str	r3, [r7, #100]	; 0x64
 800bd0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd10:	881b      	ldrh	r3, [r3, #0]
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd1c:	801a      	strh	r2, [r3, #0]
 800bd1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd22:	2b3e      	cmp	r3, #62	; 0x3e
 800bd24:	d921      	bls.n	800bd6a <USB_EPStartXfer+0xac0>
 800bd26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd2a:	095b      	lsrs	r3, r3, #5
 800bd2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd34:	f003 031f 	and.w	r3, r3, #31
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d104      	bne.n	800bd46 <USB_EPStartXfer+0xa9c>
 800bd3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd40:	3b01      	subs	r3, #1
 800bd42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd48:	881b      	ldrh	r3, [r3, #0]
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	029b      	lsls	r3, r3, #10
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	4313      	orrs	r3, r2
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd66:	801a      	strh	r2, [r3, #0]
 800bd68:	e050      	b.n	800be0c <USB_EPStartXfer+0xb62>
 800bd6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d10a      	bne.n	800bd88 <USB_EPStartXfer+0xade>
 800bd72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd74:	881b      	ldrh	r3, [r3, #0]
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd84:	801a      	strh	r2, [r3, #0]
 800bd86:	e041      	b.n	800be0c <USB_EPStartXfer+0xb62>
 800bd88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd8c:	085b      	lsrs	r3, r3, #1
 800bd8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd96:	f003 0301 	and.w	r3, r3, #1
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d004      	beq.n	800bda8 <USB_EPStartXfer+0xafe>
 800bd9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bda2:	3301      	adds	r3, #1
 800bda4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bda8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdaa:	881b      	ldrh	r3, [r3, #0]
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	029b      	lsls	r3, r3, #10
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdbe:	801a      	strh	r2, [r3, #0]
 800bdc0:	e024      	b.n	800be0c <USB_EPStartXfer+0xb62>
 800bdc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	785b      	ldrb	r3, [r3, #1]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d11c      	bne.n	800be0c <USB_EPStartXfer+0xb62>
 800bdd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	461a      	mov	r2, r3
 800bde4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bde6:	4413      	add	r3, r2
 800bde8:	673b      	str	r3, [r7, #112]	; 0x70
 800bdea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	00da      	lsls	r2, r3, #3
 800bdf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bdfa:	4413      	add	r3, r2
 800bdfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be00:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be06:	b29a      	uxth	r2, r3
 800be08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800be0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	895b      	ldrh	r3, [r3, #10]
 800be18:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	6959      	ldr	r1, [r3, #20]
 800be28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800be32:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800be36:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800be3a:	6800      	ldr	r0, [r0, #0]
 800be3c:	f000 ff20 	bl	800cc80 <USB_WritePMA>
 800be40:	e0ca      	b.n	800bfd8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800be42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	785b      	ldrb	r3, [r3, #1]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d177      	bne.n	800bf42 <USB_EPStartXfer+0xc98>
 800be52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	461a      	mov	r2, r3
 800be70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be72:	4413      	add	r3, r2
 800be74:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	00da      	lsls	r2, r3, #3
 800be84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be86:	4413      	add	r3, r2
 800be88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be8c:	67bb      	str	r3, [r7, #120]	; 0x78
 800be8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be90:	881b      	ldrh	r3, [r3, #0]
 800be92:	b29b      	uxth	r3, r3
 800be94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be98:	b29a      	uxth	r2, r3
 800be9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be9c:	801a      	strh	r2, [r3, #0]
 800be9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bea2:	2b3e      	cmp	r3, #62	; 0x3e
 800bea4:	d921      	bls.n	800beea <USB_EPStartXfer+0xc40>
 800bea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beaa:	095b      	lsrs	r3, r3, #5
 800beac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800beb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beb4:	f003 031f 	and.w	r3, r3, #31
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d104      	bne.n	800bec6 <USB_EPStartXfer+0xc1c>
 800bebc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bec0:	3b01      	subs	r3, #1
 800bec2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bec8:	881b      	ldrh	r3, [r3, #0]
 800beca:	b29a      	uxth	r2, r3
 800becc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	029b      	lsls	r3, r3, #10
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	4313      	orrs	r3, r2
 800bed8:	b29b      	uxth	r3, r3
 800beda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bee6:	801a      	strh	r2, [r3, #0]
 800bee8:	e05c      	b.n	800bfa4 <USB_EPStartXfer+0xcfa>
 800beea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d10a      	bne.n	800bf08 <USB_EPStartXfer+0xc5e>
 800bef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bef4:	881b      	ldrh	r3, [r3, #0]
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800befc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf04:	801a      	strh	r2, [r3, #0]
 800bf06:	e04d      	b.n	800bfa4 <USB_EPStartXfer+0xcfa>
 800bf08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf0c:	085b      	lsrs	r3, r3, #1
 800bf0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf16:	f003 0301 	and.w	r3, r3, #1
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d004      	beq.n	800bf28 <USB_EPStartXfer+0xc7e>
 800bf1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf22:	3301      	adds	r3, #1
 800bf24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	029b      	lsls	r3, r3, #10
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf3e:	801a      	strh	r2, [r3, #0]
 800bf40:	e030      	b.n	800bfa4 <USB_EPStartXfer+0xcfa>
 800bf42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	785b      	ldrb	r3, [r3, #1]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d128      	bne.n	800bfa4 <USB_EPStartXfer+0xcfa>
 800bf52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	461a      	mov	r2, r3
 800bf72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf76:	4413      	add	r3, r2
 800bf78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	00da      	lsls	r2, r3, #3
 800bf8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf8e:	4413      	add	r3, r2
 800bf90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf9c:	b29a      	uxth	r2, r3
 800bf9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bfa2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bfa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	891b      	ldrh	r3, [r3, #8]
 800bfb0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bfb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	6959      	ldr	r1, [r3, #20]
 800bfc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bfca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bfce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bfd2:	6800      	ldr	r0, [r0, #0]
 800bfd4:	f000 fe54 	bl	800cc80 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bfd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4413      	add	r3, r2
 800bff2:	881b      	ldrh	r3, [r3, #0]
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bffe:	817b      	strh	r3, [r7, #10]
 800c000:	897b      	ldrh	r3, [r7, #10]
 800c002:	f083 0310 	eor.w	r3, r3, #16
 800c006:	817b      	strh	r3, [r7, #10]
 800c008:	897b      	ldrh	r3, [r7, #10]
 800c00a:	f083 0320 	eor.w	r3, r3, #32
 800c00e:	817b      	strh	r3, [r7, #10]
 800c010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c01e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	441a      	add	r2, r3
 800c02a:	897b      	ldrh	r3, [r7, #10]
 800c02c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	8013      	strh	r3, [r2, #0]
 800c040:	f000 bcde 	b.w	800ca00 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	7b1b      	ldrb	r3, [r3, #12]
 800c050:	2b00      	cmp	r3, #0
 800c052:	f040 80bb 	bne.w	800c1cc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c05a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	699a      	ldr	r2, [r3, #24]
 800c062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d917      	bls.n	800c0a2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	691b      	ldr	r3, [r3, #16]
 800c07e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	699a      	ldr	r2, [r3, #24]
 800c08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c092:	1ad2      	subs	r2, r2, r3
 800c094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	619a      	str	r2, [r3, #24]
 800c0a0:	e00e      	b.n	800c0c0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c0a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	699b      	ldr	r3, [r3, #24]
 800c0ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	461a      	mov	r2, r3
 800c0e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c0e4:	4413      	add	r3, r2
 800c0e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	00da      	lsls	r2, r3, #3
 800c0f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c0fc:	4413      	add	r3, r2
 800c0fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c102:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c106:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c112:	b29a      	uxth	r2, r3
 800c114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c118:	801a      	strh	r2, [r3, #0]
 800c11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c11e:	2b3e      	cmp	r3, #62	; 0x3e
 800c120:	d924      	bls.n	800c16c <USB_EPStartXfer+0xec2>
 800c122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c126:	095b      	lsrs	r3, r3, #5
 800c128:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c130:	f003 031f 	and.w	r3, r3, #31
 800c134:	2b00      	cmp	r3, #0
 800c136:	d104      	bne.n	800c142 <USB_EPStartXfer+0xe98>
 800c138:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c13c:	3b01      	subs	r3, #1
 800c13e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c142:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	b29a      	uxth	r2, r3
 800c14a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c14e:	b29b      	uxth	r3, r3
 800c150:	029b      	lsls	r3, r3, #10
 800c152:	b29b      	uxth	r3, r3
 800c154:	4313      	orrs	r3, r2
 800c156:	b29b      	uxth	r3, r3
 800c158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c15c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c160:	b29a      	uxth	r2, r3
 800c162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c166:	801a      	strh	r2, [r3, #0]
 800c168:	f000 bc10 	b.w	800c98c <USB_EPStartXfer+0x16e2>
 800c16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10c      	bne.n	800c18e <USB_EPStartXfer+0xee4>
 800c174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c178:	881b      	ldrh	r3, [r3, #0]
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c184:	b29a      	uxth	r2, r3
 800c186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c18a:	801a      	strh	r2, [r3, #0]
 800c18c:	e3fe      	b.n	800c98c <USB_EPStartXfer+0x16e2>
 800c18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c192:	085b      	lsrs	r3, r3, #1
 800c194:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c19c:	f003 0301 	and.w	r3, r3, #1
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d004      	beq.n	800c1ae <USB_EPStartXfer+0xf04>
 800c1a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c1ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1b2:	881b      	ldrh	r3, [r3, #0]
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	029b      	lsls	r3, r3, #10
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1c8:	801a      	strh	r2, [r3, #0]
 800c1ca:	e3df      	b.n	800c98c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	78db      	ldrb	r3, [r3, #3]
 800c1d8:	2b02      	cmp	r3, #2
 800c1da:	f040 8218 	bne.w	800c60e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c1de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	785b      	ldrb	r3, [r3, #1]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	f040 809d 	bne.w	800c32a <USB_EPStartXfer+0x1080>
 800c1f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	461a      	mov	r2, r3
 800c210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c214:	4413      	add	r3, r2
 800c216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c21a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c21e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	00da      	lsls	r2, r3, #3
 800c228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c22c:	4413      	add	r3, r2
 800c22e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c232:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c236:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c23a:	881b      	ldrh	r3, [r3, #0]
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c242:	b29a      	uxth	r2, r3
 800c244:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c248:	801a      	strh	r2, [r3, #0]
 800c24a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c24e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	691b      	ldr	r3, [r3, #16]
 800c256:	2b3e      	cmp	r3, #62	; 0x3e
 800c258:	d92b      	bls.n	800c2b2 <USB_EPStartXfer+0x1008>
 800c25a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c25e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	095b      	lsrs	r3, r3, #5
 800c268:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c26c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	691b      	ldr	r3, [r3, #16]
 800c278:	f003 031f 	and.w	r3, r3, #31
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d104      	bne.n	800c28a <USB_EPStartXfer+0xfe0>
 800c280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c284:	3b01      	subs	r3, #1
 800c286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c28a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c28e:	881b      	ldrh	r3, [r3, #0]
 800c290:	b29a      	uxth	r2, r3
 800c292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c296:	b29b      	uxth	r3, r3
 800c298:	029b      	lsls	r3, r3, #10
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	4313      	orrs	r3, r2
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2ae:	801a      	strh	r2, [r3, #0]
 800c2b0:	e070      	b.n	800c394 <USB_EPStartXfer+0x10ea>
 800c2b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	691b      	ldr	r3, [r3, #16]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d10c      	bne.n	800c2dc <USB_EPStartXfer+0x1032>
 800c2c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2c6:	881b      	ldrh	r3, [r3, #0]
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2d8:	801a      	strh	r2, [r3, #0]
 800c2da:	e05b      	b.n	800c394 <USB_EPStartXfer+0x10ea>
 800c2dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	085b      	lsrs	r3, r3, #1
 800c2ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c2ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	f003 0301 	and.w	r3, r3, #1
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d004      	beq.n	800c30c <USB_EPStartXfer+0x1062>
 800c302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c306:	3301      	adds	r3, #1
 800c308:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c30c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c310:	881b      	ldrh	r3, [r3, #0]
 800c312:	b29a      	uxth	r2, r3
 800c314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c318:	b29b      	uxth	r3, r3
 800c31a:	029b      	lsls	r3, r3, #10
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	4313      	orrs	r3, r2
 800c320:	b29a      	uxth	r2, r3
 800c322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c326:	801a      	strh	r2, [r3, #0]
 800c328:	e034      	b.n	800c394 <USB_EPStartXfer+0x10ea>
 800c32a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c32e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	785b      	ldrb	r3, [r3, #1]
 800c336:	2b01      	cmp	r3, #1
 800c338:	d12c      	bne.n	800c394 <USB_EPStartXfer+0x10ea>
 800c33a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c33e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c34c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c356:	b29b      	uxth	r3, r3
 800c358:	461a      	mov	r2, r3
 800c35a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c35e:	4413      	add	r3, r2
 800c360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	00da      	lsls	r2, r3, #3
 800c372:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c376:	4413      	add	r3, r2
 800c378:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c37c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	b29a      	uxth	r2, r3
 800c38e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c392:	801a      	strh	r2, [r3, #0]
 800c394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c398:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c3a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	785b      	ldrb	r3, [r3, #1]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f040 809d 	bne.w	800c4ee <USB_EPStartXfer+0x1244>
 800c3b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c3c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3d8:	4413      	add	r3, r2
 800c3da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c3de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	00da      	lsls	r2, r3, #3
 800c3ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3f0:	4413      	add	r3, r2
 800c3f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c3f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c3fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3fe:	881b      	ldrh	r3, [r3, #0]
 800c400:	b29b      	uxth	r3, r3
 800c402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c406:	b29a      	uxth	r2, r3
 800c408:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c40c:	801a      	strh	r2, [r3, #0]
 800c40e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	2b3e      	cmp	r3, #62	; 0x3e
 800c41c:	d92b      	bls.n	800c476 <USB_EPStartXfer+0x11cc>
 800c41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	095b      	lsrs	r3, r3, #5
 800c42c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	f003 031f 	and.w	r3, r3, #31
 800c440:	2b00      	cmp	r3, #0
 800c442:	d104      	bne.n	800c44e <USB_EPStartXfer+0x11a4>
 800c444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c448:	3b01      	subs	r3, #1
 800c44a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c44e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c452:	881b      	ldrh	r3, [r3, #0]
 800c454:	b29a      	uxth	r2, r3
 800c456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	029b      	lsls	r3, r3, #10
 800c45e:	b29b      	uxth	r3, r3
 800c460:	4313      	orrs	r3, r2
 800c462:	b29b      	uxth	r3, r3
 800c464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c46c:	b29a      	uxth	r2, r3
 800c46e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c472:	801a      	strh	r2, [r3, #0]
 800c474:	e069      	b.n	800c54a <USB_EPStartXfer+0x12a0>
 800c476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c47a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	691b      	ldr	r3, [r3, #16]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10c      	bne.n	800c4a0 <USB_EPStartXfer+0x11f6>
 800c486:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c48a:	881b      	ldrh	r3, [r3, #0]
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c496:	b29a      	uxth	r2, r3
 800c498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c49c:	801a      	strh	r2, [r3, #0]
 800c49e:	e054      	b.n	800c54a <USB_EPStartXfer+0x12a0>
 800c4a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	691b      	ldr	r3, [r3, #16]
 800c4ac:	085b      	lsrs	r3, r3, #1
 800c4ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	691b      	ldr	r3, [r3, #16]
 800c4be:	f003 0301 	and.w	r3, r3, #1
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d004      	beq.n	800c4d0 <USB_EPStartXfer+0x1226>
 800c4c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c4d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c4d4:	881b      	ldrh	r3, [r3, #0]
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	029b      	lsls	r3, r3, #10
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c4ea:	801a      	strh	r2, [r3, #0]
 800c4ec:	e02d      	b.n	800c54a <USB_EPStartXfer+0x12a0>
 800c4ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	785b      	ldrb	r3, [r3, #1]
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d125      	bne.n	800c54a <USB_EPStartXfer+0x12a0>
 800c4fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	461a      	mov	r2, r3
 800c510:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c514:	4413      	add	r3, r2
 800c516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c51e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	00da      	lsls	r2, r3, #3
 800c528:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c52c:	4413      	add	r3, r2
 800c52e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c53a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	b29a      	uxth	r2, r3
 800c544:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c548:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c54e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	69db      	ldr	r3, [r3, #28]
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 8218 	beq.w	800c98c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c55c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c56a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	4413      	add	r3, r2
 800c576:	881b      	ldrh	r3, [r3, #0]
 800c578:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c57c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c584:	2b00      	cmp	r3, #0
 800c586:	d005      	beq.n	800c594 <USB_EPStartXfer+0x12ea>
 800c588:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10d      	bne.n	800c5b0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c594:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	f040 81f5 	bne.w	800c98c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c5a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c5a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f040 81ee 	bne.w	800c98c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c5b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	881b      	ldrh	r3, [r3, #0]
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5d6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c5da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	441a      	add	r2, r3
 800c5f4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c5f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c604:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c608:	b29b      	uxth	r3, r3
 800c60a:	8013      	strh	r3, [r2, #0]
 800c60c:	e1be      	b.n	800c98c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	78db      	ldrb	r3, [r3, #3]
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	f040 81b4 	bne.w	800c988 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	699a      	ldr	r2, [r3, #24]
 800c62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d917      	bls.n	800c66c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c64c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	699a      	ldr	r2, [r3, #24]
 800c658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c65c:	1ad2      	subs	r2, r2, r3
 800c65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	619a      	str	r2, [r3, #24]
 800c66a:	e00e      	b.n	800c68a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	699b      	ldr	r3, [r3, #24]
 800c678:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2200      	movs	r2, #0
 800c688:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c68a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c68e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	785b      	ldrb	r3, [r3, #1]
 800c696:	2b00      	cmp	r3, #0
 800c698:	f040 8085 	bne.w	800c7a6 <USB_EPStartXfer+0x14fc>
 800c69c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c6c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	00da      	lsls	r2, r3, #3
 800c6d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c6d8:	4413      	add	r3, r2
 800c6da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c6de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c6e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6e6:	881b      	ldrh	r3, [r3, #0]
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6f4:	801a      	strh	r2, [r3, #0]
 800c6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6fa:	2b3e      	cmp	r3, #62	; 0x3e
 800c6fc:	d923      	bls.n	800c746 <USB_EPStartXfer+0x149c>
 800c6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c702:	095b      	lsrs	r3, r3, #5
 800c704:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c70c:	f003 031f 	and.w	r3, r3, #31
 800c710:	2b00      	cmp	r3, #0
 800c712:	d104      	bne.n	800c71e <USB_EPStartXfer+0x1474>
 800c714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c718:	3b01      	subs	r3, #1
 800c71a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c71e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c722:	881b      	ldrh	r3, [r3, #0]
 800c724:	b29a      	uxth	r2, r3
 800c726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	029b      	lsls	r3, r3, #10
 800c72e:	b29b      	uxth	r3, r3
 800c730:	4313      	orrs	r3, r2
 800c732:	b29b      	uxth	r3, r3
 800c734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c742:	801a      	strh	r2, [r3, #0]
 800c744:	e060      	b.n	800c808 <USB_EPStartXfer+0x155e>
 800c746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10c      	bne.n	800c768 <USB_EPStartXfer+0x14be>
 800c74e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c752:	881b      	ldrh	r3, [r3, #0]
 800c754:	b29b      	uxth	r3, r3
 800c756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c75a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c75e:	b29a      	uxth	r2, r3
 800c760:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c764:	801a      	strh	r2, [r3, #0]
 800c766:	e04f      	b.n	800c808 <USB_EPStartXfer+0x155e>
 800c768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c76c:	085b      	lsrs	r3, r3, #1
 800c76e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c776:	f003 0301 	and.w	r3, r3, #1
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d004      	beq.n	800c788 <USB_EPStartXfer+0x14de>
 800c77e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c782:	3301      	adds	r3, #1
 800c784:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c788:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c78c:	881b      	ldrh	r3, [r3, #0]
 800c78e:	b29a      	uxth	r2, r3
 800c790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c794:	b29b      	uxth	r3, r3
 800c796:	029b      	lsls	r3, r3, #10
 800c798:	b29b      	uxth	r3, r3
 800c79a:	4313      	orrs	r3, r2
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c7a2:	801a      	strh	r2, [r3, #0]
 800c7a4:	e030      	b.n	800c808 <USB_EPStartXfer+0x155e>
 800c7a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	785b      	ldrb	r3, [r3, #1]
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d128      	bne.n	800c808 <USB_EPStartXfer+0x155e>
 800c7b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c7c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7da:	4413      	add	r3, r2
 800c7dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	00da      	lsls	r2, r3, #3
 800c7ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7f2:	4413      	add	r3, r2
 800c7f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c7f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c800:	b29a      	uxth	r2, r3
 800c802:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c806:	801a      	strh	r2, [r3, #0]
 800c808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c80c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c81a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	785b      	ldrb	r3, [r3, #1]
 800c822:	2b00      	cmp	r3, #0
 800c824:	f040 8085 	bne.w	800c932 <USB_EPStartXfer+0x1688>
 800c828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c82c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c83a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c844:	b29b      	uxth	r3, r3
 800c846:	461a      	mov	r2, r3
 800c848:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c84c:	4413      	add	r3, r2
 800c84e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	00da      	lsls	r2, r3, #3
 800c860:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c864:	4413      	add	r3, r2
 800c866:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c86a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c86e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c872:	881b      	ldrh	r3, [r3, #0]
 800c874:	b29b      	uxth	r3, r3
 800c876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c880:	801a      	strh	r2, [r3, #0]
 800c882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c886:	2b3e      	cmp	r3, #62	; 0x3e
 800c888:	d923      	bls.n	800c8d2 <USB_EPStartXfer+0x1628>
 800c88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c88e:	095b      	lsrs	r3, r3, #5
 800c890:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c898:	f003 031f 	and.w	r3, r3, #31
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d104      	bne.n	800c8aa <USB_EPStartXfer+0x1600>
 800c8a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c8aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8ae:	881b      	ldrh	r3, [r3, #0]
 800c8b0:	b29a      	uxth	r2, r3
 800c8b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	029b      	lsls	r3, r3, #10
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8ce:	801a      	strh	r2, [r3, #0]
 800c8d0:	e05c      	b.n	800c98c <USB_EPStartXfer+0x16e2>
 800c8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d10c      	bne.n	800c8f4 <USB_EPStartXfer+0x164a>
 800c8da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8de:	881b      	ldrh	r3, [r3, #0]
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8f0:	801a      	strh	r2, [r3, #0]
 800c8f2:	e04b      	b.n	800c98c <USB_EPStartXfer+0x16e2>
 800c8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8f8:	085b      	lsrs	r3, r3, #1
 800c8fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c902:	f003 0301 	and.w	r3, r3, #1
 800c906:	2b00      	cmp	r3, #0
 800c908:	d004      	beq.n	800c914 <USB_EPStartXfer+0x166a>
 800c90a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c90e:	3301      	adds	r3, #1
 800c910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c914:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c918:	881b      	ldrh	r3, [r3, #0]
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c920:	b29b      	uxth	r3, r3
 800c922:	029b      	lsls	r3, r3, #10
 800c924:	b29b      	uxth	r3, r3
 800c926:	4313      	orrs	r3, r2
 800c928:	b29a      	uxth	r2, r3
 800c92a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c92e:	801a      	strh	r2, [r3, #0]
 800c930:	e02c      	b.n	800c98c <USB_EPStartXfer+0x16e2>
 800c932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	785b      	ldrb	r3, [r3, #1]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d124      	bne.n	800c98c <USB_EPStartXfer+0x16e2>
 800c942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c950:	b29b      	uxth	r3, r3
 800c952:	461a      	mov	r2, r3
 800c954:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c958:	4413      	add	r3, r2
 800c95a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c95e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	00da      	lsls	r2, r3, #3
 800c96c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c970:	4413      	add	r3, r2
 800c972:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c97e:	b29a      	uxth	r2, r3
 800c980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c984:	801a      	strh	r2, [r3, #0]
 800c986:	e001      	b.n	800c98c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c988:	2301      	movs	r3, #1
 800c98a:	e03a      	b.n	800ca02 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c98c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c990:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c99a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	4413      	add	r3, r2
 800c9a6:	881b      	ldrh	r3, [r3, #0]
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c9ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9b2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c9b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c9ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c9be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c9c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c9c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c9ca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c9ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	441a      	add	r2, r3
 800c9e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c9ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ca00:	2300      	movs	r3, #0
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	785b      	ldrb	r3, [r3, #1]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d020      	beq.n	800ca60 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	009b      	lsls	r3, r3, #2
 800ca26:	4413      	add	r3, r2
 800ca28:	881b      	ldrh	r3, [r3, #0]
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca34:	81bb      	strh	r3, [r7, #12]
 800ca36:	89bb      	ldrh	r3, [r7, #12]
 800ca38:	f083 0310 	eor.w	r3, r3, #16
 800ca3c:	81bb      	strh	r3, [r7, #12]
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	441a      	add	r2, r3
 800ca48:	89bb      	ldrh	r3, [r7, #12]
 800ca4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	8013      	strh	r3, [r2, #0]
 800ca5e:	e01f      	b.n	800caa0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	4413      	add	r3, r2
 800ca6a:	881b      	ldrh	r3, [r3, #0]
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca76:	81fb      	strh	r3, [r7, #14]
 800ca78:	89fb      	ldrh	r3, [r7, #14]
 800ca7a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ca7e:	81fb      	strh	r3, [r7, #14]
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	441a      	add	r2, r3
 800ca8a:	89fb      	ldrh	r3, [r7, #14]
 800ca8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3714      	adds	r7, #20
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr

0800caae <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800caae:	b480      	push	{r7}
 800cab0:	b087      	sub	sp, #28
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
 800cab6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	7b1b      	ldrb	r3, [r3, #12]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f040 809d 	bne.w	800cbfc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	785b      	ldrb	r3, [r3, #1]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d04c      	beq.n	800cb64 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	881b      	ldrh	r3, [r3, #0]
 800cad6:	823b      	strh	r3, [r7, #16]
 800cad8:	8a3b      	ldrh	r3, [r7, #16]
 800cada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d01b      	beq.n	800cb1a <USB_EPClearStall+0x6c>
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	4413      	add	r3, r2
 800caec:	881b      	ldrh	r3, [r3, #0]
 800caee:	b29b      	uxth	r3, r3
 800caf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800caf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800caf8:	81fb      	strh	r3, [r7, #14]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	441a      	add	r2, r3
 800cb04:	89fb      	ldrh	r3, [r7, #14]
 800cb06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	78db      	ldrb	r3, [r3, #3]
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d06c      	beq.n	800cbfc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	881b      	ldrh	r3, [r3, #0]
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb38:	81bb      	strh	r3, [r7, #12]
 800cb3a:	89bb      	ldrh	r3, [r7, #12]
 800cb3c:	f083 0320 	eor.w	r3, r3, #32
 800cb40:	81bb      	strh	r3, [r7, #12]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	441a      	add	r2, r3
 800cb4c:	89bb      	ldrh	r3, [r7, #12]
 800cb4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	8013      	strh	r3, [r2, #0]
 800cb62:	e04b      	b.n	800cbfc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	4413      	add	r3, r2
 800cb6e:	881b      	ldrh	r3, [r3, #0]
 800cb70:	82fb      	strh	r3, [r7, #22]
 800cb72:	8afb      	ldrh	r3, [r7, #22]
 800cb74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d01b      	beq.n	800cbb4 <USB_EPClearStall+0x106>
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	009b      	lsls	r3, r3, #2
 800cb84:	4413      	add	r3, r2
 800cb86:	881b      	ldrh	r3, [r3, #0]
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb92:	82bb      	strh	r3, [r7, #20]
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	441a      	add	r2, r3
 800cb9e:	8abb      	ldrh	r3, [r7, #20]
 800cba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cba8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cbac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4413      	add	r3, r2
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cbc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbca:	827b      	strh	r3, [r7, #18]
 800cbcc:	8a7b      	ldrh	r3, [r7, #18]
 800cbce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cbd2:	827b      	strh	r3, [r7, #18]
 800cbd4:	8a7b      	ldrh	r3, [r7, #18]
 800cbd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cbda:	827b      	strh	r3, [r7, #18]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	441a      	add	r2, r3
 800cbe6:	8a7b      	ldrh	r3, [r7, #18]
 800cbe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	371c      	adds	r7, #28
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr

0800cc0a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cc0a:	b480      	push	{r7}
 800cc0c:	b083      	sub	sp, #12
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
 800cc12:	460b      	mov	r3, r1
 800cc14:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cc16:	78fb      	ldrb	r3, [r7, #3]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d103      	bne.n	800cc24 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2280      	movs	r2, #128	; 0x80
 800cc20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	370c      	adds	r7, #12
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr

0800cc32 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cc32:	b480      	push	{r7}
 800cc34:	b083      	sub	sp, #12
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cc52:	2300      	movs	r3, #0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b085      	sub	sp, #20
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cc72:	68fb      	ldr	r3, [r7, #12]
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3714      	adds	r7, #20
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b08b      	sub	sp, #44	; 0x2c
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	4611      	mov	r1, r2
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	460b      	mov	r3, r1
 800cc90:	80fb      	strh	r3, [r7, #6]
 800cc92:	4613      	mov	r3, r2
 800cc94:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cc96:	88bb      	ldrh	r3, [r7, #4]
 800cc98:	3301      	adds	r3, #1
 800cc9a:	085b      	lsrs	r3, r3, #1
 800cc9c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cca6:	88fa      	ldrh	r2, [r7, #6]
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	4413      	add	r3, r2
 800ccac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccb0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	627b      	str	r3, [r7, #36]	; 0x24
 800ccb6:	e01b      	b.n	800ccf0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	021b      	lsls	r3, r3, #8
 800ccc6:	b21a      	sxth	r2, r3
 800ccc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cccc:	4313      	orrs	r3, r2
 800ccce:	b21b      	sxth	r3, r3
 800ccd0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ccd2:	6a3b      	ldr	r3, [r7, #32]
 800ccd4:	8a7a      	ldrh	r2, [r7, #18]
 800ccd6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ccd8:	6a3b      	ldr	r3, [r7, #32]
 800ccda:	3302      	adds	r3, #2
 800ccdc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	3301      	adds	r3, #1
 800cce2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	3301      	adds	r3, #1
 800cce8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ccea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccec:	3b01      	subs	r3, #1
 800ccee:	627b      	str	r3, [r7, #36]	; 0x24
 800ccf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1e0      	bne.n	800ccb8 <USB_WritePMA+0x38>
  }
}
 800ccf6:	bf00      	nop
 800ccf8:	bf00      	nop
 800ccfa:	372c      	adds	r7, #44	; 0x2c
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b08b      	sub	sp, #44	; 0x2c
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	4611      	mov	r1, r2
 800cd10:	461a      	mov	r2, r3
 800cd12:	460b      	mov	r3, r1
 800cd14:	80fb      	strh	r3, [r7, #6]
 800cd16:	4613      	mov	r3, r2
 800cd18:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cd1a:	88bb      	ldrh	r3, [r7, #4]
 800cd1c:	085b      	lsrs	r3, r3, #1
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cd2a:	88fa      	ldrh	r2, [r7, #6]
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	4413      	add	r3, r2
 800cd30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd34:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	627b      	str	r3, [r7, #36]	; 0x24
 800cd3a:	e018      	b.n	800cd6e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cd3c:	6a3b      	ldr	r3, [r7, #32]
 800cd3e:	881b      	ldrh	r3, [r3, #0]
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cd44:	6a3b      	ldr	r3, [r7, #32]
 800cd46:	3302      	adds	r3, #2
 800cd48:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	b2da      	uxtb	r2, r3
 800cd4e:	69fb      	ldr	r3, [r7, #28]
 800cd50:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	3301      	adds	r3, #1
 800cd56:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	0a1b      	lsrs	r3, r3, #8
 800cd5c:	b2da      	uxtb	r2, r3
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cd62:	69fb      	ldr	r3, [r7, #28]
 800cd64:	3301      	adds	r3, #1
 800cd66:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	627b      	str	r3, [r7, #36]	; 0x24
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1e3      	bne.n	800cd3c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cd74:	88bb      	ldrh	r3, [r7, #4]
 800cd76:	f003 0301 	and.w	r3, r3, #1
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d007      	beq.n	800cd90 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800cd80:	6a3b      	ldr	r3, [r7, #32]
 800cd82:	881b      	ldrh	r3, [r3, #0]
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	b2da      	uxtb	r2, r3
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	701a      	strb	r2, [r3, #0]
  }
}
 800cd90:	bf00      	nop
 800cd92:	372c      	adds	r7, #44	; 0x2c
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	460b      	mov	r3, r1
 800cda6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cda8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cdac:	f005 fe94 	bl	8012ad8 <USBD_static_malloc>
 800cdb0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d109      	bne.n	800cdcc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	32b0      	adds	r2, #176	; 0xb0
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cdc8:	2302      	movs	r3, #2
 800cdca:	e0d4      	b.n	800cf76 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cdcc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cdd0:	2100      	movs	r1, #0
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f006 f94a 	bl	801306c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	32b0      	adds	r2, #176	; 0xb0
 800cde2:	68f9      	ldr	r1, [r7, #12]
 800cde4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	32b0      	adds	r2, #176	; 0xb0
 800cdf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	7c1b      	ldrb	r3, [r3, #16]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d138      	bne.n	800ce76 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ce04:	4b5e      	ldr	r3, [pc, #376]	; (800cf80 <USBD_CDC_Init+0x1e4>)
 800ce06:	7819      	ldrb	r1, [r3, #0]
 800ce08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce0c:	2202      	movs	r2, #2
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f005 fd09 	bl	8012826 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ce14:	4b5a      	ldr	r3, [pc, #360]	; (800cf80 <USBD_CDC_Init+0x1e4>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	f003 020f 	and.w	r2, r3, #15
 800ce1c:	6879      	ldr	r1, [r7, #4]
 800ce1e:	4613      	mov	r3, r2
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	4413      	add	r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	440b      	add	r3, r1
 800ce28:	3324      	adds	r3, #36	; 0x24
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ce2e:	4b55      	ldr	r3, [pc, #340]	; (800cf84 <USBD_CDC_Init+0x1e8>)
 800ce30:	7819      	ldrb	r1, [r3, #0]
 800ce32:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce36:	2202      	movs	r2, #2
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f005 fcf4 	bl	8012826 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ce3e:	4b51      	ldr	r3, [pc, #324]	; (800cf84 <USBD_CDC_Init+0x1e8>)
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	f003 020f 	and.w	r2, r3, #15
 800ce46:	6879      	ldr	r1, [r7, #4]
 800ce48:	4613      	mov	r3, r2
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	4413      	add	r3, r2
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	440b      	add	r3, r1
 800ce52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ce56:	2201      	movs	r2, #1
 800ce58:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ce5a:	4b4b      	ldr	r3, [pc, #300]	; (800cf88 <USBD_CDC_Init+0x1ec>)
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	f003 020f 	and.w	r2, r3, #15
 800ce62:	6879      	ldr	r1, [r7, #4]
 800ce64:	4613      	mov	r3, r2
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	4413      	add	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	440b      	add	r3, r1
 800ce6e:	3326      	adds	r3, #38	; 0x26
 800ce70:	2210      	movs	r2, #16
 800ce72:	801a      	strh	r2, [r3, #0]
 800ce74:	e035      	b.n	800cee2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ce76:	4b42      	ldr	r3, [pc, #264]	; (800cf80 <USBD_CDC_Init+0x1e4>)
 800ce78:	7819      	ldrb	r1, [r3, #0]
 800ce7a:	2340      	movs	r3, #64	; 0x40
 800ce7c:	2202      	movs	r2, #2
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f005 fcd1 	bl	8012826 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ce84:	4b3e      	ldr	r3, [pc, #248]	; (800cf80 <USBD_CDC_Init+0x1e4>)
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	f003 020f 	and.w	r2, r3, #15
 800ce8c:	6879      	ldr	r1, [r7, #4]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	4413      	add	r3, r2
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	440b      	add	r3, r1
 800ce98:	3324      	adds	r3, #36	; 0x24
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ce9e:	4b39      	ldr	r3, [pc, #228]	; (800cf84 <USBD_CDC_Init+0x1e8>)
 800cea0:	7819      	ldrb	r1, [r3, #0]
 800cea2:	2340      	movs	r3, #64	; 0x40
 800cea4:	2202      	movs	r2, #2
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f005 fcbd 	bl	8012826 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ceac:	4b35      	ldr	r3, [pc, #212]	; (800cf84 <USBD_CDC_Init+0x1e8>)
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	f003 020f 	and.w	r2, r3, #15
 800ceb4:	6879      	ldr	r1, [r7, #4]
 800ceb6:	4613      	mov	r3, r2
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	4413      	add	r3, r2
 800cebc:	009b      	lsls	r3, r3, #2
 800cebe:	440b      	add	r3, r1
 800cec0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cec4:	2201      	movs	r2, #1
 800cec6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cec8:	4b2f      	ldr	r3, [pc, #188]	; (800cf88 <USBD_CDC_Init+0x1ec>)
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	f003 020f 	and.w	r2, r3, #15
 800ced0:	6879      	ldr	r1, [r7, #4]
 800ced2:	4613      	mov	r3, r2
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	4413      	add	r3, r2
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	440b      	add	r3, r1
 800cedc:	3326      	adds	r3, #38	; 0x26
 800cede:	2210      	movs	r2, #16
 800cee0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cee2:	4b29      	ldr	r3, [pc, #164]	; (800cf88 <USBD_CDC_Init+0x1ec>)
 800cee4:	7819      	ldrb	r1, [r3, #0]
 800cee6:	2308      	movs	r3, #8
 800cee8:	2203      	movs	r2, #3
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f005 fc9b 	bl	8012826 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cef0:	4b25      	ldr	r3, [pc, #148]	; (800cf88 <USBD_CDC_Init+0x1ec>)
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	f003 020f 	and.w	r2, r3, #15
 800cef8:	6879      	ldr	r1, [r7, #4]
 800cefa:	4613      	mov	r3, r2
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	4413      	add	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	440b      	add	r3, r1
 800cf04:	3324      	adds	r3, #36	; 0x24
 800cf06:	2201      	movs	r2, #1
 800cf08:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	33b0      	adds	r3, #176	; 0xb0
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	4413      	add	r3, r2
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d101      	bne.n	800cf44 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cf40:	2302      	movs	r3, #2
 800cf42:	e018      	b.n	800cf76 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	7c1b      	ldrb	r3, [r3, #16]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d10a      	bne.n	800cf62 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cf4c:	4b0d      	ldr	r3, [pc, #52]	; (800cf84 <USBD_CDC_Init+0x1e8>)
 800cf4e:	7819      	ldrb	r1, [r3, #0]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cf56:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f005 fd52 	bl	8012a04 <USBD_LL_PrepareReceive>
 800cf60:	e008      	b.n	800cf74 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cf62:	4b08      	ldr	r3, [pc, #32]	; (800cf84 <USBD_CDC_Init+0x1e8>)
 800cf64:	7819      	ldrb	r1, [r3, #0]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cf6c:	2340      	movs	r3, #64	; 0x40
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f005 fd48 	bl	8012a04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	200000df 	.word	0x200000df
 800cf84:	200000e0 	.word	0x200000e0
 800cf88:	200000e1 	.word	0x200000e1

0800cf8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	460b      	mov	r3, r1
 800cf96:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cf98:	4b3a      	ldr	r3, [pc, #232]	; (800d084 <USBD_CDC_DeInit+0xf8>)
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f005 fc67 	bl	8012872 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cfa4:	4b37      	ldr	r3, [pc, #220]	; (800d084 <USBD_CDC_DeInit+0xf8>)
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	f003 020f 	and.w	r2, r3, #15
 800cfac:	6879      	ldr	r1, [r7, #4]
 800cfae:	4613      	mov	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4413      	add	r3, r2
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	440b      	add	r3, r1
 800cfb8:	3324      	adds	r3, #36	; 0x24
 800cfba:	2200      	movs	r2, #0
 800cfbc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cfbe:	4b32      	ldr	r3, [pc, #200]	; (800d088 <USBD_CDC_DeInit+0xfc>)
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f005 fc54 	bl	8012872 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cfca:	4b2f      	ldr	r3, [pc, #188]	; (800d088 <USBD_CDC_DeInit+0xfc>)
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	f003 020f 	and.w	r2, r3, #15
 800cfd2:	6879      	ldr	r1, [r7, #4]
 800cfd4:	4613      	mov	r3, r2
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	4413      	add	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	440b      	add	r3, r1
 800cfde:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cfe6:	4b29      	ldr	r3, [pc, #164]	; (800d08c <USBD_CDC_DeInit+0x100>)
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	4619      	mov	r1, r3
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f005 fc40 	bl	8012872 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cff2:	4b26      	ldr	r3, [pc, #152]	; (800d08c <USBD_CDC_DeInit+0x100>)
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	f003 020f 	and.w	r2, r3, #15
 800cffa:	6879      	ldr	r1, [r7, #4]
 800cffc:	4613      	mov	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4413      	add	r3, r2
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	440b      	add	r3, r1
 800d006:	3324      	adds	r3, #36	; 0x24
 800d008:	2200      	movs	r2, #0
 800d00a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d00c:	4b1f      	ldr	r3, [pc, #124]	; (800d08c <USBD_CDC_DeInit+0x100>)
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	f003 020f 	and.w	r2, r3, #15
 800d014:	6879      	ldr	r1, [r7, #4]
 800d016:	4613      	mov	r3, r2
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	4413      	add	r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	440b      	add	r3, r1
 800d020:	3326      	adds	r3, #38	; 0x26
 800d022:	2200      	movs	r2, #0
 800d024:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	32b0      	adds	r2, #176	; 0xb0
 800d030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d01f      	beq.n	800d078 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	33b0      	adds	r3, #176	; 0xb0
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	4413      	add	r3, r2
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	32b0      	adds	r2, #176	; 0xb0
 800d056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d05a:	4618      	mov	r0, r3
 800d05c:	f005 fd4a 	bl	8012af4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	32b0      	adds	r2, #176	; 0xb0
 800d06a:	2100      	movs	r1, #0
 800d06c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	200000df 	.word	0x200000df
 800d088:	200000e0 	.word	0x200000e0
 800d08c:	200000e1 	.word	0x200000e1

0800d090 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	32b0      	adds	r2, #176	; 0xb0
 800d0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d101      	bne.n	800d0c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d0bc:	2303      	movs	r3, #3
 800d0be:	e0bf      	b.n	800d240 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d050      	beq.n	800d16e <USBD_CDC_Setup+0xde>
 800d0cc:	2b20      	cmp	r3, #32
 800d0ce:	f040 80af 	bne.w	800d230 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	88db      	ldrh	r3, [r3, #6]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d03a      	beq.n	800d150 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	b25b      	sxtb	r3, r3
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	da1b      	bge.n	800d11c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	33b0      	adds	r3, #176	; 0xb0
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	4413      	add	r3, r2
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	683a      	ldr	r2, [r7, #0]
 800d0f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d0fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d0fc:	683a      	ldr	r2, [r7, #0]
 800d0fe:	88d2      	ldrh	r2, [r2, #6]
 800d100:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	88db      	ldrh	r3, [r3, #6]
 800d106:	2b07      	cmp	r3, #7
 800d108:	bf28      	it	cs
 800d10a:	2307      	movcs	r3, #7
 800d10c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	89fa      	ldrh	r2, [r7, #14]
 800d112:	4619      	mov	r1, r3
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f001 fd21 	bl	800eb5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d11a:	e090      	b.n	800d23e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	785a      	ldrb	r2, [r3, #1]
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	88db      	ldrh	r3, [r3, #6]
 800d12a:	2b3f      	cmp	r3, #63	; 0x3f
 800d12c:	d803      	bhi.n	800d136 <USBD_CDC_Setup+0xa6>
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	88db      	ldrh	r3, [r3, #6]
 800d132:	b2da      	uxtb	r2, r3
 800d134:	e000      	b.n	800d138 <USBD_CDC_Setup+0xa8>
 800d136:	2240      	movs	r2, #64	; 0x40
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d13e:	6939      	ldr	r1, [r7, #16]
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d146:	461a      	mov	r2, r3
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f001 fd33 	bl	800ebb4 <USBD_CtlPrepareRx>
      break;
 800d14e:	e076      	b.n	800d23e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	33b0      	adds	r3, #176	; 0xb0
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	4413      	add	r3, r2
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	683a      	ldr	r2, [r7, #0]
 800d164:	7850      	ldrb	r0, [r2, #1]
 800d166:	2200      	movs	r2, #0
 800d168:	6839      	ldr	r1, [r7, #0]
 800d16a:	4798      	blx	r3
      break;
 800d16c:	e067      	b.n	800d23e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	785b      	ldrb	r3, [r3, #1]
 800d172:	2b0b      	cmp	r3, #11
 800d174:	d851      	bhi.n	800d21a <USBD_CDC_Setup+0x18a>
 800d176:	a201      	add	r2, pc, #4	; (adr r2, 800d17c <USBD_CDC_Setup+0xec>)
 800d178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17c:	0800d1ad 	.word	0x0800d1ad
 800d180:	0800d229 	.word	0x0800d229
 800d184:	0800d21b 	.word	0x0800d21b
 800d188:	0800d21b 	.word	0x0800d21b
 800d18c:	0800d21b 	.word	0x0800d21b
 800d190:	0800d21b 	.word	0x0800d21b
 800d194:	0800d21b 	.word	0x0800d21b
 800d198:	0800d21b 	.word	0x0800d21b
 800d19c:	0800d21b 	.word	0x0800d21b
 800d1a0:	0800d21b 	.word	0x0800d21b
 800d1a4:	0800d1d7 	.word	0x0800d1d7
 800d1a8:	0800d201 	.word	0x0800d201
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b03      	cmp	r3, #3
 800d1b6:	d107      	bne.n	800d1c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d1b8:	f107 030a 	add.w	r3, r7, #10
 800d1bc:	2202      	movs	r2, #2
 800d1be:	4619      	mov	r1, r3
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f001 fccb 	bl	800eb5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d1c6:	e032      	b.n	800d22e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d1c8:	6839      	ldr	r1, [r7, #0]
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f001 fc55 	bl	800ea7a <USBD_CtlError>
            ret = USBD_FAIL;
 800d1d0:	2303      	movs	r3, #3
 800d1d2:	75fb      	strb	r3, [r7, #23]
          break;
 800d1d4:	e02b      	b.n	800d22e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	2b03      	cmp	r3, #3
 800d1e0:	d107      	bne.n	800d1f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d1e2:	f107 030d 	add.w	r3, r7, #13
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f001 fcb6 	bl	800eb5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d1f0:	e01d      	b.n	800d22e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d1f2:	6839      	ldr	r1, [r7, #0]
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f001 fc40 	bl	800ea7a <USBD_CtlError>
            ret = USBD_FAIL;
 800d1fa:	2303      	movs	r3, #3
 800d1fc:	75fb      	strb	r3, [r7, #23]
          break;
 800d1fe:	e016      	b.n	800d22e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d206:	b2db      	uxtb	r3, r3
 800d208:	2b03      	cmp	r3, #3
 800d20a:	d00f      	beq.n	800d22c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f001 fc33 	bl	800ea7a <USBD_CtlError>
            ret = USBD_FAIL;
 800d214:	2303      	movs	r3, #3
 800d216:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d218:	e008      	b.n	800d22c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d21a:	6839      	ldr	r1, [r7, #0]
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f001 fc2c 	bl	800ea7a <USBD_CtlError>
          ret = USBD_FAIL;
 800d222:	2303      	movs	r3, #3
 800d224:	75fb      	strb	r3, [r7, #23]
          break;
 800d226:	e002      	b.n	800d22e <USBD_CDC_Setup+0x19e>
          break;
 800d228:	bf00      	nop
 800d22a:	e008      	b.n	800d23e <USBD_CDC_Setup+0x1ae>
          break;
 800d22c:	bf00      	nop
      }
      break;
 800d22e:	e006      	b.n	800d23e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d230:	6839      	ldr	r1, [r7, #0]
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f001 fc21 	bl	800ea7a <USBD_CtlError>
      ret = USBD_FAIL;
 800d238:	2303      	movs	r3, #3
 800d23a:	75fb      	strb	r3, [r7, #23]
      break;
 800d23c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d23e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3718      	adds	r7, #24
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	460b      	mov	r3, r1
 800d252:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d25a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	32b0      	adds	r2, #176	; 0xb0
 800d266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d101      	bne.n	800d272 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d26e:	2303      	movs	r3, #3
 800d270:	e065      	b.n	800d33e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	32b0      	adds	r2, #176	; 0xb0
 800d27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d280:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d282:	78fb      	ldrb	r3, [r7, #3]
 800d284:	f003 020f 	and.w	r2, r3, #15
 800d288:	6879      	ldr	r1, [r7, #4]
 800d28a:	4613      	mov	r3, r2
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	4413      	add	r3, r2
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	440b      	add	r3, r1
 800d294:	3318      	adds	r3, #24
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d02f      	beq.n	800d2fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d29c:	78fb      	ldrb	r3, [r7, #3]
 800d29e:	f003 020f 	and.w	r2, r3, #15
 800d2a2:	6879      	ldr	r1, [r7, #4]
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	4413      	add	r3, r2
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	440b      	add	r3, r1
 800d2ae:	3318      	adds	r3, #24
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	78fb      	ldrb	r3, [r7, #3]
 800d2b4:	f003 010f 	and.w	r1, r3, #15
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	440b      	add	r3, r1
 800d2c0:	00db      	lsls	r3, r3, #3
 800d2c2:	4403      	add	r3, r0
 800d2c4:	3320      	adds	r3, #32
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	fbb2 f1f3 	udiv	r1, r2, r3
 800d2cc:	fb01 f303 	mul.w	r3, r1, r3
 800d2d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d112      	bne.n	800d2fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d2d6:	78fb      	ldrb	r3, [r7, #3]
 800d2d8:	f003 020f 	and.w	r2, r3, #15
 800d2dc:	6879      	ldr	r1, [r7, #4]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	4413      	add	r3, r2
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	440b      	add	r3, r1
 800d2e8:	3318      	adds	r3, #24
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d2ee:	78f9      	ldrb	r1, [r7, #3]
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f005 fb64 	bl	80129c2 <USBD_LL_Transmit>
 800d2fa:	e01f      	b.n	800d33c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	2200      	movs	r2, #0
 800d300:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	33b0      	adds	r3, #176	; 0xb0
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4413      	add	r3, r2
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d010      	beq.n	800d33c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	33b0      	adds	r3, #176	; 0xb0
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	4413      	add	r3, r2
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	68ba      	ldr	r2, [r7, #8]
 800d32e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d332:	68ba      	ldr	r2, [r7, #8]
 800d334:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d338:	78fa      	ldrb	r2, [r7, #3]
 800d33a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d33c:	2300      	movs	r3, #0
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3710      	adds	r7, #16
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}

0800d346 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d346:	b580      	push	{r7, lr}
 800d348:	b084      	sub	sp, #16
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
 800d34e:	460b      	mov	r3, r1
 800d350:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	32b0      	adds	r2, #176	; 0xb0
 800d35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d360:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	32b0      	adds	r2, #176	; 0xb0
 800d36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d101      	bne.n	800d378 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d374:	2303      	movs	r3, #3
 800d376:	e01a      	b.n	800d3ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d378:	78fb      	ldrb	r3, [r7, #3]
 800d37a:	4619      	mov	r1, r3
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f005 fb62 	bl	8012a46 <USBD_LL_GetRxDataSize>
 800d382:	4602      	mov	r2, r0
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	33b0      	adds	r3, #176	; 0xb0
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	4413      	add	r3, r2
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	68fa      	ldr	r2, [r7, #12]
 800d39e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d3a2:	68fa      	ldr	r2, [r7, #12]
 800d3a4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b084      	sub	sp, #16
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	32b0      	adds	r2, #176	; 0xb0
 800d3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d101      	bne.n	800d3d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	e025      	b.n	800d424 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	33b0      	adds	r3, #176	; 0xb0
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4413      	add	r3, r2
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d01a      	beq.n	800d422 <USBD_CDC_EP0_RxReady+0x6c>
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d3f2:	2bff      	cmp	r3, #255	; 0xff
 800d3f4:	d015      	beq.n	800d422 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	33b0      	adds	r3, #176	; 0xb0
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4413      	add	r3, r2
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d40e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d416:	b292      	uxth	r2, r2
 800d418:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	22ff      	movs	r2, #255	; 0xff
 800d41e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d434:	2182      	movs	r1, #130	; 0x82
 800d436:	4818      	ldr	r0, [pc, #96]	; (800d498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d438:	f000 fcbd 	bl	800ddb6 <USBD_GetEpDesc>
 800d43c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d43e:	2101      	movs	r1, #1
 800d440:	4815      	ldr	r0, [pc, #84]	; (800d498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d442:	f000 fcb8 	bl	800ddb6 <USBD_GetEpDesc>
 800d446:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d448:	2181      	movs	r1, #129	; 0x81
 800d44a:	4813      	ldr	r0, [pc, #76]	; (800d498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d44c:	f000 fcb3 	bl	800ddb6 <USBD_GetEpDesc>
 800d450:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d002      	beq.n	800d45e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	2210      	movs	r2, #16
 800d45c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d006      	beq.n	800d472 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	2200      	movs	r2, #0
 800d468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d46c:	711a      	strb	r2, [r3, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d006      	beq.n	800d486 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2200      	movs	r2, #0
 800d47c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d480:	711a      	strb	r2, [r3, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2243      	movs	r2, #67	; 0x43
 800d48a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d48c:	4b02      	ldr	r3, [pc, #8]	; (800d498 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3718      	adds	r7, #24
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	2000009c 	.word	0x2000009c

0800d49c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b086      	sub	sp, #24
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d4a4:	2182      	movs	r1, #130	; 0x82
 800d4a6:	4818      	ldr	r0, [pc, #96]	; (800d508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d4a8:	f000 fc85 	bl	800ddb6 <USBD_GetEpDesc>
 800d4ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	4815      	ldr	r0, [pc, #84]	; (800d508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d4b2:	f000 fc80 	bl	800ddb6 <USBD_GetEpDesc>
 800d4b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d4b8:	2181      	movs	r1, #129	; 0x81
 800d4ba:	4813      	ldr	r0, [pc, #76]	; (800d508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d4bc:	f000 fc7b 	bl	800ddb6 <USBD_GetEpDesc>
 800d4c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d002      	beq.n	800d4ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	2210      	movs	r2, #16
 800d4cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d006      	beq.n	800d4e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	711a      	strb	r2, [r3, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f042 0202 	orr.w	r2, r2, #2
 800d4e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d006      	beq.n	800d4f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	711a      	strb	r2, [r3, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f042 0202 	orr.w	r2, r2, #2
 800d4f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2243      	movs	r2, #67	; 0x43
 800d4fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d4fc:	4b02      	ldr	r3, [pc, #8]	; (800d508 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3718      	adds	r7, #24
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	2000009c 	.word	0x2000009c

0800d50c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b086      	sub	sp, #24
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d514:	2182      	movs	r1, #130	; 0x82
 800d516:	4818      	ldr	r0, [pc, #96]	; (800d578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d518:	f000 fc4d 	bl	800ddb6 <USBD_GetEpDesc>
 800d51c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d51e:	2101      	movs	r1, #1
 800d520:	4815      	ldr	r0, [pc, #84]	; (800d578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d522:	f000 fc48 	bl	800ddb6 <USBD_GetEpDesc>
 800d526:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d528:	2181      	movs	r1, #129	; 0x81
 800d52a:	4813      	ldr	r0, [pc, #76]	; (800d578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d52c:	f000 fc43 	bl	800ddb6 <USBD_GetEpDesc>
 800d530:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	2210      	movs	r2, #16
 800d53c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d006      	beq.n	800d552 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	2200      	movs	r2, #0
 800d548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d54c:	711a      	strb	r2, [r3, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d006      	beq.n	800d566 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d560:	711a      	strb	r2, [r3, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2243      	movs	r2, #67	; 0x43
 800d56a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d56c:	4b02      	ldr	r3, [pc, #8]	; (800d578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3718      	adds	r7, #24
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	2000009c 	.word	0x2000009c

0800d57c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	220a      	movs	r2, #10
 800d588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d58a:	4b03      	ldr	r3, [pc, #12]	; (800d598 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	370c      	adds	r7, #12
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr
 800d598:	20000058 	.word	0x20000058

0800d59c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d101      	bne.n	800d5b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d5ac:	2303      	movs	r3, #3
 800d5ae:	e009      	b.n	800d5c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	33b0      	adds	r3, #176	; 0xb0
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	4413      	add	r3, r2
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	370c      	adds	r7, #12
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	32b0      	adds	r2, #176	; 0xb0
 800d5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d101      	bne.n	800d5f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d5f2:	2303      	movs	r3, #3
 800d5f4:	e008      	b.n	800d608 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	68ba      	ldr	r2, [r7, #8]
 800d5fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d606:	2300      	movs	r3, #0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	371c      	adds	r7, #28
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d614:	b480      	push	{r7}
 800d616:	b085      	sub	sp, #20
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	32b0      	adds	r2, #176	; 0xb0
 800d628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d62c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d101      	bne.n	800d638 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d634:	2303      	movs	r3, #3
 800d636:	e004      	b.n	800d642 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d640:	2300      	movs	r3, #0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3714      	adds	r7, #20
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr
	...

0800d650 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	32b0      	adds	r2, #176	; 0xb0
 800d662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d666:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d668:	2301      	movs	r3, #1
 800d66a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d101      	bne.n	800d676 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d672:	2303      	movs	r3, #3
 800d674:	e025      	b.n	800d6c2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d11f      	bne.n	800d6c0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	2201      	movs	r2, #1
 800d684:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d688:	4b10      	ldr	r3, [pc, #64]	; (800d6cc <USBD_CDC_TransmitPacket+0x7c>)
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	f003 020f 	and.w	r2, r3, #15
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	4613      	mov	r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	4413      	add	r3, r2
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	4403      	add	r3, r0
 800d6a2:	3318      	adds	r3, #24
 800d6a4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d6a6:	4b09      	ldr	r3, [pc, #36]	; (800d6cc <USBD_CDC_TransmitPacket+0x7c>)
 800d6a8:	7819      	ldrb	r1, [r3, #0]
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f005 f983 	bl	80129c2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	200000df 	.word	0x200000df

0800d6d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	32b0      	adds	r2, #176	; 0xb0
 800d6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	32b0      	adds	r2, #176	; 0xb0
 800d6f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d101      	bne.n	800d6fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d6fa:	2303      	movs	r3, #3
 800d6fc:	e018      	b.n	800d730 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	7c1b      	ldrb	r3, [r3, #16]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d10a      	bne.n	800d71c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d706:	4b0c      	ldr	r3, [pc, #48]	; (800d738 <USBD_CDC_ReceivePacket+0x68>)
 800d708:	7819      	ldrb	r1, [r3, #0]
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d710:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f005 f975 	bl	8012a04 <USBD_LL_PrepareReceive>
 800d71a:	e008      	b.n	800d72e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d71c:	4b06      	ldr	r3, [pc, #24]	; (800d738 <USBD_CDC_ReceivePacket+0x68>)
 800d71e:	7819      	ldrb	r1, [r3, #0]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d726:	2340      	movs	r3, #64	; 0x40
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f005 f96b 	bl	8012a04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	200000e0 	.word	0x200000e0

0800d73c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b086      	sub	sp, #24
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	4613      	mov	r3, r2
 800d748:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d101      	bne.n	800d754 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d750:	2303      	movs	r3, #3
 800d752:	e01f      	b.n	800d794 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2200      	movs	r2, #0
 800d758:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2200      	movs	r2, #0
 800d760:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2200      	movs	r2, #0
 800d768:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d003      	beq.n	800d77a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2201      	movs	r2, #1
 800d77e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	79fa      	ldrb	r2, [r7, #7]
 800d786:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f004 ffcf 	bl	801272c <USBD_LL_Init>
 800d78e:	4603      	mov	r3, r0
 800d790:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d792:	7dfb      	ldrb	r3, [r7, #23]
}
 800d794:	4618      	mov	r0, r3
 800d796:	3718      	adds	r7, #24
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d101      	bne.n	800d7b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d7b0:	2303      	movs	r3, #3
 800d7b2:	e025      	b.n	800d800 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	683a      	ldr	r2, [r7, #0]
 800d7b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	32ae      	adds	r2, #174	; 0xae
 800d7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00f      	beq.n	800d7f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	32ae      	adds	r2, #174	; 0xae
 800d7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e0:	f107 020e 	add.w	r2, r7, #14
 800d7e4:	4610      	mov	r0, r2
 800d7e6:	4798      	blx	r3
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d7f6:	1c5a      	adds	r2, r3, #1
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	3710      	adds	r7, #16
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f004 ffed 	bl	80127f0 <USBD_LL_Start>
 800d816:	4603      	mov	r3, r0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3708      	adds	r7, #8
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d828:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	370c      	adds	r7, #12
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr

0800d836 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b084      	sub	sp, #16
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	460b      	mov	r3, r1
 800d840:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d842:	2300      	movs	r3, #0
 800d844:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d009      	beq.n	800d864 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	78fa      	ldrb	r2, [r7, #3]
 800d85a:	4611      	mov	r1, r2
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	4798      	blx	r3
 800d860:	4603      	mov	r3, r0
 800d862:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d864:	7bfb      	ldrb	r3, [r7, #15]
}
 800d866:	4618      	mov	r0, r3
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b084      	sub	sp, #16
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	460b      	mov	r3, r1
 800d878:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d87a:	2300      	movs	r3, #0
 800d87c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	78fa      	ldrb	r2, [r7, #3]
 800d888:	4611      	mov	r1, r2
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	4798      	blx	r3
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d001      	beq.n	800d898 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d894:	2303      	movs	r3, #3
 800d896:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d898:	7bfb      	ldrb	r3, [r7, #15]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b084      	sub	sp, #16
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d8b2:	6839      	ldr	r1, [r7, #0]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f001 f8a6 	bl	800ea06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d8d6:	f003 031f 	and.w	r3, r3, #31
 800d8da:	2b02      	cmp	r3, #2
 800d8dc:	d01a      	beq.n	800d914 <USBD_LL_SetupStage+0x72>
 800d8de:	2b02      	cmp	r3, #2
 800d8e0:	d822      	bhi.n	800d928 <USBD_LL_SetupStage+0x86>
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d002      	beq.n	800d8ec <USBD_LL_SetupStage+0x4a>
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d00a      	beq.n	800d900 <USBD_LL_SetupStage+0x5e>
 800d8ea:	e01d      	b.n	800d928 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 fad3 	bl	800dea0 <USBD_StdDevReq>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	73fb      	strb	r3, [r7, #15]
      break;
 800d8fe:	e020      	b.n	800d942 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d906:	4619      	mov	r1, r3
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f000 fb3b 	bl	800df84 <USBD_StdItfReq>
 800d90e:	4603      	mov	r3, r0
 800d910:	73fb      	strb	r3, [r7, #15]
      break;
 800d912:	e016      	b.n	800d942 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d91a:	4619      	mov	r1, r3
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 fb9d 	bl	800e05c <USBD_StdEPReq>
 800d922:	4603      	mov	r3, r0
 800d924:	73fb      	strb	r3, [r7, #15]
      break;
 800d926:	e00c      	b.n	800d942 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d92e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d932:	b2db      	uxtb	r3, r3
 800d934:	4619      	mov	r1, r3
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f004 ffba 	bl	80128b0 <USBD_LL_StallEP>
 800d93c:	4603      	mov	r3, r0
 800d93e:	73fb      	strb	r3, [r7, #15]
      break;
 800d940:	bf00      	nop
  }

  return ret;
 800d942:	7bfb      	ldrb	r3, [r7, #15]
}
 800d944:	4618      	mov	r0, r3
 800d946:	3710      	adds	r7, #16
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b086      	sub	sp, #24
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	460b      	mov	r3, r1
 800d956:	607a      	str	r2, [r7, #4]
 800d958:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d95a:	2300      	movs	r3, #0
 800d95c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d95e:	7afb      	ldrb	r3, [r7, #11]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d16e      	bne.n	800da42 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d96a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d972:	2b03      	cmp	r3, #3
 800d974:	f040 8098 	bne.w	800daa8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	689a      	ldr	r2, [r3, #8]
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	429a      	cmp	r2, r3
 800d982:	d913      	bls.n	800d9ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	689a      	ldr	r2, [r3, #8]
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	1ad2      	subs	r2, r2, r3
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	68da      	ldr	r2, [r3, #12]
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	4293      	cmp	r3, r2
 800d99c:	bf28      	it	cs
 800d99e:	4613      	movcs	r3, r2
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	6879      	ldr	r1, [r7, #4]
 800d9a4:	68f8      	ldr	r0, [r7, #12]
 800d9a6:	f001 f922 	bl	800ebee <USBD_CtlContinueRx>
 800d9aa:	e07d      	b.n	800daa8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d9b2:	f003 031f 	and.w	r3, r3, #31
 800d9b6:	2b02      	cmp	r3, #2
 800d9b8:	d014      	beq.n	800d9e4 <USBD_LL_DataOutStage+0x98>
 800d9ba:	2b02      	cmp	r3, #2
 800d9bc:	d81d      	bhi.n	800d9fa <USBD_LL_DataOutStage+0xae>
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d002      	beq.n	800d9c8 <USBD_LL_DataOutStage+0x7c>
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d003      	beq.n	800d9ce <USBD_LL_DataOutStage+0x82>
 800d9c6:	e018      	b.n	800d9fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	75bb      	strb	r3, [r7, #22]
            break;
 800d9cc:	e018      	b.n	800da00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f000 f9d2 	bl	800dd82 <USBD_CoreFindIF>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	75bb      	strb	r3, [r7, #22]
            break;
 800d9e2:	e00d      	b.n	800da00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	68f8      	ldr	r0, [r7, #12]
 800d9f0:	f000 f9d4 	bl	800dd9c <USBD_CoreFindEP>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	75bb      	strb	r3, [r7, #22]
            break;
 800d9f8:	e002      	b.n	800da00 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	75bb      	strb	r3, [r7, #22]
            break;
 800d9fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800da00:	7dbb      	ldrb	r3, [r7, #22]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d119      	bne.n	800da3a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	2b03      	cmp	r3, #3
 800da10:	d113      	bne.n	800da3a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800da12:	7dba      	ldrb	r2, [r7, #22]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	32ae      	adds	r2, #174	; 0xae
 800da18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d00b      	beq.n	800da3a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800da22:	7dba      	ldrb	r2, [r7, #22]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800da2a:	7dba      	ldrb	r2, [r7, #22]
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	32ae      	adds	r2, #174	; 0xae
 800da30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da34:	691b      	ldr	r3, [r3, #16]
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800da3a:	68f8      	ldr	r0, [r7, #12]
 800da3c:	f001 f8e8 	bl	800ec10 <USBD_CtlSendStatus>
 800da40:	e032      	b.n	800daa8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800da42:	7afb      	ldrb	r3, [r7, #11]
 800da44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	4619      	mov	r1, r3
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f000 f9a5 	bl	800dd9c <USBD_CoreFindEP>
 800da52:	4603      	mov	r3, r0
 800da54:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da56:	7dbb      	ldrb	r3, [r7, #22]
 800da58:	2bff      	cmp	r3, #255	; 0xff
 800da5a:	d025      	beq.n	800daa8 <USBD_LL_DataOutStage+0x15c>
 800da5c:	7dbb      	ldrb	r3, [r7, #22]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d122      	bne.n	800daa8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	2b03      	cmp	r3, #3
 800da6c:	d117      	bne.n	800da9e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800da6e:	7dba      	ldrb	r2, [r7, #22]
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	32ae      	adds	r2, #174	; 0xae
 800da74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da78:	699b      	ldr	r3, [r3, #24]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d00f      	beq.n	800da9e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800da7e:	7dba      	ldrb	r2, [r7, #22]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800da86:	7dba      	ldrb	r2, [r7, #22]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	32ae      	adds	r2, #174	; 0xae
 800da8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da90:	699b      	ldr	r3, [r3, #24]
 800da92:	7afa      	ldrb	r2, [r7, #11]
 800da94:	4611      	mov	r1, r2
 800da96:	68f8      	ldr	r0, [r7, #12]
 800da98:	4798      	blx	r3
 800da9a:	4603      	mov	r3, r0
 800da9c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800da9e:	7dfb      	ldrb	r3, [r7, #23]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d001      	beq.n	800daa8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800daa4:	7dfb      	ldrb	r3, [r7, #23]
 800daa6:	e000      	b.n	800daaa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800daa8:	2300      	movs	r3, #0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b086      	sub	sp, #24
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	60f8      	str	r0, [r7, #12]
 800daba:	460b      	mov	r3, r1
 800dabc:	607a      	str	r2, [r7, #4]
 800dabe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dac0:	7afb      	ldrb	r3, [r7, #11]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d16f      	bne.n	800dba6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	3314      	adds	r3, #20
 800daca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dad2:	2b02      	cmp	r3, #2
 800dad4:	d15a      	bne.n	800db8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	689a      	ldr	r2, [r3, #8]
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d914      	bls.n	800db0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	689a      	ldr	r2, [r3, #8]
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	1ad2      	subs	r2, r2, r3
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	689b      	ldr	r3, [r3, #8]
 800daf4:	461a      	mov	r2, r3
 800daf6:	6879      	ldr	r1, [r7, #4]
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f001 f84a 	bl	800eb92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dafe:	2300      	movs	r3, #0
 800db00:	2200      	movs	r2, #0
 800db02:	2100      	movs	r1, #0
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f004 ff7d 	bl	8012a04 <USBD_LL_PrepareReceive>
 800db0a:	e03f      	b.n	800db8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	68da      	ldr	r2, [r3, #12]
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	689b      	ldr	r3, [r3, #8]
 800db14:	429a      	cmp	r2, r3
 800db16:	d11c      	bne.n	800db52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	685a      	ldr	r2, [r3, #4]
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800db20:	429a      	cmp	r2, r3
 800db22:	d316      	bcc.n	800db52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	685a      	ldr	r2, [r3, #4]
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800db2e:	429a      	cmp	r2, r3
 800db30:	d20f      	bcs.n	800db52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800db32:	2200      	movs	r2, #0
 800db34:	2100      	movs	r1, #0
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	f001 f82b 	bl	800eb92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2200      	movs	r2, #0
 800db40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db44:	2300      	movs	r3, #0
 800db46:	2200      	movs	r2, #0
 800db48:	2100      	movs	r1, #0
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f004 ff5a 	bl	8012a04 <USBD_LL_PrepareReceive>
 800db50:	e01c      	b.n	800db8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	2b03      	cmp	r3, #3
 800db5c:	d10f      	bne.n	800db7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db64:	68db      	ldr	r3, [r3, #12]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d009      	beq.n	800db7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800db7e:	2180      	movs	r1, #128	; 0x80
 800db80:	68f8      	ldr	r0, [r7, #12]
 800db82:	f004 fe95 	bl	80128b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f001 f855 	bl	800ec36 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d03a      	beq.n	800dc0c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f7ff fe42 	bl	800d820 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2200      	movs	r2, #0
 800dba0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dba4:	e032      	b.n	800dc0c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dba6:	7afb      	ldrb	r3, [r7, #11]
 800dba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	4619      	mov	r1, r3
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	f000 f8f3 	bl	800dd9c <USBD_CoreFindEP>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dbba:	7dfb      	ldrb	r3, [r7, #23]
 800dbbc:	2bff      	cmp	r3, #255	; 0xff
 800dbbe:	d025      	beq.n	800dc0c <USBD_LL_DataInStage+0x15a>
 800dbc0:	7dfb      	ldrb	r3, [r7, #23]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d122      	bne.n	800dc0c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	2b03      	cmp	r3, #3
 800dbd0:	d11c      	bne.n	800dc0c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800dbd2:	7dfa      	ldrb	r2, [r7, #23]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	32ae      	adds	r2, #174	; 0xae
 800dbd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbdc:	695b      	ldr	r3, [r3, #20]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d014      	beq.n	800dc0c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800dbe2:	7dfa      	ldrb	r2, [r7, #23]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dbea:	7dfa      	ldrb	r2, [r7, #23]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	32ae      	adds	r2, #174	; 0xae
 800dbf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbf4:	695b      	ldr	r3, [r3, #20]
 800dbf6:	7afa      	ldrb	r2, [r7, #11]
 800dbf8:	4611      	mov	r1, r2
 800dbfa:	68f8      	ldr	r0, [r7, #12]
 800dbfc:	4798      	blx	r3
 800dbfe:	4603      	mov	r3, r0
 800dc00:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dc02:	7dbb      	ldrb	r3, [r7, #22]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d001      	beq.n	800dc0c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dc08:	7dbb      	ldrb	r3, [r7, #22]
 800dc0a:	e000      	b.n	800dc0e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3718      	adds	r7, #24
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b084      	sub	sp, #16
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2201      	movs	r2, #1
 800dc26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d014      	beq.n	800dc7c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00e      	beq.n	800dc7c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	6852      	ldr	r2, [r2, #4]
 800dc6a:	b2d2      	uxtb	r2, r2
 800dc6c:	4611      	mov	r1, r2
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	4798      	blx	r3
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d001      	beq.n	800dc7c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dc78:	2303      	movs	r3, #3
 800dc7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc7c:	2340      	movs	r3, #64	; 0x40
 800dc7e:	2200      	movs	r2, #0
 800dc80:	2100      	movs	r1, #0
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f004 fdcf 	bl	8012826 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2240      	movs	r2, #64	; 0x40
 800dc94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc98:	2340      	movs	r3, #64	; 0x40
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	2180      	movs	r1, #128	; 0x80
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f004 fdc1 	bl	8012826 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2201      	movs	r2, #1
 800dca8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2240      	movs	r2, #64	; 0x40
 800dcae:	621a      	str	r2, [r3, #32]

  return ret;
 800dcb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3710      	adds	r7, #16
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dcba:	b480      	push	{r7}
 800dcbc:	b083      	sub	sp, #12
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	78fa      	ldrb	r2, [r7, #3]
 800dcca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dccc:	2300      	movs	r3, #0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	370c      	adds	r7, #12
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr

0800dcda <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dcda:	b480      	push	{r7}
 800dcdc:	b083      	sub	sp, #12
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	2b04      	cmp	r3, #4
 800dcec:	d006      	beq.n	800dcfc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcf4:	b2da      	uxtb	r2, r3
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2204      	movs	r2, #4
 800dd00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dd04:	2300      	movs	r3, #0
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	370c      	adds	r7, #12
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dd12:	b480      	push	{r7}
 800dd14:	b083      	sub	sp, #12
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	2b04      	cmp	r3, #4
 800dd24:	d106      	bne.n	800dd34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800dd2c:	b2da      	uxtb	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dd34:	2300      	movs	r3, #0
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	370c      	adds	r7, #12
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr

0800dd42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b082      	sub	sp, #8
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd50:	b2db      	uxtb	r3, r3
 800dd52:	2b03      	cmp	r3, #3
 800dd54:	d110      	bne.n	800dd78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00b      	beq.n	800dd78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd66:	69db      	ldr	r3, [r3, #28]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d005      	beq.n	800dd78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd72:	69db      	ldr	r3, [r3, #28]
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3708      	adds	r7, #8
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dd82:	b480      	push	{r7}
 800dd84:	b083      	sub	sp, #12
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
 800dd8a:	460b      	mov	r3, r1
 800dd8c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dd8e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	370c      	adds	r7, #12
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	460b      	mov	r3, r1
 800dda6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dda8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	370c      	adds	r7, #12
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr

0800ddb6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b086      	sub	sp, #24
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	885b      	ldrh	r3, [r3, #2]
 800ddd2:	b29a      	uxth	r2, r3
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d920      	bls.n	800de20 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dde6:	e013      	b.n	800de10 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dde8:	f107 030a 	add.w	r3, r7, #10
 800ddec:	4619      	mov	r1, r3
 800ddee:	6978      	ldr	r0, [r7, #20]
 800ddf0:	f000 f81b 	bl	800de2a <USBD_GetNextDesc>
 800ddf4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	785b      	ldrb	r3, [r3, #1]
 800ddfa:	2b05      	cmp	r3, #5
 800ddfc:	d108      	bne.n	800de10 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	789b      	ldrb	r3, [r3, #2]
 800de06:	78fa      	ldrb	r2, [r7, #3]
 800de08:	429a      	cmp	r2, r3
 800de0a:	d008      	beq.n	800de1e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800de0c:	2300      	movs	r3, #0
 800de0e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	885b      	ldrh	r3, [r3, #2]
 800de14:	b29a      	uxth	r2, r3
 800de16:	897b      	ldrh	r3, [r7, #10]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d8e5      	bhi.n	800dde8 <USBD_GetEpDesc+0x32>
 800de1c:	e000      	b.n	800de20 <USBD_GetEpDesc+0x6a>
          break;
 800de1e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800de20:	693b      	ldr	r3, [r7, #16]
}
 800de22:	4618      	mov	r0, r3
 800de24:	3718      	adds	r7, #24
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800de2a:	b480      	push	{r7}
 800de2c:	b085      	sub	sp, #20
 800de2e:	af00      	add	r7, sp, #0
 800de30:	6078      	str	r0, [r7, #4]
 800de32:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	881a      	ldrh	r2, [r3, #0]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	b29b      	uxth	r3, r3
 800de42:	4413      	add	r3, r2
 800de44:	b29a      	uxth	r2, r3
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	461a      	mov	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	4413      	add	r3, r2
 800de54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800de56:	68fb      	ldr	r3, [r7, #12]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3714      	adds	r7, #20
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800de64:	b480      	push	{r7}
 800de66:	b087      	sub	sp, #28
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	3301      	adds	r3, #1
 800de7a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800de82:	8a3b      	ldrh	r3, [r7, #16]
 800de84:	021b      	lsls	r3, r3, #8
 800de86:	b21a      	sxth	r2, r3
 800de88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de8c:	4313      	orrs	r3, r2
 800de8e:	b21b      	sxth	r3, r3
 800de90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800de92:	89fb      	ldrh	r3, [r7, #14]
}
 800de94:	4618      	mov	r0, r3
 800de96:	371c      	adds	r7, #28
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr

0800dea0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800deaa:	2300      	movs	r3, #0
 800deac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800deb6:	2b40      	cmp	r3, #64	; 0x40
 800deb8:	d005      	beq.n	800dec6 <USBD_StdDevReq+0x26>
 800deba:	2b40      	cmp	r3, #64	; 0x40
 800debc:	d857      	bhi.n	800df6e <USBD_StdDevReq+0xce>
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d00f      	beq.n	800dee2 <USBD_StdDevReq+0x42>
 800dec2:	2b20      	cmp	r3, #32
 800dec4:	d153      	bne.n	800df6e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	32ae      	adds	r2, #174	; 0xae
 800ded0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ded4:	689b      	ldr	r3, [r3, #8]
 800ded6:	6839      	ldr	r1, [r7, #0]
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	4798      	blx	r3
 800dedc:	4603      	mov	r3, r0
 800dede:	73fb      	strb	r3, [r7, #15]
      break;
 800dee0:	e04a      	b.n	800df78 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	785b      	ldrb	r3, [r3, #1]
 800dee6:	2b09      	cmp	r3, #9
 800dee8:	d83b      	bhi.n	800df62 <USBD_StdDevReq+0xc2>
 800deea:	a201      	add	r2, pc, #4	; (adr r2, 800def0 <USBD_StdDevReq+0x50>)
 800deec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def0:	0800df45 	.word	0x0800df45
 800def4:	0800df59 	.word	0x0800df59
 800def8:	0800df63 	.word	0x0800df63
 800defc:	0800df4f 	.word	0x0800df4f
 800df00:	0800df63 	.word	0x0800df63
 800df04:	0800df23 	.word	0x0800df23
 800df08:	0800df19 	.word	0x0800df19
 800df0c:	0800df63 	.word	0x0800df63
 800df10:	0800df3b 	.word	0x0800df3b
 800df14:	0800df2d 	.word	0x0800df2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800df18:	6839      	ldr	r1, [r7, #0]
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 fa3c 	bl	800e398 <USBD_GetDescriptor>
          break;
 800df20:	e024      	b.n	800df6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800df22:	6839      	ldr	r1, [r7, #0]
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 fbcb 	bl	800e6c0 <USBD_SetAddress>
          break;
 800df2a:	e01f      	b.n	800df6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800df2c:	6839      	ldr	r1, [r7, #0]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 fc0a 	bl	800e748 <USBD_SetConfig>
 800df34:	4603      	mov	r3, r0
 800df36:	73fb      	strb	r3, [r7, #15]
          break;
 800df38:	e018      	b.n	800df6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800df3a:	6839      	ldr	r1, [r7, #0]
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f000 fcad 	bl	800e89c <USBD_GetConfig>
          break;
 800df42:	e013      	b.n	800df6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800df44:	6839      	ldr	r1, [r7, #0]
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 fcde 	bl	800e908 <USBD_GetStatus>
          break;
 800df4c:	e00e      	b.n	800df6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800df4e:	6839      	ldr	r1, [r7, #0]
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f000 fd0d 	bl	800e970 <USBD_SetFeature>
          break;
 800df56:	e009      	b.n	800df6c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800df58:	6839      	ldr	r1, [r7, #0]
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f000 fd31 	bl	800e9c2 <USBD_ClrFeature>
          break;
 800df60:	e004      	b.n	800df6c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800df62:	6839      	ldr	r1, [r7, #0]
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f000 fd88 	bl	800ea7a <USBD_CtlError>
          break;
 800df6a:	bf00      	nop
      }
      break;
 800df6c:	e004      	b.n	800df78 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800df6e:	6839      	ldr	r1, [r7, #0]
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 fd82 	bl	800ea7a <USBD_CtlError>
      break;
 800df76:	bf00      	nop
  }

  return ret;
 800df78:	7bfb      	ldrb	r3, [r7, #15]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3710      	adds	r7, #16
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop

0800df84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df8e:	2300      	movs	r3, #0
 800df90:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df9a:	2b40      	cmp	r3, #64	; 0x40
 800df9c:	d005      	beq.n	800dfaa <USBD_StdItfReq+0x26>
 800df9e:	2b40      	cmp	r3, #64	; 0x40
 800dfa0:	d852      	bhi.n	800e048 <USBD_StdItfReq+0xc4>
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d001      	beq.n	800dfaa <USBD_StdItfReq+0x26>
 800dfa6:	2b20      	cmp	r3, #32
 800dfa8:	d14e      	bne.n	800e048 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	2b02      	cmp	r3, #2
 800dfb6:	d840      	bhi.n	800e03a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	889b      	ldrh	r3, [r3, #4]
 800dfbc:	b2db      	uxtb	r3, r3
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d836      	bhi.n	800e030 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	889b      	ldrh	r3, [r3, #4]
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	4619      	mov	r1, r3
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f7ff fed9 	bl	800dd82 <USBD_CoreFindIF>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dfd4:	7bbb      	ldrb	r3, [r7, #14]
 800dfd6:	2bff      	cmp	r3, #255	; 0xff
 800dfd8:	d01d      	beq.n	800e016 <USBD_StdItfReq+0x92>
 800dfda:	7bbb      	ldrb	r3, [r7, #14]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d11a      	bne.n	800e016 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dfe0:	7bba      	ldrb	r2, [r7, #14]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	32ae      	adds	r2, #174	; 0xae
 800dfe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d00f      	beq.n	800e010 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dff0:	7bba      	ldrb	r2, [r7, #14]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dff8:	7bba      	ldrb	r2, [r7, #14]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	32ae      	adds	r2, #174	; 0xae
 800dffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	6839      	ldr	r1, [r7, #0]
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	4798      	blx	r3
 800e00a:	4603      	mov	r3, r0
 800e00c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e00e:	e004      	b.n	800e01a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e010:	2303      	movs	r3, #3
 800e012:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e014:	e001      	b.n	800e01a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e016:	2303      	movs	r3, #3
 800e018:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	88db      	ldrh	r3, [r3, #6]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d110      	bne.n	800e044 <USBD_StdItfReq+0xc0>
 800e022:	7bfb      	ldrb	r3, [r7, #15]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d10d      	bne.n	800e044 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 fdf1 	bl	800ec10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e02e:	e009      	b.n	800e044 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e030:	6839      	ldr	r1, [r7, #0]
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 fd21 	bl	800ea7a <USBD_CtlError>
          break;
 800e038:	e004      	b.n	800e044 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e03a:	6839      	ldr	r1, [r7, #0]
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f000 fd1c 	bl	800ea7a <USBD_CtlError>
          break;
 800e042:	e000      	b.n	800e046 <USBD_StdItfReq+0xc2>
          break;
 800e044:	bf00      	nop
      }
      break;
 800e046:	e004      	b.n	800e052 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e048:	6839      	ldr	r1, [r7, #0]
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f000 fd15 	bl	800ea7a <USBD_CtlError>
      break;
 800e050:	bf00      	nop
  }

  return ret;
 800e052:	7bfb      	ldrb	r3, [r7, #15]
}
 800e054:	4618      	mov	r0, r3
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e066:	2300      	movs	r3, #0
 800e068:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	889b      	ldrh	r3, [r3, #4]
 800e06e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e078:	2b40      	cmp	r3, #64	; 0x40
 800e07a:	d007      	beq.n	800e08c <USBD_StdEPReq+0x30>
 800e07c:	2b40      	cmp	r3, #64	; 0x40
 800e07e:	f200 817f 	bhi.w	800e380 <USBD_StdEPReq+0x324>
 800e082:	2b00      	cmp	r3, #0
 800e084:	d02a      	beq.n	800e0dc <USBD_StdEPReq+0x80>
 800e086:	2b20      	cmp	r3, #32
 800e088:	f040 817a 	bne.w	800e380 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e08c:	7bbb      	ldrb	r3, [r7, #14]
 800e08e:	4619      	mov	r1, r3
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f7ff fe83 	bl	800dd9c <USBD_CoreFindEP>
 800e096:	4603      	mov	r3, r0
 800e098:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e09a:	7b7b      	ldrb	r3, [r7, #13]
 800e09c:	2bff      	cmp	r3, #255	; 0xff
 800e09e:	f000 8174 	beq.w	800e38a <USBD_StdEPReq+0x32e>
 800e0a2:	7b7b      	ldrb	r3, [r7, #13]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f040 8170 	bne.w	800e38a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e0aa:	7b7a      	ldrb	r2, [r7, #13]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e0b2:	7b7a      	ldrb	r2, [r7, #13]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	32ae      	adds	r2, #174	; 0xae
 800e0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0bc:	689b      	ldr	r3, [r3, #8]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f000 8163 	beq.w	800e38a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e0c4:	7b7a      	ldrb	r2, [r7, #13]
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	32ae      	adds	r2, #174	; 0xae
 800e0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	6839      	ldr	r1, [r7, #0]
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	4798      	blx	r3
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e0da:	e156      	b.n	800e38a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	785b      	ldrb	r3, [r3, #1]
 800e0e0:	2b03      	cmp	r3, #3
 800e0e2:	d008      	beq.n	800e0f6 <USBD_StdEPReq+0x9a>
 800e0e4:	2b03      	cmp	r3, #3
 800e0e6:	f300 8145 	bgt.w	800e374 <USBD_StdEPReq+0x318>
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	f000 809b 	beq.w	800e226 <USBD_StdEPReq+0x1ca>
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d03c      	beq.n	800e16e <USBD_StdEPReq+0x112>
 800e0f4:	e13e      	b.n	800e374 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	2b02      	cmp	r3, #2
 800e100:	d002      	beq.n	800e108 <USBD_StdEPReq+0xac>
 800e102:	2b03      	cmp	r3, #3
 800e104:	d016      	beq.n	800e134 <USBD_StdEPReq+0xd8>
 800e106:	e02c      	b.n	800e162 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e108:	7bbb      	ldrb	r3, [r7, #14]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d00d      	beq.n	800e12a <USBD_StdEPReq+0xce>
 800e10e:	7bbb      	ldrb	r3, [r7, #14]
 800e110:	2b80      	cmp	r3, #128	; 0x80
 800e112:	d00a      	beq.n	800e12a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e114:	7bbb      	ldrb	r3, [r7, #14]
 800e116:	4619      	mov	r1, r3
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f004 fbc9 	bl	80128b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e11e:	2180      	movs	r1, #128	; 0x80
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f004 fbc5 	bl	80128b0 <USBD_LL_StallEP>
 800e126:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e128:	e020      	b.n	800e16c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e12a:	6839      	ldr	r1, [r7, #0]
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 fca4 	bl	800ea7a <USBD_CtlError>
              break;
 800e132:	e01b      	b.n	800e16c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	885b      	ldrh	r3, [r3, #2]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d10e      	bne.n	800e15a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e13c:	7bbb      	ldrb	r3, [r7, #14]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d00b      	beq.n	800e15a <USBD_StdEPReq+0xfe>
 800e142:	7bbb      	ldrb	r3, [r7, #14]
 800e144:	2b80      	cmp	r3, #128	; 0x80
 800e146:	d008      	beq.n	800e15a <USBD_StdEPReq+0xfe>
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	88db      	ldrh	r3, [r3, #6]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d104      	bne.n	800e15a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e150:	7bbb      	ldrb	r3, [r7, #14]
 800e152:	4619      	mov	r1, r3
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f004 fbab 	bl	80128b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 fd58 	bl	800ec10 <USBD_CtlSendStatus>

              break;
 800e160:	e004      	b.n	800e16c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e162:	6839      	ldr	r1, [r7, #0]
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 fc88 	bl	800ea7a <USBD_CtlError>
              break;
 800e16a:	bf00      	nop
          }
          break;
 800e16c:	e107      	b.n	800e37e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e174:	b2db      	uxtb	r3, r3
 800e176:	2b02      	cmp	r3, #2
 800e178:	d002      	beq.n	800e180 <USBD_StdEPReq+0x124>
 800e17a:	2b03      	cmp	r3, #3
 800e17c:	d016      	beq.n	800e1ac <USBD_StdEPReq+0x150>
 800e17e:	e04b      	b.n	800e218 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e180:	7bbb      	ldrb	r3, [r7, #14]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00d      	beq.n	800e1a2 <USBD_StdEPReq+0x146>
 800e186:	7bbb      	ldrb	r3, [r7, #14]
 800e188:	2b80      	cmp	r3, #128	; 0x80
 800e18a:	d00a      	beq.n	800e1a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e18c:	7bbb      	ldrb	r3, [r7, #14]
 800e18e:	4619      	mov	r1, r3
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f004 fb8d 	bl	80128b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e196:	2180      	movs	r1, #128	; 0x80
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f004 fb89 	bl	80128b0 <USBD_LL_StallEP>
 800e19e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e1a0:	e040      	b.n	800e224 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e1a2:	6839      	ldr	r1, [r7, #0]
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 fc68 	bl	800ea7a <USBD_CtlError>
              break;
 800e1aa:	e03b      	b.n	800e224 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	885b      	ldrh	r3, [r3, #2]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d136      	bne.n	800e222 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e1b4:	7bbb      	ldrb	r3, [r7, #14]
 800e1b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d004      	beq.n	800e1c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e1be:	7bbb      	ldrb	r3, [r7, #14]
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f004 fb93 	bl	80128ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f000 fd21 	bl	800ec10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e1ce:	7bbb      	ldrb	r3, [r7, #14]
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f7ff fde2 	bl	800dd9c <USBD_CoreFindEP>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e1dc:	7b7b      	ldrb	r3, [r7, #13]
 800e1de:	2bff      	cmp	r3, #255	; 0xff
 800e1e0:	d01f      	beq.n	800e222 <USBD_StdEPReq+0x1c6>
 800e1e2:	7b7b      	ldrb	r3, [r7, #13]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d11c      	bne.n	800e222 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e1e8:	7b7a      	ldrb	r2, [r7, #13]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e1f0:	7b7a      	ldrb	r2, [r7, #13]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	32ae      	adds	r2, #174	; 0xae
 800e1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d010      	beq.n	800e222 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e200:	7b7a      	ldrb	r2, [r7, #13]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	32ae      	adds	r2, #174	; 0xae
 800e206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e20a:	689b      	ldr	r3, [r3, #8]
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	4798      	blx	r3
 800e212:	4603      	mov	r3, r0
 800e214:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e216:	e004      	b.n	800e222 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e218:	6839      	ldr	r1, [r7, #0]
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 fc2d 	bl	800ea7a <USBD_CtlError>
              break;
 800e220:	e000      	b.n	800e224 <USBD_StdEPReq+0x1c8>
              break;
 800e222:	bf00      	nop
          }
          break;
 800e224:	e0ab      	b.n	800e37e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	2b02      	cmp	r3, #2
 800e230:	d002      	beq.n	800e238 <USBD_StdEPReq+0x1dc>
 800e232:	2b03      	cmp	r3, #3
 800e234:	d032      	beq.n	800e29c <USBD_StdEPReq+0x240>
 800e236:	e097      	b.n	800e368 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e238:	7bbb      	ldrb	r3, [r7, #14]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d007      	beq.n	800e24e <USBD_StdEPReq+0x1f2>
 800e23e:	7bbb      	ldrb	r3, [r7, #14]
 800e240:	2b80      	cmp	r3, #128	; 0x80
 800e242:	d004      	beq.n	800e24e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e244:	6839      	ldr	r1, [r7, #0]
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 fc17 	bl	800ea7a <USBD_CtlError>
                break;
 800e24c:	e091      	b.n	800e372 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e24e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e252:	2b00      	cmp	r3, #0
 800e254:	da0b      	bge.n	800e26e <USBD_StdEPReq+0x212>
 800e256:	7bbb      	ldrb	r3, [r7, #14]
 800e258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e25c:	4613      	mov	r3, r2
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	4413      	add	r3, r2
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	3310      	adds	r3, #16
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	4413      	add	r3, r2
 800e26a:	3304      	adds	r3, #4
 800e26c:	e00b      	b.n	800e286 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e26e:	7bbb      	ldrb	r3, [r7, #14]
 800e270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e274:	4613      	mov	r3, r2
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	4413      	add	r3, r2
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	4413      	add	r3, r2
 800e284:	3304      	adds	r3, #4
 800e286:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	2200      	movs	r2, #0
 800e28c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	2202      	movs	r2, #2
 800e292:	4619      	mov	r1, r3
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f000 fc61 	bl	800eb5c <USBD_CtlSendData>
              break;
 800e29a:	e06a      	b.n	800e372 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e29c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	da11      	bge.n	800e2c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e2a4:	7bbb      	ldrb	r3, [r7, #14]
 800e2a6:	f003 020f 	and.w	r2, r3, #15
 800e2aa:	6879      	ldr	r1, [r7, #4]
 800e2ac:	4613      	mov	r3, r2
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	4413      	add	r3, r2
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	440b      	add	r3, r1
 800e2b6:	3324      	adds	r3, #36	; 0x24
 800e2b8:	881b      	ldrh	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d117      	bne.n	800e2ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e2be:	6839      	ldr	r1, [r7, #0]
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f000 fbda 	bl	800ea7a <USBD_CtlError>
                  break;
 800e2c6:	e054      	b.n	800e372 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e2c8:	7bbb      	ldrb	r3, [r7, #14]
 800e2ca:	f003 020f 	and.w	r2, r3, #15
 800e2ce:	6879      	ldr	r1, [r7, #4]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	4413      	add	r3, r2
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	440b      	add	r3, r1
 800e2da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e2de:	881b      	ldrh	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d104      	bne.n	800e2ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e2e4:	6839      	ldr	r1, [r7, #0]
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 fbc7 	bl	800ea7a <USBD_CtlError>
                  break;
 800e2ec:	e041      	b.n	800e372 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	da0b      	bge.n	800e30e <USBD_StdEPReq+0x2b2>
 800e2f6:	7bbb      	ldrb	r3, [r7, #14]
 800e2f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2fc:	4613      	mov	r3, r2
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	4413      	add	r3, r2
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	3310      	adds	r3, #16
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	4413      	add	r3, r2
 800e30a:	3304      	adds	r3, #4
 800e30c:	e00b      	b.n	800e326 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e30e:	7bbb      	ldrb	r3, [r7, #14]
 800e310:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e314:	4613      	mov	r3, r2
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	4413      	add	r3, r2
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e320:	687a      	ldr	r2, [r7, #4]
 800e322:	4413      	add	r3, r2
 800e324:	3304      	adds	r3, #4
 800e326:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e328:	7bbb      	ldrb	r3, [r7, #14]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d002      	beq.n	800e334 <USBD_StdEPReq+0x2d8>
 800e32e:	7bbb      	ldrb	r3, [r7, #14]
 800e330:	2b80      	cmp	r3, #128	; 0x80
 800e332:	d103      	bne.n	800e33c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	2200      	movs	r2, #0
 800e338:	601a      	str	r2, [r3, #0]
 800e33a:	e00e      	b.n	800e35a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e33c:	7bbb      	ldrb	r3, [r7, #14]
 800e33e:	4619      	mov	r1, r3
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f004 faf3 	bl	801292c <USBD_LL_IsStallEP>
 800e346:	4603      	mov	r3, r0
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d003      	beq.n	800e354 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	2201      	movs	r2, #1
 800e350:	601a      	str	r2, [r3, #0]
 800e352:	e002      	b.n	800e35a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	2200      	movs	r2, #0
 800e358:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	2202      	movs	r2, #2
 800e35e:	4619      	mov	r1, r3
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 fbfb 	bl	800eb5c <USBD_CtlSendData>
              break;
 800e366:	e004      	b.n	800e372 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e368:	6839      	ldr	r1, [r7, #0]
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 fb85 	bl	800ea7a <USBD_CtlError>
              break;
 800e370:	bf00      	nop
          }
          break;
 800e372:	e004      	b.n	800e37e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e374:	6839      	ldr	r1, [r7, #0]
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f000 fb7f 	bl	800ea7a <USBD_CtlError>
          break;
 800e37c:	bf00      	nop
      }
      break;
 800e37e:	e005      	b.n	800e38c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e380:	6839      	ldr	r1, [r7, #0]
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fb79 	bl	800ea7a <USBD_CtlError>
      break;
 800e388:	e000      	b.n	800e38c <USBD_StdEPReq+0x330>
      break;
 800e38a:	bf00      	nop
  }

  return ret;
 800e38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3710      	adds	r7, #16
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
	...

0800e398 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b084      	sub	sp, #16
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	885b      	ldrh	r3, [r3, #2]
 800e3b2:	0a1b      	lsrs	r3, r3, #8
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	2b0e      	cmp	r3, #14
 800e3ba:	f200 8152 	bhi.w	800e662 <USBD_GetDescriptor+0x2ca>
 800e3be:	a201      	add	r2, pc, #4	; (adr r2, 800e3c4 <USBD_GetDescriptor+0x2c>)
 800e3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c4:	0800e435 	.word	0x0800e435
 800e3c8:	0800e44d 	.word	0x0800e44d
 800e3cc:	0800e48d 	.word	0x0800e48d
 800e3d0:	0800e663 	.word	0x0800e663
 800e3d4:	0800e663 	.word	0x0800e663
 800e3d8:	0800e603 	.word	0x0800e603
 800e3dc:	0800e62f 	.word	0x0800e62f
 800e3e0:	0800e663 	.word	0x0800e663
 800e3e4:	0800e663 	.word	0x0800e663
 800e3e8:	0800e663 	.word	0x0800e663
 800e3ec:	0800e663 	.word	0x0800e663
 800e3f0:	0800e663 	.word	0x0800e663
 800e3f4:	0800e663 	.word	0x0800e663
 800e3f8:	0800e663 	.word	0x0800e663
 800e3fc:	0800e401 	.word	0x0800e401
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e406:	69db      	ldr	r3, [r3, #28]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00b      	beq.n	800e424 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e412:	69db      	ldr	r3, [r3, #28]
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	7c12      	ldrb	r2, [r2, #16]
 800e418:	f107 0108 	add.w	r1, r7, #8
 800e41c:	4610      	mov	r0, r2
 800e41e:	4798      	blx	r3
 800e420:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e422:	e126      	b.n	800e672 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e424:	6839      	ldr	r1, [r7, #0]
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 fb27 	bl	800ea7a <USBD_CtlError>
        err++;
 800e42c:	7afb      	ldrb	r3, [r7, #11]
 800e42e:	3301      	adds	r3, #1
 800e430:	72fb      	strb	r3, [r7, #11]
      break;
 800e432:	e11e      	b.n	800e672 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	7c12      	ldrb	r2, [r2, #16]
 800e440:	f107 0108 	add.w	r1, r7, #8
 800e444:	4610      	mov	r0, r2
 800e446:	4798      	blx	r3
 800e448:	60f8      	str	r0, [r7, #12]
      break;
 800e44a:	e112      	b.n	800e672 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	7c1b      	ldrb	r3, [r3, #16]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d10d      	bne.n	800e470 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e45c:	f107 0208 	add.w	r2, r7, #8
 800e460:	4610      	mov	r0, r2
 800e462:	4798      	blx	r3
 800e464:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	3301      	adds	r3, #1
 800e46a:	2202      	movs	r2, #2
 800e46c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e46e:	e100      	b.n	800e672 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e478:	f107 0208 	add.w	r2, r7, #8
 800e47c:	4610      	mov	r0, r2
 800e47e:	4798      	blx	r3
 800e480:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	3301      	adds	r3, #1
 800e486:	2202      	movs	r2, #2
 800e488:	701a      	strb	r2, [r3, #0]
      break;
 800e48a:	e0f2      	b.n	800e672 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	885b      	ldrh	r3, [r3, #2]
 800e490:	b2db      	uxtb	r3, r3
 800e492:	2b05      	cmp	r3, #5
 800e494:	f200 80ac 	bhi.w	800e5f0 <USBD_GetDescriptor+0x258>
 800e498:	a201      	add	r2, pc, #4	; (adr r2, 800e4a0 <USBD_GetDescriptor+0x108>)
 800e49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e49e:	bf00      	nop
 800e4a0:	0800e4b9 	.word	0x0800e4b9
 800e4a4:	0800e4ed 	.word	0x0800e4ed
 800e4a8:	0800e521 	.word	0x0800e521
 800e4ac:	0800e555 	.word	0x0800e555
 800e4b0:	0800e589 	.word	0x0800e589
 800e4b4:	0800e5bd 	.word	0x0800e5bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00b      	beq.n	800e4dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	7c12      	ldrb	r2, [r2, #16]
 800e4d0:	f107 0108 	add.w	r1, r7, #8
 800e4d4:	4610      	mov	r0, r2
 800e4d6:	4798      	blx	r3
 800e4d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4da:	e091      	b.n	800e600 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4dc:	6839      	ldr	r1, [r7, #0]
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 facb 	bl	800ea7a <USBD_CtlError>
            err++;
 800e4e4:	7afb      	ldrb	r3, [r7, #11]
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	72fb      	strb	r3, [r7, #11]
          break;
 800e4ea:	e089      	b.n	800e600 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4f2:	689b      	ldr	r3, [r3, #8]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d00b      	beq.n	800e510 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4fe:	689b      	ldr	r3, [r3, #8]
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	7c12      	ldrb	r2, [r2, #16]
 800e504:	f107 0108 	add.w	r1, r7, #8
 800e508:	4610      	mov	r0, r2
 800e50a:	4798      	blx	r3
 800e50c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e50e:	e077      	b.n	800e600 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e510:	6839      	ldr	r1, [r7, #0]
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 fab1 	bl	800ea7a <USBD_CtlError>
            err++;
 800e518:	7afb      	ldrb	r3, [r7, #11]
 800e51a:	3301      	adds	r3, #1
 800e51c:	72fb      	strb	r3, [r7, #11]
          break;
 800e51e:	e06f      	b.n	800e600 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d00b      	beq.n	800e544 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	7c12      	ldrb	r2, [r2, #16]
 800e538:	f107 0108 	add.w	r1, r7, #8
 800e53c:	4610      	mov	r0, r2
 800e53e:	4798      	blx	r3
 800e540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e542:	e05d      	b.n	800e600 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e544:	6839      	ldr	r1, [r7, #0]
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 fa97 	bl	800ea7a <USBD_CtlError>
            err++;
 800e54c:	7afb      	ldrb	r3, [r7, #11]
 800e54e:	3301      	adds	r3, #1
 800e550:	72fb      	strb	r3, [r7, #11]
          break;
 800e552:	e055      	b.n	800e600 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e55a:	691b      	ldr	r3, [r3, #16]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00b      	beq.n	800e578 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e566:	691b      	ldr	r3, [r3, #16]
 800e568:	687a      	ldr	r2, [r7, #4]
 800e56a:	7c12      	ldrb	r2, [r2, #16]
 800e56c:	f107 0108 	add.w	r1, r7, #8
 800e570:	4610      	mov	r0, r2
 800e572:	4798      	blx	r3
 800e574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e576:	e043      	b.n	800e600 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e578:	6839      	ldr	r1, [r7, #0]
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 fa7d 	bl	800ea7a <USBD_CtlError>
            err++;
 800e580:	7afb      	ldrb	r3, [r7, #11]
 800e582:	3301      	adds	r3, #1
 800e584:	72fb      	strb	r3, [r7, #11]
          break;
 800e586:	e03b      	b.n	800e600 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e58e:	695b      	ldr	r3, [r3, #20]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00b      	beq.n	800e5ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e59a:	695b      	ldr	r3, [r3, #20]
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	7c12      	ldrb	r2, [r2, #16]
 800e5a0:	f107 0108 	add.w	r1, r7, #8
 800e5a4:	4610      	mov	r0, r2
 800e5a6:	4798      	blx	r3
 800e5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5aa:	e029      	b.n	800e600 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5ac:	6839      	ldr	r1, [r7, #0]
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 fa63 	bl	800ea7a <USBD_CtlError>
            err++;
 800e5b4:	7afb      	ldrb	r3, [r7, #11]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800e5ba:	e021      	b.n	800e600 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5c2:	699b      	ldr	r3, [r3, #24]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00b      	beq.n	800e5e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5ce:	699b      	ldr	r3, [r3, #24]
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	7c12      	ldrb	r2, [r2, #16]
 800e5d4:	f107 0108 	add.w	r1, r7, #8
 800e5d8:	4610      	mov	r0, r2
 800e5da:	4798      	blx	r3
 800e5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5de:	e00f      	b.n	800e600 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5e0:	6839      	ldr	r1, [r7, #0]
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 fa49 	bl	800ea7a <USBD_CtlError>
            err++;
 800e5e8:	7afb      	ldrb	r3, [r7, #11]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800e5ee:	e007      	b.n	800e600 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e5f0:	6839      	ldr	r1, [r7, #0]
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 fa41 	bl	800ea7a <USBD_CtlError>
          err++;
 800e5f8:	7afb      	ldrb	r3, [r7, #11]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e5fe:	bf00      	nop
      }
      break;
 800e600:	e037      	b.n	800e672 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	7c1b      	ldrb	r3, [r3, #16]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d109      	bne.n	800e61e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e612:	f107 0208 	add.w	r2, r7, #8
 800e616:	4610      	mov	r0, r2
 800e618:	4798      	blx	r3
 800e61a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e61c:	e029      	b.n	800e672 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e61e:	6839      	ldr	r1, [r7, #0]
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 fa2a 	bl	800ea7a <USBD_CtlError>
        err++;
 800e626:	7afb      	ldrb	r3, [r7, #11]
 800e628:	3301      	adds	r3, #1
 800e62a:	72fb      	strb	r3, [r7, #11]
      break;
 800e62c:	e021      	b.n	800e672 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	7c1b      	ldrb	r3, [r3, #16]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d10d      	bne.n	800e652 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e63e:	f107 0208 	add.w	r2, r7, #8
 800e642:	4610      	mov	r0, r2
 800e644:	4798      	blx	r3
 800e646:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	3301      	adds	r3, #1
 800e64c:	2207      	movs	r2, #7
 800e64e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e650:	e00f      	b.n	800e672 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e652:	6839      	ldr	r1, [r7, #0]
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f000 fa10 	bl	800ea7a <USBD_CtlError>
        err++;
 800e65a:	7afb      	ldrb	r3, [r7, #11]
 800e65c:	3301      	adds	r3, #1
 800e65e:	72fb      	strb	r3, [r7, #11]
      break;
 800e660:	e007      	b.n	800e672 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e662:	6839      	ldr	r1, [r7, #0]
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f000 fa08 	bl	800ea7a <USBD_CtlError>
      err++;
 800e66a:	7afb      	ldrb	r3, [r7, #11]
 800e66c:	3301      	adds	r3, #1
 800e66e:	72fb      	strb	r3, [r7, #11]
      break;
 800e670:	bf00      	nop
  }

  if (err != 0U)
 800e672:	7afb      	ldrb	r3, [r7, #11]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d11e      	bne.n	800e6b6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	88db      	ldrh	r3, [r3, #6]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d016      	beq.n	800e6ae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e680:	893b      	ldrh	r3, [r7, #8]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d00e      	beq.n	800e6a4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	88da      	ldrh	r2, [r3, #6]
 800e68a:	893b      	ldrh	r3, [r7, #8]
 800e68c:	4293      	cmp	r3, r2
 800e68e:	bf28      	it	cs
 800e690:	4613      	movcs	r3, r2
 800e692:	b29b      	uxth	r3, r3
 800e694:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e696:	893b      	ldrh	r3, [r7, #8]
 800e698:	461a      	mov	r2, r3
 800e69a:	68f9      	ldr	r1, [r7, #12]
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f000 fa5d 	bl	800eb5c <USBD_CtlSendData>
 800e6a2:	e009      	b.n	800e6b8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e6a4:	6839      	ldr	r1, [r7, #0]
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 f9e7 	bl	800ea7a <USBD_CtlError>
 800e6ac:	e004      	b.n	800e6b8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f000 faae 	bl	800ec10 <USBD_CtlSendStatus>
 800e6b4:	e000      	b.n	800e6b8 <USBD_GetDescriptor+0x320>
    return;
 800e6b6:	bf00      	nop
  }
}
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop

0800e6c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	889b      	ldrh	r3, [r3, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d131      	bne.n	800e736 <USBD_SetAddress+0x76>
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	88db      	ldrh	r3, [r3, #6]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d12d      	bne.n	800e736 <USBD_SetAddress+0x76>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	885b      	ldrh	r3, [r3, #2]
 800e6de:	2b7f      	cmp	r3, #127	; 0x7f
 800e6e0:	d829      	bhi.n	800e736 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	885b      	ldrh	r3, [r3, #2]
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6f4:	b2db      	uxtb	r3, r3
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	d104      	bne.n	800e704 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e6fa:	6839      	ldr	r1, [r7, #0]
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f000 f9bc 	bl	800ea7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e702:	e01d      	b.n	800e740 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	7bfa      	ldrb	r2, [r7, #15]
 800e708:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e70c:	7bfb      	ldrb	r3, [r7, #15]
 800e70e:	4619      	mov	r1, r3
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f004 f937 	bl	8012984 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 fa7a 	bl	800ec10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e71c:	7bfb      	ldrb	r3, [r7, #15]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d004      	beq.n	800e72c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2202      	movs	r2, #2
 800e726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e72a:	e009      	b.n	800e740 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e734:	e004      	b.n	800e740 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e736:	6839      	ldr	r1, [r7, #0]
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 f99e 	bl	800ea7a <USBD_CtlError>
  }
}
 800e73e:	bf00      	nop
 800e740:	bf00      	nop
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b084      	sub	sp, #16
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e752:	2300      	movs	r3, #0
 800e754:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	885b      	ldrh	r3, [r3, #2]
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	4b4e      	ldr	r3, [pc, #312]	; (800e898 <USBD_SetConfig+0x150>)
 800e75e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e760:	4b4d      	ldr	r3, [pc, #308]	; (800e898 <USBD_SetConfig+0x150>)
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	2b01      	cmp	r3, #1
 800e766:	d905      	bls.n	800e774 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e768:	6839      	ldr	r1, [r7, #0]
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 f985 	bl	800ea7a <USBD_CtlError>
    return USBD_FAIL;
 800e770:	2303      	movs	r3, #3
 800e772:	e08c      	b.n	800e88e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	2b02      	cmp	r3, #2
 800e77e:	d002      	beq.n	800e786 <USBD_SetConfig+0x3e>
 800e780:	2b03      	cmp	r3, #3
 800e782:	d029      	beq.n	800e7d8 <USBD_SetConfig+0x90>
 800e784:	e075      	b.n	800e872 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e786:	4b44      	ldr	r3, [pc, #272]	; (800e898 <USBD_SetConfig+0x150>)
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d020      	beq.n	800e7d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e78e:	4b42      	ldr	r3, [pc, #264]	; (800e898 <USBD_SetConfig+0x150>)
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	461a      	mov	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e798:	4b3f      	ldr	r3, [pc, #252]	; (800e898 <USBD_SetConfig+0x150>)
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	4619      	mov	r1, r3
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f7ff f849 	bl	800d836 <USBD_SetClassConfig>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e7a8:	7bfb      	ldrb	r3, [r7, #15]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d008      	beq.n	800e7c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e7ae:	6839      	ldr	r1, [r7, #0]
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 f962 	bl	800ea7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2202      	movs	r2, #2
 800e7ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e7be:	e065      	b.n	800e88c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f000 fa25 	bl	800ec10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2203      	movs	r2, #3
 800e7ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e7ce:	e05d      	b.n	800e88c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 fa1d 	bl	800ec10 <USBD_CtlSendStatus>
      break;
 800e7d6:	e059      	b.n	800e88c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e7d8:	4b2f      	ldr	r3, [pc, #188]	; (800e898 <USBD_SetConfig+0x150>)
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d112      	bne.n	800e806 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2202      	movs	r2, #2
 800e7e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e7e8:	4b2b      	ldr	r3, [pc, #172]	; (800e898 <USBD_SetConfig+0x150>)
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e7f2:	4b29      	ldr	r3, [pc, #164]	; (800e898 <USBD_SetConfig+0x150>)
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f7ff f838 	bl	800d86e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f000 fa06 	bl	800ec10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e804:	e042      	b.n	800e88c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e806:	4b24      	ldr	r3, [pc, #144]	; (800e898 <USBD_SetConfig+0x150>)
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	461a      	mov	r2, r3
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	429a      	cmp	r2, r3
 800e812:	d02a      	beq.n	800e86a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	4619      	mov	r1, r3
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f7ff f826 	bl	800d86e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e822:	4b1d      	ldr	r3, [pc, #116]	; (800e898 <USBD_SetConfig+0x150>)
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	461a      	mov	r2, r3
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e82c:	4b1a      	ldr	r3, [pc, #104]	; (800e898 <USBD_SetConfig+0x150>)
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	4619      	mov	r1, r3
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f7fe ffff 	bl	800d836 <USBD_SetClassConfig>
 800e838:	4603      	mov	r3, r0
 800e83a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e83c:	7bfb      	ldrb	r3, [r7, #15]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d00f      	beq.n	800e862 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e842:	6839      	ldr	r1, [r7, #0]
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f000 f918 	bl	800ea7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	4619      	mov	r1, r3
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f7ff f80b 	bl	800d86e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2202      	movs	r2, #2
 800e85c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e860:	e014      	b.n	800e88c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f000 f9d4 	bl	800ec10 <USBD_CtlSendStatus>
      break;
 800e868:	e010      	b.n	800e88c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 f9d0 	bl	800ec10 <USBD_CtlSendStatus>
      break;
 800e870:	e00c      	b.n	800e88c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e872:	6839      	ldr	r1, [r7, #0]
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f000 f900 	bl	800ea7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e87a:	4b07      	ldr	r3, [pc, #28]	; (800e898 <USBD_SetConfig+0x150>)
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	4619      	mov	r1, r3
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f7fe fff4 	bl	800d86e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e886:	2303      	movs	r3, #3
 800e888:	73fb      	strb	r3, [r7, #15]
      break;
 800e88a:	bf00      	nop
  }

  return ret;
 800e88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	200010d8 	.word	0x200010d8

0800e89c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	88db      	ldrh	r3, [r3, #6]
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d004      	beq.n	800e8b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e8ae:	6839      	ldr	r1, [r7, #0]
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f000 f8e2 	bl	800ea7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e8b6:	e023      	b.n	800e900 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	2b02      	cmp	r3, #2
 800e8c2:	dc02      	bgt.n	800e8ca <USBD_GetConfig+0x2e>
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	dc03      	bgt.n	800e8d0 <USBD_GetConfig+0x34>
 800e8c8:	e015      	b.n	800e8f6 <USBD_GetConfig+0x5a>
 800e8ca:	2b03      	cmp	r3, #3
 800e8cc:	d00b      	beq.n	800e8e6 <USBD_GetConfig+0x4a>
 800e8ce:	e012      	b.n	800e8f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	3308      	adds	r3, #8
 800e8da:	2201      	movs	r2, #1
 800e8dc:	4619      	mov	r1, r3
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 f93c 	bl	800eb5c <USBD_CtlSendData>
        break;
 800e8e4:	e00c      	b.n	800e900 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	3304      	adds	r3, #4
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 f934 	bl	800eb5c <USBD_CtlSendData>
        break;
 800e8f4:	e004      	b.n	800e900 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e8f6:	6839      	ldr	r1, [r7, #0]
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 f8be 	bl	800ea7a <USBD_CtlError>
        break;
 800e8fe:	bf00      	nop
}
 800e900:	bf00      	nop
 800e902:	3708      	adds	r7, #8
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e918:	b2db      	uxtb	r3, r3
 800e91a:	3b01      	subs	r3, #1
 800e91c:	2b02      	cmp	r3, #2
 800e91e:	d81e      	bhi.n	800e95e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	88db      	ldrh	r3, [r3, #6]
 800e924:	2b02      	cmp	r3, #2
 800e926:	d004      	beq.n	800e932 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e928:	6839      	ldr	r1, [r7, #0]
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 f8a5 	bl	800ea7a <USBD_CtlError>
        break;
 800e930:	e01a      	b.n	800e968 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2201      	movs	r2, #1
 800e936:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d005      	beq.n	800e94e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	f043 0202 	orr.w	r2, r3, #2
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	330c      	adds	r3, #12
 800e952:	2202      	movs	r2, #2
 800e954:	4619      	mov	r1, r3
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 f900 	bl	800eb5c <USBD_CtlSendData>
      break;
 800e95c:	e004      	b.n	800e968 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e95e:	6839      	ldr	r1, [r7, #0]
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f000 f88a 	bl	800ea7a <USBD_CtlError>
      break;
 800e966:	bf00      	nop
  }
}
 800e968:	bf00      	nop
 800e96a:	3708      	adds	r7, #8
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	885b      	ldrh	r3, [r3, #2]
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d107      	bne.n	800e992 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2201      	movs	r2, #1
 800e986:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 f940 	bl	800ec10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e990:	e013      	b.n	800e9ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	885b      	ldrh	r3, [r3, #2]
 800e996:	2b02      	cmp	r3, #2
 800e998:	d10b      	bne.n	800e9b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	889b      	ldrh	r3, [r3, #4]
 800e99e:	0a1b      	lsrs	r3, r3, #8
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	b2da      	uxtb	r2, r3
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 f930 	bl	800ec10 <USBD_CtlSendStatus>
}
 800e9b0:	e003      	b.n	800e9ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e9b2:	6839      	ldr	r1, [r7, #0]
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f000 f860 	bl	800ea7a <USBD_CtlError>
}
 800e9ba:	bf00      	nop
 800e9bc:	3708      	adds	r7, #8
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b082      	sub	sp, #8
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d80b      	bhi.n	800e9f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	885b      	ldrh	r3, [r3, #2]
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d10c      	bne.n	800e9fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 f910 	bl	800ec10 <USBD_CtlSendStatus>
      }
      break;
 800e9f0:	e004      	b.n	800e9fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e9f2:	6839      	ldr	r1, [r7, #0]
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f000 f840 	bl	800ea7a <USBD_CtlError>
      break;
 800e9fa:	e000      	b.n	800e9fe <USBD_ClrFeature+0x3c>
      break;
 800e9fc:	bf00      	nop
  }
}
 800e9fe:	bf00      	nop
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b084      	sub	sp, #16
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
 800ea0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	781a      	ldrb	r2, [r3, #0]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	781a      	ldrb	r2, [r3, #0]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ea30:	68f8      	ldr	r0, [r7, #12]
 800ea32:	f7ff fa17 	bl	800de64 <SWAPBYTE>
 800ea36:	4603      	mov	r3, r0
 800ea38:	461a      	mov	r2, r3
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	3301      	adds	r3, #1
 800ea42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	3301      	adds	r3, #1
 800ea48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f7ff fa0a 	bl	800de64 <SWAPBYTE>
 800ea50:	4603      	mov	r3, r0
 800ea52:	461a      	mov	r2, r3
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	3301      	adds	r3, #1
 800ea62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f7ff f9fd 	bl	800de64 <SWAPBYTE>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	80da      	strh	r2, [r3, #6]
}
 800ea72:	bf00      	nop
 800ea74:	3710      	adds	r7, #16
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}

0800ea7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea7a:	b580      	push	{r7, lr}
 800ea7c:	b082      	sub	sp, #8
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]
 800ea82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea84:	2180      	movs	r1, #128	; 0x80
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f003 ff12 	bl	80128b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ea8c:	2100      	movs	r1, #0
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f003 ff0e 	bl	80128b0 <USBD_LL_StallEP>
}
 800ea94:	bf00      	nop
 800ea96:	3708      	adds	r7, #8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b086      	sub	sp, #24
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	60b9      	str	r1, [r7, #8]
 800eaa6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d036      	beq.n	800eb20 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eab6:	6938      	ldr	r0, [r7, #16]
 800eab8:	f000 f836 	bl	800eb28 <USBD_GetLen>
 800eabc:	4603      	mov	r3, r0
 800eabe:	3301      	adds	r3, #1
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	005b      	lsls	r3, r3, #1
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
 800eacc:	68ba      	ldr	r2, [r7, #8]
 800eace:	4413      	add	r3, r2
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	7812      	ldrb	r2, [r2, #0]
 800ead4:	701a      	strb	r2, [r3, #0]
  idx++;
 800ead6:	7dfb      	ldrb	r3, [r7, #23]
 800ead8:	3301      	adds	r3, #1
 800eada:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eadc:	7dfb      	ldrb	r3, [r7, #23]
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	4413      	add	r3, r2
 800eae2:	2203      	movs	r2, #3
 800eae4:	701a      	strb	r2, [r3, #0]
  idx++;
 800eae6:	7dfb      	ldrb	r3, [r7, #23]
 800eae8:	3301      	adds	r3, #1
 800eaea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eaec:	e013      	b.n	800eb16 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eaee:	7dfb      	ldrb	r3, [r7, #23]
 800eaf0:	68ba      	ldr	r2, [r7, #8]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	7812      	ldrb	r2, [r2, #0]
 800eaf8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	3301      	adds	r3, #1
 800eafe:	613b      	str	r3, [r7, #16]
    idx++;
 800eb00:	7dfb      	ldrb	r3, [r7, #23]
 800eb02:	3301      	adds	r3, #1
 800eb04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eb06:	7dfb      	ldrb	r3, [r7, #23]
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	4413      	add	r3, r2
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	701a      	strb	r2, [r3, #0]
    idx++;
 800eb10:	7dfb      	ldrb	r3, [r7, #23]
 800eb12:	3301      	adds	r3, #1
 800eb14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d1e7      	bne.n	800eaee <USBD_GetString+0x52>
 800eb1e:	e000      	b.n	800eb22 <USBD_GetString+0x86>
    return;
 800eb20:	bf00      	nop
  }
}
 800eb22:	3718      	adds	r7, #24
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eb30:	2300      	movs	r3, #0
 800eb32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eb38:	e005      	b.n	800eb46 <USBD_GetLen+0x1e>
  {
    len++;
 800eb3a:	7bfb      	ldrb	r3, [r7, #15]
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	3301      	adds	r3, #1
 800eb44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d1f5      	bne.n	800eb3a <USBD_GetLen+0x12>
  }

  return len;
 800eb4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3714      	adds	r7, #20
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2202      	movs	r2, #2
 800eb6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	2100      	movs	r1, #0
 800eb82:	68f8      	ldr	r0, [r7, #12]
 800eb84:	f003 ff1d 	bl	80129c2 <USBD_LL_Transmit>

  return USBD_OK;
 800eb88:	2300      	movs	r3, #0
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b084      	sub	sp, #16
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	60f8      	str	r0, [r7, #12]
 800eb9a:	60b9      	str	r1, [r7, #8]
 800eb9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	68ba      	ldr	r2, [r7, #8]
 800eba2:	2100      	movs	r1, #0
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f003 ff0c 	bl	80129c2 <USBD_LL_Transmit>

  return USBD_OK;
 800ebaa:	2300      	movs	r3, #0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b084      	sub	sp, #16
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2203      	movs	r2, #3
 800ebc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	2100      	movs	r1, #0
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f003 ff10 	bl	8012a04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b084      	sub	sp, #16
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	60f8      	str	r0, [r7, #12]
 800ebf6:	60b9      	str	r1, [r7, #8]
 800ebf8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	68ba      	ldr	r2, [r7, #8]
 800ebfe:	2100      	movs	r1, #0
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f003 feff 	bl	8012a04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec06:	2300      	movs	r3, #0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3710      	adds	r7, #16
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2204      	movs	r2, #4
 800ec1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ec20:	2300      	movs	r3, #0
 800ec22:	2200      	movs	r2, #0
 800ec24:	2100      	movs	r1, #0
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f003 fecb 	bl	80129c2 <USBD_LL_Transmit>

  return USBD_OK;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}

0800ec36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b082      	sub	sp, #8
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2205      	movs	r2, #5
 800ec42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec46:	2300      	movs	r3, #0
 800ec48:	2200      	movs	r2, #0
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f003 fed9 	bl	8012a04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec52:	2300      	movs	r3, #0
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3708      	adds	r7, #8
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b088      	sub	sp, #32
 800ec60:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ec62:	2300      	movs	r3, #0
 800ec64:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ec66:	f107 0308 	add.w	r3, r7, #8
 800ec6a:	2218      	movs	r2, #24
 800ec6c:	2100      	movs	r1, #0
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f001 f8d8 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ec74:	233f      	movs	r3, #63	; 0x3f
 800ec76:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800ec78:	2381      	movs	r3, #129	; 0x81
 800ec7a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ec7c:	1dfb      	adds	r3, r7, #7
 800ec7e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ec80:	2301      	movs	r3, #1
 800ec82:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ec84:	f107 0308 	add.w	r3, r7, #8
 800ec88:	2100      	movs	r1, #0
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f001 fb54 	bl	8010338 <hci_send_req>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	da01      	bge.n	800ec9a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ec96:	23ff      	movs	r3, #255	; 0xff
 800ec98:	e000      	b.n	800ec9c <aci_gap_set_non_discoverable+0x40>
  return status;
 800ec9a:	79fb      	ldrb	r3, [r7, #7]
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3720      	adds	r7, #32
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800eca4:	b5b0      	push	{r4, r5, r7, lr}
 800eca6:	b0ce      	sub	sp, #312	; 0x138
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	4605      	mov	r5, r0
 800ecac:	460c      	mov	r4, r1
 800ecae:	4610      	mov	r0, r2
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ecb6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ecba:	462a      	mov	r2, r5
 800ecbc:	701a      	strb	r2, [r3, #0]
 800ecbe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ecc2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ecc6:	4622      	mov	r2, r4
 800ecc8:	801a      	strh	r2, [r3, #0]
 800ecca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ecce:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	801a      	strh	r2, [r3, #0]
 800ecd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ecda:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ecde:	460a      	mov	r2, r1
 800ece0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800ece2:	f107 0310 	add.w	r3, r7, #16
 800ece6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800ecea:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800ecee:	3308      	adds	r3, #8
 800ecf0:	f107 0210 	add.w	r2, r7, #16
 800ecf4:	4413      	add	r3, r2
 800ecf6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800ecfa:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ecfe:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800ed02:	4413      	add	r3, r2
 800ed04:	3309      	adds	r3, #9
 800ed06:	f107 0210 	add.w	r2, r7, #16
 800ed0a:	4413      	add	r3, r2
 800ed0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ed10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ed14:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ed18:	2200      	movs	r2, #0
 800ed1a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800ed22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ed26:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ed2a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800ed2e:	7812      	ldrb	r2, [r2, #0]
 800ed30:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ed32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ed36:	3301      	adds	r3, #1
 800ed38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800ed3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ed40:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ed44:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800ed48:	8812      	ldrh	r2, [r2, #0]
 800ed4a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800ed4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ed52:	3302      	adds	r3, #2
 800ed54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800ed58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ed5c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ed60:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800ed64:	8812      	ldrh	r2, [r2, #0]
 800ed66:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800ed6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ed6e:	3302      	adds	r3, #2
 800ed70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800ed74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ed78:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ed7c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800ed80:	7812      	ldrb	r2, [r2, #0]
 800ed82:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ed84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ed88:	3301      	adds	r3, #1
 800ed8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800ed8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ed92:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800ed96:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ed98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800eda2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eda6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800edaa:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800edac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800edb0:	3301      	adds	r3, #1
 800edb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800edb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800edba:	3308      	adds	r3, #8
 800edbc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800edc0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800edc4:	4618      	mov	r0, r3
 800edc6:	f001 f81d 	bl	800fe04 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800edca:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800edce:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800edd2:	4413      	add	r3, r2
 800edd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800edd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800eddc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ede0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ede2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ede6:	3301      	adds	r3, #1
 800ede8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800edec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800edf0:	3301      	adds	r3, #1
 800edf2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800edf6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800edfa:	4618      	mov	r0, r3
 800edfc:	f001 f802 	bl	800fe04 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800ee00:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800ee04:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ee08:	4413      	add	r3, r2
 800ee0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800ee0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ee12:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800ee16:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ee18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee1c:	3302      	adds	r3, #2
 800ee1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800ee22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ee26:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800ee2a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800ee2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee30:	3302      	adds	r3, #2
 800ee32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ee36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ee3a:	2218      	movs	r2, #24
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f000 fff0 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ee44:	233f      	movs	r3, #63	; 0x3f
 800ee46:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800ee4a:	2383      	movs	r3, #131	; 0x83
 800ee4c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ee50:	f107 0310 	add.w	r3, r7, #16
 800ee54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ee58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ee60:	f107 030f 	add.w	r3, r7, #15
 800ee64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ee6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ee72:	2100      	movs	r1, #0
 800ee74:	4618      	mov	r0, r3
 800ee76:	f001 fa5f 	bl	8010338 <hci_send_req>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	da01      	bge.n	800ee84 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800ee80:	23ff      	movs	r3, #255	; 0xff
 800ee82:	e004      	b.n	800ee8e <aci_gap_set_discoverable+0x1ea>
  return status;
 800ee84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ee88:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ee8c:	781b      	ldrb	r3, [r3, #0]
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bdb0      	pop	{r4, r5, r7, pc}

0800ee98 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b0cc      	sub	sp, #304	; 0x130
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	4602      	mov	r2, r0
 800eea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eea4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800eea8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800eeaa:	f107 0310 	add.w	r3, r7, #16
 800eeae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800eeb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eeb6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800eeba:	2200      	movs	r2, #0
 800eebc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800eebe:	2300      	movs	r3, #0
 800eec0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800eec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eec8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800eecc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800eed0:	7812      	ldrb	r2, [r2, #0]
 800eed2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800eed4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eed8:	3301      	adds	r3, #1
 800eeda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eede:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eee2:	2218      	movs	r2, #24
 800eee4:	2100      	movs	r1, #0
 800eee6:	4618      	mov	r0, r3
 800eee8:	f000 ff9c 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800eeec:	233f      	movs	r3, #63	; 0x3f
 800eeee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800eef2:	2385      	movs	r3, #133	; 0x85
 800eef4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800eef8:	f107 0310 	add.w	r3, r7, #16
 800eefc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ef00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ef08:	f107 030f 	add.w	r3, r7, #15
 800ef0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ef10:	2301      	movs	r3, #1
 800ef12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ef16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ef1a:	2100      	movs	r1, #0
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f001 fa0b 	bl	8010338 <hci_send_req>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	da01      	bge.n	800ef2c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800ef28:	23ff      	movs	r3, #255	; 0xff
 800ef2a:	e004      	b.n	800ef36 <aci_gap_set_io_capability+0x9e>
  return status;
 800ef2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef30:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ef34:	781b      	ldrb	r3, [r3, #0]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800ef40:	b5b0      	push	{r4, r5, r7, lr}
 800ef42:	b0cc      	sub	sp, #304	; 0x130
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	4605      	mov	r5, r0
 800ef48:	460c      	mov	r4, r1
 800ef4a:	4610      	mov	r0, r2
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef52:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ef56:	462a      	mov	r2, r5
 800ef58:	701a      	strb	r2, [r3, #0]
 800ef5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef5e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ef62:	4622      	mov	r2, r4
 800ef64:	701a      	strb	r2, [r3, #0]
 800ef66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef6a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800ef6e:	4602      	mov	r2, r0
 800ef70:	701a      	strb	r2, [r3, #0]
 800ef72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ef7a:	460a      	mov	r2, r1
 800ef7c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ef7e:	f107 0310 	add.w	r3, r7, #16
 800ef82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ef86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef8a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ef8e:	2200      	movs	r2, #0
 800ef90:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ef92:	2300      	movs	r3, #0
 800ef94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800ef98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef9c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800efa0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800efa4:	7812      	ldrb	r2, [r2, #0]
 800efa6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800efa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800efac:	3301      	adds	r3, #1
 800efae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800efb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800efb6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800efba:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800efbe:	7812      	ldrb	r2, [r2, #0]
 800efc0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800efc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800efc6:	3301      	adds	r3, #1
 800efc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800efcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800efd0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800efd4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800efd8:	7812      	ldrb	r2, [r2, #0]
 800efda:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800efdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800efe0:	3301      	adds	r3, #1
 800efe2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800efe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800efea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800efee:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800eff2:	7812      	ldrb	r2, [r2, #0]
 800eff4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800eff6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800effa:	3301      	adds	r3, #1
 800effc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800f000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f004:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800f008:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800f00a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f00e:	3301      	adds	r3, #1
 800f010:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800f014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f018:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800f01c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800f01e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f022:	3301      	adds	r3, #1
 800f024:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800f028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f02c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800f030:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800f032:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f036:	3301      	adds	r3, #1
 800f038:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800f03c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f040:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800f044:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800f048:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f04c:	3304      	adds	r3, #4
 800f04e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800f052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f056:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800f05a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800f05c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f060:	3301      	adds	r3, #1
 800f062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f066:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f06a:	2218      	movs	r2, #24
 800f06c:	2100      	movs	r1, #0
 800f06e:	4618      	mov	r0, r3
 800f070:	f000 fed8 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f074:	233f      	movs	r3, #63	; 0x3f
 800f076:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800f07a:	2386      	movs	r3, #134	; 0x86
 800f07c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f080:	f107 0310 	add.w	r3, r7, #16
 800f084:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f088:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f08c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f090:	f107 030f 	add.w	r3, r7, #15
 800f094:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f098:	2301      	movs	r3, #1
 800f09a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f09e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f001 f947 	bl	8010338 <hci_send_req>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	da01      	bge.n	800f0b4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800f0b0:	23ff      	movs	r3, #255	; 0xff
 800f0b2:	e004      	b.n	800f0be <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800f0b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f0bc:	781b      	ldrb	r3, [r3, #0]
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bdb0      	pop	{r4, r5, r7, pc}

0800f0c8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b0cc      	sub	sp, #304	; 0x130
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f0d8:	6019      	str	r1, [r3, #0]
 800f0da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0de:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f0e2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800f0e4:	f107 0310 	add.w	r3, r7, #16
 800f0e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f0ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f0fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f102:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f106:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f10a:	8812      	ldrh	r2, [r2, #0]
 800f10c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f10e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f112:	3302      	adds	r3, #2
 800f114:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800f118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f11c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f120:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800f124:	6812      	ldr	r2, [r2, #0]
 800f126:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800f12a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f12e:	3304      	adds	r3, #4
 800f130:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f134:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f138:	2218      	movs	r2, #24
 800f13a:	2100      	movs	r1, #0
 800f13c:	4618      	mov	r0, r3
 800f13e:	f000 fe71 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f142:	233f      	movs	r3, #63	; 0x3f
 800f144:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800f148:	2388      	movs	r3, #136	; 0x88
 800f14a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f14e:	f107 0310 	add.w	r3, r7, #16
 800f152:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f156:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f15a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f15e:	f107 030f 	add.w	r3, r7, #15
 800f162:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f166:	2301      	movs	r3, #1
 800f168:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f16c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f170:	2100      	movs	r1, #0
 800f172:	4618      	mov	r0, r3
 800f174:	f001 f8e0 	bl	8010338 <hci_send_req>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	da01      	bge.n	800f182 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800f17e:	23ff      	movs	r3, #255	; 0xff
 800f180:	e004      	b.n	800f18c <aci_gap_pass_key_resp+0xc4>
  return status;
 800f182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f186:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f18a:	781b      	ldrb	r3, [r3, #0]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800f196:	b590      	push	{r4, r7, lr}
 800f198:	b0cd      	sub	sp, #308	; 0x134
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	4604      	mov	r4, r0
 800f19e:	4608      	mov	r0, r1
 800f1a0:	4611      	mov	r1, r2
 800f1a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f1a6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800f1aa:	6013      	str	r3, [r2, #0]
 800f1ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1b0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f1b4:	4622      	mov	r2, r4
 800f1b6:	701a      	strb	r2, [r3, #0]
 800f1b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1bc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	701a      	strb	r2, [r3, #0]
 800f1c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1c8:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f1cc:	460a      	mov	r2, r1
 800f1ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800f1d0:	f107 0310 	add.w	r3, r7, #16
 800f1d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f1d8:	f107 0308 	add.w	r3, r7, #8
 800f1dc:	2207      	movs	r2, #7
 800f1de:	2100      	movs	r1, #0
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f000 fe1f 	bl	800fe24 <Osal_MemSet>
  int index_input = 0;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800f1ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f1f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f1f4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f1f8:	7812      	ldrb	r2, [r2, #0]
 800f1fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f1fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f200:	3301      	adds	r3, #1
 800f202:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800f206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f20a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f20e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f212:	7812      	ldrb	r2, [r2, #0]
 800f214:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f216:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f21a:	3301      	adds	r3, #1
 800f21c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800f220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f224:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f228:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800f22c:	7812      	ldrb	r2, [r2, #0]
 800f22e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f230:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f234:	3301      	adds	r3, #1
 800f236:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f23a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f23e:	2218      	movs	r2, #24
 800f240:	2100      	movs	r1, #0
 800f242:	4618      	mov	r0, r3
 800f244:	f000 fdee 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f248:	233f      	movs	r3, #63	; 0x3f
 800f24a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800f24e:	238a      	movs	r3, #138	; 0x8a
 800f250:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f254:	f107 0310 	add.w	r3, r7, #16
 800f258:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f25c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f260:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800f264:	f107 0308 	add.w	r3, r7, #8
 800f268:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800f26c:	2307      	movs	r3, #7
 800f26e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f272:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f276:	2100      	movs	r1, #0
 800f278:	4618      	mov	r0, r3
 800f27a:	f001 f85d 	bl	8010338 <hci_send_req>
 800f27e:	4603      	mov	r3, r0
 800f280:	2b00      	cmp	r3, #0
 800f282:	da01      	bge.n	800f288 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800f284:	23ff      	movs	r3, #255	; 0xff
 800f286:	e02e      	b.n	800f2e6 <aci_gap_init+0x150>
  if ( resp.Status )
 800f288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f28c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d005      	beq.n	800f2a2 <aci_gap_init+0x10c>
    return resp.Status;
 800f296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f29a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	e021      	b.n	800f2e6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800f2a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f2aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f2ae:	b29a      	uxth	r2, r3
 800f2b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800f2bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f2c4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f2c8:	b29a      	uxth	r2, r3
 800f2ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800f2ce:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800f2d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2d4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f2d8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f2dc:	b29a      	uxth	r2, r3
 800f2de:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f2e2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f2e4:	2300      	movs	r3, #0
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd90      	pop	{r4, r7, pc}

0800f2f0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b0cc      	sub	sp, #304	; 0x130
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	4602      	mov	r2, r0
 800f2f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f300:	6019      	str	r1, [r3, #0]
 800f302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f306:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f30a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800f30c:	f107 0310 	add.w	r3, r7, #16
 800f310:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f318:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f31c:	2200      	movs	r2, #0
 800f31e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f320:	2300      	movs	r3, #0
 800f322:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800f326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f32a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f32e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f332:	7812      	ldrb	r2, [r2, #0]
 800f334:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f336:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f33a:	3301      	adds	r3, #1
 800f33c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800f340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f344:	1c58      	adds	r0, r3, #1
 800f346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f34a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f34e:	781a      	ldrb	r2, [r3, #0]
 800f350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f358:	6819      	ldr	r1, [r3, #0]
 800f35a:	f000 fd53 	bl	800fe04 <Osal_MemCpy>
  index_input += AdvDataLen;
 800f35e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f362:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f36c:	4413      	add	r3, r2
 800f36e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f372:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f376:	2218      	movs	r2, #24
 800f378:	2100      	movs	r1, #0
 800f37a:	4618      	mov	r0, r3
 800f37c:	f000 fd52 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f380:	233f      	movs	r3, #63	; 0x3f
 800f382:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800f386:	238e      	movs	r3, #142	; 0x8e
 800f388:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f38c:	f107 0310 	add.w	r3, r7, #16
 800f390:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f394:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f398:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f39c:	f107 030f 	add.w	r3, r7, #15
 800f3a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f3aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f3ae:	2100      	movs	r1, #0
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f000 ffc1 	bl	8010338 <hci_send_req>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	da01      	bge.n	800f3c0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800f3bc:	23ff      	movs	r3, #255	; 0xff
 800f3be:	e004      	b.n	800f3ca <aci_gap_update_adv_data+0xda>
  return status;
 800f3c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f3c4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f3c8:	781b      	ldrb	r3, [r3, #0]
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b088      	sub	sp, #32
 800f3d8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f3de:	f107 0308 	add.w	r3, r7, #8
 800f3e2:	2218      	movs	r2, #24
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f000 fd1c 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f3ec:	233f      	movs	r3, #63	; 0x3f
 800f3ee:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800f3f0:	2392      	movs	r3, #146	; 0x92
 800f3f2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f3f4:	1dfb      	adds	r3, r7, #7
 800f3f6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f3fc:	f107 0308 	add.w	r3, r7, #8
 800f400:	2100      	movs	r1, #0
 800f402:	4618      	mov	r0, r3
 800f404:	f000 ff98 	bl	8010338 <hci_send_req>
 800f408:	4603      	mov	r3, r0
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	da01      	bge.n	800f412 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f40e:	23ff      	movs	r3, #255	; 0xff
 800f410:	e000      	b.n	800f414 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800f412:	79fb      	ldrb	r3, [r7, #7]
}
 800f414:	4618      	mov	r0, r3
 800f416:	3720      	adds	r7, #32
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b0cc      	sub	sp, #304	; 0x130
 800f420:	af00      	add	r7, sp, #0
 800f422:	4602      	mov	r2, r0
 800f424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f428:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f42c:	801a      	strh	r2, [r3, #0]
 800f42e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f432:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f436:	460a      	mov	r2, r1
 800f438:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800f43a:	f107 0310 	add.w	r3, r7, #16
 800f43e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f446:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f44a:	2200      	movs	r2, #0
 800f44c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f44e:	2300      	movs	r3, #0
 800f450:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f458:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f45c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f460:	8812      	ldrh	r2, [r2, #0]
 800f462:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f464:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f468:	3302      	adds	r3, #2
 800f46a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800f46e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f472:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f476:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800f47a:	7812      	ldrb	r2, [r2, #0]
 800f47c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f47e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f482:	3301      	adds	r3, #1
 800f484:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f488:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f48c:	2218      	movs	r2, #24
 800f48e:	2100      	movs	r1, #0
 800f490:	4618      	mov	r0, r3
 800f492:	f000 fcc7 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f496:	233f      	movs	r3, #63	; 0x3f
 800f498:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800f49c:	23a5      	movs	r3, #165	; 0xa5
 800f49e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f4a2:	f107 0310 	add.w	r3, r7, #16
 800f4a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f4aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f4ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f4b2:	f107 030f 	add.w	r3, r7, #15
 800f4b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f4c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f4c4:	2100      	movs	r1, #0
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f000 ff36 	bl	8010338 <hci_send_req>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	da01      	bge.n	800f4d6 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800f4d2:	23ff      	movs	r3, #255	; 0xff
 800f4d4:	e004      	b.n	800f4e0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800f4d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f4da:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f4de:	781b      	ldrb	r3, [r3, #0]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}

0800f4ea <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800f4ea:	b580      	push	{r7, lr}
 800f4ec:	b088      	sub	sp, #32
 800f4ee:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f4f4:	f107 0308 	add.w	r3, r7, #8
 800f4f8:	2218      	movs	r2, #24
 800f4fa:	2100      	movs	r1, #0
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f000 fc91 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f502:	233f      	movs	r3, #63	; 0x3f
 800f504:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800f506:	f240 1301 	movw	r3, #257	; 0x101
 800f50a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f50c:	1dfb      	adds	r3, r7, #7
 800f50e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f510:	2301      	movs	r3, #1
 800f512:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f514:	f107 0308 	add.w	r3, r7, #8
 800f518:	2100      	movs	r1, #0
 800f51a:	4618      	mov	r0, r3
 800f51c:	f000 ff0c 	bl	8010338 <hci_send_req>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	da01      	bge.n	800f52a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800f526:	23ff      	movs	r3, #255	; 0xff
 800f528:	e000      	b.n	800f52c <aci_gatt_init+0x42>
  return status;
 800f52a:	79fb      	ldrb	r3, [r7, #7]
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3720      	adds	r7, #32
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800f534:	b590      	push	{r4, r7, lr}
 800f536:	b0cf      	sub	sp, #316	; 0x13c
 800f538:	af00      	add	r7, sp, #0
 800f53a:	4604      	mov	r4, r0
 800f53c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800f540:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800f544:	6001      	str	r1, [r0, #0]
 800f546:	4610      	mov	r0, r2
 800f548:	4619      	mov	r1, r3
 800f54a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f54e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f552:	4622      	mov	r2, r4
 800f554:	701a      	strb	r2, [r3, #0]
 800f556:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f55a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800f55e:	4602      	mov	r2, r0
 800f560:	701a      	strb	r2, [r3, #0]
 800f562:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f566:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f56a:	460a      	mov	r2, r1
 800f56c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800f56e:	f107 0310 	add.w	r3, r7, #16
 800f572:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800f576:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f57a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	2b01      	cmp	r3, #1
 800f582:	d00a      	beq.n	800f59a <aci_gatt_add_service+0x66>
 800f584:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f588:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	2b02      	cmp	r3, #2
 800f590:	d101      	bne.n	800f596 <aci_gatt_add_service+0x62>
 800f592:	2311      	movs	r3, #17
 800f594:	e002      	b.n	800f59c <aci_gatt_add_service+0x68>
 800f596:	2301      	movs	r3, #1
 800f598:	e000      	b.n	800f59c <aci_gatt_add_service+0x68>
 800f59a:	2303      	movs	r3, #3
 800f59c:	f107 0210 	add.w	r2, r7, #16
 800f5a0:	4413      	add	r3, r2
 800f5a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f5a6:	f107 030c 	add.w	r3, r7, #12
 800f5aa:	2203      	movs	r2, #3
 800f5ac:	2100      	movs	r1, #0
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f000 fc38 	bl	800fe24 <Osal_MemSet>
  int index_input = 0;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800f5ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f5be:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f5c2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800f5c6:	7812      	ldrb	r2, [r2, #0]
 800f5c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f5ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800f5d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f5d8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	2b01      	cmp	r3, #1
 800f5e0:	d002      	beq.n	800f5e8 <aci_gatt_add_service+0xb4>
 800f5e2:	2b02      	cmp	r3, #2
 800f5e4:	d004      	beq.n	800f5f0 <aci_gatt_add_service+0xbc>
 800f5e6:	e007      	b.n	800f5f8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800f5e8:	2302      	movs	r3, #2
 800f5ea:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800f5ee:	e005      	b.n	800f5fc <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800f5f0:	2310      	movs	r3, #16
 800f5f2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800f5f6:	e001      	b.n	800f5fc <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800f5f8:	2397      	movs	r3, #151	; 0x97
 800f5fa:	e06c      	b.n	800f6d6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800f5fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f600:	1c58      	adds	r0, r3, #1
 800f602:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800f606:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f60a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f60e:	6819      	ldr	r1, [r3, #0]
 800f610:	f000 fbf8 	bl	800fe04 <Osal_MemCpy>
    index_input += size;
 800f614:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800f618:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f61c:	4413      	add	r3, r2
 800f61e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800f622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f626:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f62a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800f62e:	7812      	ldrb	r2, [r2, #0]
 800f630:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800f632:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f636:	3301      	adds	r3, #1
 800f638:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800f63c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f640:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f644:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800f648:	7812      	ldrb	r2, [r2, #0]
 800f64a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800f64c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f650:	3301      	adds	r3, #1
 800f652:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f656:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f65a:	2218      	movs	r2, #24
 800f65c:	2100      	movs	r1, #0
 800f65e:	4618      	mov	r0, r3
 800f660:	f000 fbe0 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f664:	233f      	movs	r3, #63	; 0x3f
 800f666:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800f66a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800f66e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f672:	f107 0310 	add.w	r3, r7, #16
 800f676:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f67a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f67e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800f682:	f107 030c 	add.w	r3, r7, #12
 800f686:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800f68a:	2303      	movs	r3, #3
 800f68c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f690:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f694:	2100      	movs	r1, #0
 800f696:	4618      	mov	r0, r3
 800f698:	f000 fe4e 	bl	8010338 <hci_send_req>
 800f69c:	4603      	mov	r3, r0
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	da01      	bge.n	800f6a6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800f6a2:	23ff      	movs	r3, #255	; 0xff
 800f6a4:	e017      	b.n	800f6d6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800f6a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f6aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d005      	beq.n	800f6c0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800f6b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f6b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	e00a      	b.n	800f6d6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800f6c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f6c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f6c8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f6cc:	b29a      	uxth	r2, r3
 800f6ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f6d2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f6d4:	2300      	movs	r3, #0
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd90      	pop	{r4, r7, pc}

0800f6e0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800f6e0:	b590      	push	{r4, r7, lr}
 800f6e2:	b0d1      	sub	sp, #324	; 0x144
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	4604      	mov	r4, r0
 800f6e8:	4608      	mov	r0, r1
 800f6ea:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800f6ee:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800f6f2:	600a      	str	r2, [r1, #0]
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f6fa:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800f6fe:	4622      	mov	r2, r4
 800f700:	801a      	strh	r2, [r3, #0]
 800f702:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f706:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f70a:	4602      	mov	r2, r0
 800f70c:	701a      	strb	r2, [r3, #0]
 800f70e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f712:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800f716:	460a      	mov	r2, r1
 800f718:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800f71a:	f107 0318 	add.w	r3, r7, #24
 800f71e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800f722:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f726:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	2b01      	cmp	r3, #1
 800f72e:	d00a      	beq.n	800f746 <aci_gatt_add_char+0x66>
 800f730:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f734:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	2b02      	cmp	r3, #2
 800f73c:	d101      	bne.n	800f742 <aci_gatt_add_char+0x62>
 800f73e:	2313      	movs	r3, #19
 800f740:	e002      	b.n	800f748 <aci_gatt_add_char+0x68>
 800f742:	2303      	movs	r3, #3
 800f744:	e000      	b.n	800f748 <aci_gatt_add_char+0x68>
 800f746:	2305      	movs	r3, #5
 800f748:	f107 0218 	add.w	r2, r7, #24
 800f74c:	4413      	add	r3, r2
 800f74e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f752:	f107 0314 	add.w	r3, r7, #20
 800f756:	2203      	movs	r2, #3
 800f758:	2100      	movs	r1, #0
 800f75a:	4618      	mov	r0, r3
 800f75c:	f000 fb62 	bl	800fe24 <Osal_MemSet>
  int index_input = 0;
 800f760:	2300      	movs	r3, #0
 800f762:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800f766:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f76a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800f76e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800f772:	8812      	ldrh	r2, [r2, #0]
 800f774:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f776:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f77a:	3302      	adds	r3, #2
 800f77c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800f780:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f784:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800f788:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800f78c:	7812      	ldrb	r2, [r2, #0]
 800f78e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f790:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f794:	3301      	adds	r3, #1
 800f796:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800f79a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f79e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d002      	beq.n	800f7ae <aci_gatt_add_char+0xce>
 800f7a8:	2b02      	cmp	r3, #2
 800f7aa:	d004      	beq.n	800f7b6 <aci_gatt_add_char+0xd6>
 800f7ac:	e007      	b.n	800f7be <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800f7ae:	2302      	movs	r3, #2
 800f7b0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800f7b4:	e005      	b.n	800f7c2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800f7b6:	2310      	movs	r3, #16
 800f7b8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800f7bc:	e001      	b.n	800f7c2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800f7be:	2397      	movs	r3, #151	; 0x97
 800f7c0:	e091      	b.n	800f8e6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800f7c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f7c6:	1cd8      	adds	r0, r3, #3
 800f7c8:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800f7cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f7d0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f7d4:	6819      	ldr	r1, [r3, #0]
 800f7d6:	f000 fb15 	bl	800fe04 <Osal_MemCpy>
    index_input += size;
 800f7da:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800f7de:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800f7e2:	4413      	add	r3, r2
 800f7e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800f7e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f7ec:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800f7f0:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800f7f4:	8812      	ldrh	r2, [r2, #0]
 800f7f6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800f7f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f7fc:	3302      	adds	r3, #2
 800f7fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800f802:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f806:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800f80a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800f80c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f810:	3301      	adds	r3, #1
 800f812:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800f816:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f81a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800f81e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800f820:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f824:	3301      	adds	r3, #1
 800f826:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800f82a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f82e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800f832:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800f834:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f838:	3301      	adds	r3, #1
 800f83a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800f83e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f842:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800f846:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800f848:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f84c:	3301      	adds	r3, #1
 800f84e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800f852:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f856:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800f85a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800f85c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f860:	3301      	adds	r3, #1
 800f862:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f866:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800f86a:	2218      	movs	r2, #24
 800f86c:	2100      	movs	r1, #0
 800f86e:	4618      	mov	r0, r3
 800f870:	f000 fad8 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f874:	233f      	movs	r3, #63	; 0x3f
 800f876:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800f87a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800f87e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800f882:	f107 0318 	add.w	r3, r7, #24
 800f886:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800f88a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f88e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800f892:	f107 0314 	add.w	r3, r7, #20
 800f896:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800f89a:	2303      	movs	r3, #3
 800f89c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f8a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800f8a4:	2100      	movs	r1, #0
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f000 fd46 	bl	8010338 <hci_send_req>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	da01      	bge.n	800f8b6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800f8b2:	23ff      	movs	r3, #255	; 0xff
 800f8b4:	e017      	b.n	800f8e6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800f8b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f8ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d005      	beq.n	800f8d0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800f8c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f8c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	e00a      	b.n	800f8e6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800f8d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f8d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f8d8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f8dc:	b29a      	uxth	r2, r3
 800f8de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f8e2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd90      	pop	{r4, r7, pc}

0800f8f0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800f8f0:	b5b0      	push	{r4, r5, r7, lr}
 800f8f2:	b0cc      	sub	sp, #304	; 0x130
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	4605      	mov	r5, r0
 800f8f8:	460c      	mov	r4, r1
 800f8fa:	4610      	mov	r0, r2
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f902:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f906:	462a      	mov	r2, r5
 800f908:	801a      	strh	r2, [r3, #0]
 800f90a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f90e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f912:	4622      	mov	r2, r4
 800f914:	801a      	strh	r2, [r3, #0]
 800f916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f91a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800f91e:	4602      	mov	r2, r0
 800f920:	701a      	strb	r2, [r3, #0]
 800f922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f926:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800f92a:	460a      	mov	r2, r1
 800f92c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800f92e:	f107 0310 	add.w	r3, r7, #16
 800f932:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f93a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f93e:	2200      	movs	r2, #0
 800f940:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f942:	2300      	movs	r3, #0
 800f944:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800f948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f94c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f950:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f954:	8812      	ldrh	r2, [r2, #0]
 800f956:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f958:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f95c:	3302      	adds	r3, #2
 800f95e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800f962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f966:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f96a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800f96e:	8812      	ldrh	r2, [r2, #0]
 800f970:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800f972:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f976:	3302      	adds	r3, #2
 800f978:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800f97c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f980:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f984:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800f988:	7812      	ldrb	r2, [r2, #0]
 800f98a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800f98c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f990:	3301      	adds	r3, #1
 800f992:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800f996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f99a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f99e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800f9a2:	7812      	ldrb	r2, [r2, #0]
 800f9a4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800f9a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800f9b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f9b4:	1d98      	adds	r0, r3, #6
 800f9b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f9ba:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800f9c6:	f000 fa1d 	bl	800fe04 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800f9ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f9ce:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f9d8:	4413      	add	r3, r2
 800f9da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f9de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f9e2:	2218      	movs	r2, #24
 800f9e4:	2100      	movs	r1, #0
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f000 fa1c 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f9ec:	233f      	movs	r3, #63	; 0x3f
 800f9ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800f9f2:	f44f 7383 	mov.w	r3, #262	; 0x106
 800f9f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f9fa:	f107 0310 	add.w	r3, r7, #16
 800f9fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fa02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fa06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fa0a:	f107 030f 	add.w	r3, r7, #15
 800fa0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fa12:	2301      	movs	r3, #1
 800fa14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fa18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fa1c:	2100      	movs	r1, #0
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f000 fc8a 	bl	8010338 <hci_send_req>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	da01      	bge.n	800fa2e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800fa2a:	23ff      	movs	r3, #255	; 0xff
 800fa2c:	e004      	b.n	800fa38 <aci_gatt_update_char_value+0x148>
  return status;
 800fa2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa32:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fa36:	781b      	ldrb	r3, [r3, #0]
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bdb0      	pop	{r4, r5, r7, pc}

0800fa42 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800fa42:	b580      	push	{r7, lr}
 800fa44:	b0cc      	sub	sp, #304	; 0x130
 800fa46:	af00      	add	r7, sp, #0
 800fa48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fa50:	601a      	str	r2, [r3, #0]
 800fa52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa56:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	701a      	strb	r2, [r3, #0]
 800fa5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa62:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fa66:	460a      	mov	r2, r1
 800fa68:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800fa6a:	f107 0310 	add.w	r3, r7, #16
 800fa6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fa72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa76:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800fa84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fa88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fa8c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800fa90:	7812      	ldrb	r2, [r2, #0]
 800fa92:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fa94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fa98:	3301      	adds	r3, #1
 800fa9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800fa9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800faa2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800faa6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800faaa:	7812      	ldrb	r2, [r2, #0]
 800faac:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800faae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fab2:	3301      	adds	r3, #1
 800fab4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800fab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fabc:	1c98      	adds	r0, r3, #2
 800fabe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fac2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fac6:	781a      	ldrb	r2, [r3, #0]
 800fac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800facc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fad0:	6819      	ldr	r1, [r3, #0]
 800fad2:	f000 f997 	bl	800fe04 <Osal_MemCpy>
  index_input += Length;
 800fad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fada:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fade:	781b      	ldrb	r3, [r3, #0]
 800fae0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800fae4:	4413      	add	r3, r2
 800fae6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800faea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800faee:	2218      	movs	r2, #24
 800faf0:	2100      	movs	r1, #0
 800faf2:	4618      	mov	r0, r3
 800faf4:	f000 f996 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800faf8:	233f      	movs	r3, #63	; 0x3f
 800fafa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800fafe:	230c      	movs	r3, #12
 800fb00:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fb04:	f107 0310 	add.w	r3, r7, #16
 800fb08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fb0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fb10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fb14:	f107 030f 	add.w	r3, r7, #15
 800fb18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fb22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb26:	2100      	movs	r1, #0
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f000 fc05 	bl	8010338 <hci_send_req>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	da01      	bge.n	800fb38 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800fb34:	23ff      	movs	r3, #255	; 0xff
 800fb36:	e004      	b.n	800fb42 <aci_hal_write_config_data+0x100>
  return status;
 800fb38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb3c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fb40:	781b      	ldrb	r3, [r3, #0]
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b0cc      	sub	sp, #304	; 0x130
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	4602      	mov	r2, r0
 800fb54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb58:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fb5c:	701a      	strb	r2, [r3, #0]
 800fb5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb62:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fb66:	460a      	mov	r2, r1
 800fb68:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800fb6a:	f107 0310 	add.w	r3, r7, #16
 800fb6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fb72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb76:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800fb84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fb88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fb8c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800fb90:	7812      	ldrb	r2, [r2, #0]
 800fb92:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fb94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fb98:	3301      	adds	r3, #1
 800fb9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800fb9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fba2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fba6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fbaa:	7812      	ldrb	r2, [r2, #0]
 800fbac:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fbae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fbb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fbbc:	2218      	movs	r2, #24
 800fbbe:	2100      	movs	r1, #0
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f000 f92f 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fbc6:	233f      	movs	r3, #63	; 0x3f
 800fbc8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800fbcc:	230f      	movs	r3, #15
 800fbce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fbd2:	f107 0310 	add.w	r3, r7, #16
 800fbd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fbda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fbde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fbe2:	f107 030f 	add.w	r3, r7, #15
 800fbe6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fbea:	2301      	movs	r3, #1
 800fbec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fbf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fbf4:	2100      	movs	r1, #0
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f000 fb9e 	bl	8010338 <hci_send_req>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	da01      	bge.n	800fc06 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800fc02:	23ff      	movs	r3, #255	; 0xff
 800fc04:	e004      	b.n	800fc10 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800fc06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc0a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fc0e:	781b      	ldrb	r3, [r3, #0]
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800fc1a:	b580      	push	{r7, lr}
 800fc1c:	b0cc      	sub	sp, #304	; 0x130
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	4602      	mov	r2, r0
 800fc22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc26:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fc2a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800fc2c:	f107 0310 	add.w	r3, r7, #16
 800fc30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fc34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc38:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fc40:	2300      	movs	r3, #0
 800fc42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800fc46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fc4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fc4e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fc52:	8812      	ldrh	r2, [r2, #0]
 800fc54:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fc56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fc5a:	3302      	adds	r3, #2
 800fc5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fc60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fc64:	2218      	movs	r2, #24
 800fc66:	2100      	movs	r1, #0
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f000 f8db 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fc6e:	233f      	movs	r3, #63	; 0x3f
 800fc70:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800fc74:	2318      	movs	r3, #24
 800fc76:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fc7a:	f107 0310 	add.w	r3, r7, #16
 800fc7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fc82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fc86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fc8a:	f107 030f 	add.w	r3, r7, #15
 800fc8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fc92:	2301      	movs	r3, #1
 800fc94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fc98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fc9c:	2100      	movs	r1, #0
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f000 fb4a 	bl	8010338 <hci_send_req>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	da01      	bge.n	800fcae <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800fcaa:	23ff      	movs	r3, #255	; 0xff
 800fcac:	e004      	b.n	800fcb8 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800fcae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fcb2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fcb6:	781b      	ldrb	r3, [r3, #0]
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b088      	sub	sp, #32
 800fcc6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fccc:	f107 0308 	add.w	r3, r7, #8
 800fcd0:	2218      	movs	r2, #24
 800fcd2:	2100      	movs	r1, #0
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f000 f8a5 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x03;
 800fcda:	2303      	movs	r3, #3
 800fcdc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800fcde:	2303      	movs	r3, #3
 800fce0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800fce2:	1dfb      	adds	r3, r7, #7
 800fce4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800fce6:	2301      	movs	r3, #1
 800fce8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fcea:	f107 0308 	add.w	r3, r7, #8
 800fcee:	2100      	movs	r1, #0
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f000 fb21 	bl	8010338 <hci_send_req>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	da01      	bge.n	800fd00 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800fcfc:	23ff      	movs	r3, #255	; 0xff
 800fcfe:	e000      	b.n	800fd02 <hci_reset+0x40>
  return status;
 800fd00:	79fb      	ldrb	r3, [r7, #7]
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3720      	adds	r7, #32
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800fd0a:	b590      	push	{r4, r7, lr}
 800fd0c:	b0cd      	sub	sp, #308	; 0x134
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	4604      	mov	r4, r0
 800fd12:	4608      	mov	r0, r1
 800fd14:	4611      	mov	r1, r2
 800fd16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd1a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fd1e:	4622      	mov	r2, r4
 800fd20:	701a      	strb	r2, [r3, #0]
 800fd22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd26:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	701a      	strb	r2, [r3, #0]
 800fd2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd32:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800fd36:	460a      	mov	r2, r1
 800fd38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800fd3a:	f107 0310 	add.w	r3, r7, #16
 800fd3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fd42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd46:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800fd54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fd58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fd5c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800fd60:	7812      	ldrb	r2, [r2, #0]
 800fd62:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fd64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fd68:	3301      	adds	r3, #1
 800fd6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800fd6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fd72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fd76:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fd7a:	7812      	ldrb	r2, [r2, #0]
 800fd7c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fd7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fd82:	3301      	adds	r3, #1
 800fd84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800fd88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fd8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fd90:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800fd94:	7812      	ldrb	r2, [r2, #0]
 800fd96:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fd98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fda2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fda6:	2218      	movs	r2, #24
 800fda8:	2100      	movs	r1, #0
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f000 f83a 	bl	800fe24 <Osal_MemSet>
  rq.ogf = 0x08;
 800fdb0:	2308      	movs	r3, #8
 800fdb2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800fdb6:	2331      	movs	r3, #49	; 0x31
 800fdb8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fdbc:	f107 0310 	add.w	r3, r7, #16
 800fdc0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fdc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fdc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fdcc:	f107 030f 	add.w	r3, r7, #15
 800fdd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fdda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fdde:	2100      	movs	r1, #0
 800fde0:	4618      	mov	r0, r3
 800fde2:	f000 faa9 	bl	8010338 <hci_send_req>
 800fde6:	4603      	mov	r3, r0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	da01      	bge.n	800fdf0 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800fdec:	23ff      	movs	r3, #255	; 0xff
 800fdee:	e004      	b.n	800fdfa <hci_le_set_default_phy+0xf0>
  return status;
 800fdf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fdf4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fdf8:	781b      	ldrb	r3, [r3, #0]
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd90      	pop	{r4, r7, pc}

0800fe04 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b084      	sub	sp, #16
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	60f8      	str	r0, [r7, #12]
 800fe0c:	60b9      	str	r1, [r7, #8]
 800fe0e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	68b9      	ldr	r1, [r7, #8]
 800fe14:	68f8      	ldr	r0, [r7, #12]
 800fe16:	f003 f955 	bl	80130c4 <memcpy>
 800fe1a:	4603      	mov	r3, r0
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3710      	adds	r7, #16
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	60f8      	str	r0, [r7, #12]
 800fe2c:	60b9      	str	r1, [r7, #8]
 800fe2e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	68b9      	ldr	r1, [r7, #8]
 800fe34:	68f8      	ldr	r0, [r7, #12]
 800fe36:	f003 f919 	bl	801306c <memset>
 800fe3a:	4603      	mov	r3, r0
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	3710      	adds	r7, #16
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800fe44:	b480      	push	{r7}
 800fe46:	af00      	add	r7, sp, #0
  return;
 800fe48:	bf00      	nop
}
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe50:	4770      	bx	lr

0800fe52 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800fe52:	b480      	push	{r7}
 800fe54:	af00      	add	r7, sp, #0
  return;
 800fe56:	bf00      	nop
}
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5e:	4770      	bx	lr

0800fe60 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800fe60:	b480      	push	{r7}
 800fe62:	af00      	add	r7, sp, #0
  return;
 800fe64:	bf00      	nop
}
 800fe66:	46bd      	mov	sp, r7
 800fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6c:	4770      	bx	lr

0800fe6e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800fe6e:	b480      	push	{r7}
 800fe70:	af00      	add	r7, sp, #0
  return;
 800fe72:	bf00      	nop
}
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr

0800fe7c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	af00      	add	r7, sp, #0
  return;
 800fe80:	bf00      	nop
}
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr

0800fe8a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800fe8a:	b480      	push	{r7}
 800fe8c:	af00      	add	r7, sp, #0
  return;
 800fe8e:	bf00      	nop
}
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr

0800fe98 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800fe98:	b480      	push	{r7}
 800fe9a:	af00      	add	r7, sp, #0
  return;
 800fe9c:	bf00      	nop
}
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr

0800fea6 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800fea6:	b480      	push	{r7}
 800fea8:	af00      	add	r7, sp, #0
  return;
 800feaa:	bf00      	nop
}
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr

0800feb4 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800feb4:	b480      	push	{r7}
 800feb6:	af00      	add	r7, sp, #0
  return;
 800feb8:	bf00      	nop
}
 800feba:	46bd      	mov	sp, r7
 800febc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec0:	4770      	bx	lr

0800fec2 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800fec2:	b480      	push	{r7}
 800fec4:	af00      	add	r7, sp, #0
  return;
 800fec6:	bf00      	nop
}
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr

0800fed0 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800fed0:	b480      	push	{r7}
 800fed2:	af00      	add	r7, sp, #0
  return;
 800fed4:	bf00      	nop
}
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr

0800fede <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800fede:	b480      	push	{r7}
 800fee0:	af00      	add	r7, sp, #0
  return;
 800fee2:	bf00      	nop
}
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800feec:	b480      	push	{r7}
 800feee:	af00      	add	r7, sp, #0
  return;
 800fef0:	bf00      	nop
}
 800fef2:	46bd      	mov	sp, r7
 800fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef8:	4770      	bx	lr

0800fefa <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800fefa:	b480      	push	{r7}
 800fefc:	af00      	add	r7, sp, #0
  return;
 800fefe:	bf00      	nop
}
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800ff08:	b480      	push	{r7}
 800ff0a:	af00      	add	r7, sp, #0
  return;
 800ff0c:	bf00      	nop
}
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr

0800ff16 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800ff16:	b480      	push	{r7}
 800ff18:	af00      	add	r7, sp, #0
  return;
 800ff1a:	bf00      	nop
}
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr

0800ff24 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800ff24:	b480      	push	{r7}
 800ff26:	af00      	add	r7, sp, #0
  return;
 800ff28:	bf00      	nop
}
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff30:	4770      	bx	lr
	...

0800ff34 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800ff38:	4b04      	ldr	r3, [pc, #16]	; (800ff4c <SVCCTL_Init+0x18>)
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800ff3e:	4b04      	ldr	r3, [pc, #16]	; (800ff50 <SVCCTL_Init+0x1c>)
 800ff40:	2200      	movs	r2, #0
 800ff42:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800ff44:	f000 f806 	bl	800ff54 <SVCCTL_SvcInit>

  return;
 800ff48:	bf00      	nop
}
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	20000180 	.word	0x20000180
 800ff50:	200001a0 	.word	0x200001a0

0800ff54 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	af00      	add	r7, sp, #0
  BAS_Init();
 800ff58:	f7ff ff74 	bl	800fe44 <BAS_Init>

  BLS_Init();
 800ff5c:	f7ff ff79 	bl	800fe52 <BLS_Init>

  CRS_STM_Init();
 800ff60:	f7ff ff7e 	bl	800fe60 <CRS_STM_Init>

  DIS_Init();
 800ff64:	f7ff ff83 	bl	800fe6e <DIS_Init>

  EDS_STM_Init();
 800ff68:	f7ff ff88 	bl	800fe7c <EDS_STM_Init>

  HIDS_Init();
 800ff6c:	f7ff ff8d 	bl	800fe8a <HIDS_Init>

  HRS_Init();
 800ff70:	f7ff ff92 	bl	800fe98 <HRS_Init>

  HTS_Init();
 800ff74:	f7ff ff97 	bl	800fea6 <HTS_Init>

  IAS_Init();
 800ff78:	f7ff ff9c 	bl	800feb4 <IAS_Init>

  LLS_Init();
 800ff7c:	f7ff ffa1 	bl	800fec2 <LLS_Init>

  TPS_Init();
 800ff80:	f7ff ffa6 	bl	800fed0 <TPS_Init>

  MOTENV_STM_Init();
 800ff84:	f7ff ffab 	bl	800fede <MOTENV_STM_Init>

  P2PS_STM_Init();
 800ff88:	f7ff ffb0 	bl	800feec <P2PS_STM_Init>

  ZDD_STM_Init();
 800ff8c:	f7ff ffb5 	bl	800fefa <ZDD_STM_Init>

  OTAS_STM_Init();
 800ff90:	f7ff ffba 	bl	800ff08 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ff94:	f7ff ffc6 	bl	800ff24 <BVOPUS_STM_Init>

  MESH_Init();
 800ff98:	f7ff ffbd 	bl	800ff16 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800ff9c:	f001 fda2 	bl	8011ae4 <SVCCTL_InitCustomSvc>
  
  return;
 800ffa0:	bf00      	nop
}
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b083      	sub	sp, #12
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800ffac:	4b09      	ldr	r3, [pc, #36]	; (800ffd4 <SVCCTL_RegisterSvcHandler+0x30>)
 800ffae:	7f1b      	ldrb	r3, [r3, #28]
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	4a08      	ldr	r2, [pc, #32]	; (800ffd4 <SVCCTL_RegisterSvcHandler+0x30>)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800ffba:	4b06      	ldr	r3, [pc, #24]	; (800ffd4 <SVCCTL_RegisterSvcHandler+0x30>)
 800ffbc:	7f1b      	ldrb	r3, [r3, #28]
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	b2da      	uxtb	r2, r3
 800ffc2:	4b04      	ldr	r3, [pc, #16]	; (800ffd4 <SVCCTL_RegisterSvcHandler+0x30>)
 800ffc4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800ffc6:	bf00      	nop
}
 800ffc8:	370c      	adds	r7, #12
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd0:	4770      	bx	lr
 800ffd2:	bf00      	nop
 800ffd4:	20000180 	.word	0x20000180

0800ffd8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b086      	sub	sp, #24
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	2bff      	cmp	r3, #255	; 0xff
 800fff0:	d125      	bne.n	801003e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	3302      	adds	r3, #2
 800fff6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	881b      	ldrh	r3, [r3, #0]
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010006:	d118      	bne.n	801003a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010008:	2300      	movs	r3, #0
 801000a:	757b      	strb	r3, [r7, #21]
 801000c:	e00d      	b.n	801002a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 801000e:	7d7b      	ldrb	r3, [r7, #21]
 8010010:	4a1a      	ldr	r2, [pc, #104]	; (801007c <SVCCTL_UserEvtRx+0xa4>)
 8010012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	4798      	blx	r3
 801001a:	4603      	mov	r3, r0
 801001c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 801001e:	7dfb      	ldrb	r3, [r7, #23]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d108      	bne.n	8010036 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010024:	7d7b      	ldrb	r3, [r7, #21]
 8010026:	3301      	adds	r3, #1
 8010028:	757b      	strb	r3, [r7, #21]
 801002a:	4b14      	ldr	r3, [pc, #80]	; (801007c <SVCCTL_UserEvtRx+0xa4>)
 801002c:	7f1b      	ldrb	r3, [r3, #28]
 801002e:	7d7a      	ldrb	r2, [r7, #21]
 8010030:	429a      	cmp	r2, r3
 8010032:	d3ec      	bcc.n	801000e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8010034:	e002      	b.n	801003c <SVCCTL_UserEvtRx+0x64>
              break;
 8010036:	bf00      	nop
          break;
 8010038:	e000      	b.n	801003c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 801003a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 801003c:	e000      	b.n	8010040 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 801003e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8010040:	7dfb      	ldrb	r3, [r7, #23]
 8010042:	2b02      	cmp	r3, #2
 8010044:	d00f      	beq.n	8010066 <SVCCTL_UserEvtRx+0x8e>
 8010046:	2b02      	cmp	r3, #2
 8010048:	dc10      	bgt.n	801006c <SVCCTL_UserEvtRx+0x94>
 801004a:	2b00      	cmp	r3, #0
 801004c:	d002      	beq.n	8010054 <SVCCTL_UserEvtRx+0x7c>
 801004e:	2b01      	cmp	r3, #1
 8010050:	d006      	beq.n	8010060 <SVCCTL_UserEvtRx+0x88>
 8010052:	e00b      	b.n	801006c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f000 ff85 	bl	8010f64 <SVCCTL_App_Notification>
 801005a:	4603      	mov	r3, r0
 801005c:	75bb      	strb	r3, [r7, #22]
      break;
 801005e:	e008      	b.n	8010072 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8010060:	2301      	movs	r3, #1
 8010062:	75bb      	strb	r3, [r7, #22]
      break;
 8010064:	e005      	b.n	8010072 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8010066:	2300      	movs	r3, #0
 8010068:	75bb      	strb	r3, [r7, #22]
      break;
 801006a:	e002      	b.n	8010072 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 801006c:	2301      	movs	r3, #1
 801006e:	75bb      	strb	r3, [r7, #22]
      break;
 8010070:	bf00      	nop
  }

  return (return_status);
 8010072:	7dbb      	ldrb	r3, [r7, #22]
}
 8010074:	4618      	mov	r0, r3
 8010076:	3718      	adds	r7, #24
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	20000180 	.word	0x20000180

08010080 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b088      	sub	sp, #32
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010088:	f107 030c 	add.w	r3, r7, #12
 801008c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	212e      	movs	r1, #46	; 0x2e
 8010098:	f64f 4066 	movw	r0, #64614	; 0xfc66
 801009c:	f000 fae8 	bl	8010670 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	330b      	adds	r3, #11
 80100a4:	78db      	ldrb	r3, [r3, #3]
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3720      	adds	r7, #32
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}

080100ae <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80100ae:	b580      	push	{r7, lr}
 80100b0:	b088      	sub	sp, #32
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80100b6:	f107 030c 	add.w	r3, r7, #12
 80100ba:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80100c2:	69fb      	ldr	r3, [r7, #28]
 80100c4:	210f      	movs	r1, #15
 80100c6:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80100ca:	f000 fad1 	bl	8010670 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	330b      	adds	r3, #11
 80100d2:	78db      	ldrb	r3, [r3, #3]
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3720      	adds	r7, #32
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b088      	sub	sp, #32
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80100e4:	f107 030c 	add.w	r3, r7, #12
 80100e8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	687a      	ldr	r2, [r7, #4]
 80100ee:	2110      	movs	r1, #16
 80100f0:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80100f4:	f000 fabc 	bl	8010670 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	330b      	adds	r3, #11
 80100fc:	78db      	ldrb	r3, [r3, #3]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3720      	adds	r7, #32
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
	...

08010108 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8010108:	b480      	push	{r7}
 801010a:	b08b      	sub	sp, #44	; 0x2c
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8010110:	2300      	movs	r3, #0
 8010112:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8010114:	2300      	movs	r3, #0
 8010116:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8010118:	2300      	movs	r3, #0
 801011a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 801011c:	2300      	movs	r3, #0
 801011e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8010120:	2300      	movs	r3, #0
 8010122:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8010124:	2300      	movs	r3, #0
 8010126:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8010128:	2300      	movs	r3, #0
 801012a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 801012c:	2300      	movs	r3, #0
 801012e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8010130:	4b4a      	ldr	r3, [pc, #296]	; (801025c <SHCI_GetWirelessFwInfo+0x154>)
 8010132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010134:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010138:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010142:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4a44      	ldr	r2, [pc, #272]	; (8010260 <SHCI_GetWirelessFwInfo+0x158>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d10f      	bne.n	8010174 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	695b      	ldr	r3, [r3, #20]
 8010158:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	699b      	ldr	r3, [r3, #24]
 801015e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	69db      	ldr	r3, [r3, #28]
 8010164:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	691b      	ldr	r3, [r3, #16]
 8010170:	617b      	str	r3, [r7, #20]
 8010172:	e01a      	b.n	80101aa <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	009b      	lsls	r3, r3, #2
 8010178:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801017c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8010180:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	691b      	ldr	r3, [r3, #16]
 8010188:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	695b      	ldr	r3, [r3, #20]
 8010190:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	699b      	ldr	r3, [r3, #24]
 8010198:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	689b      	ldr	r3, [r3, #8]
 80101a8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80101aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ac:	0e1b      	lsrs	r3, r3, #24
 80101ae:	b2da      	uxtb	r2, r3
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80101b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b6:	0c1b      	lsrs	r3, r3, #16
 80101b8:	b2da      	uxtb	r2, r3
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80101be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c0:	0a1b      	lsrs	r3, r3, #8
 80101c2:	b2da      	uxtb	r2, r3
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80101c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ca:	091b      	lsrs	r3, r3, #4
 80101cc:	b2db      	uxtb	r3, r3
 80101ce:	f003 030f 	and.w	r3, r3, #15
 80101d2:	b2da      	uxtb	r2, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80101d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	f003 030f 	and.w	r3, r3, #15
 80101e0:	b2da      	uxtb	r2, r3
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80101e6:	6a3b      	ldr	r3, [r7, #32]
 80101e8:	0e1b      	lsrs	r3, r3, #24
 80101ea:	b2da      	uxtb	r2, r3
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80101f0:	6a3b      	ldr	r3, [r7, #32]
 80101f2:	0c1b      	lsrs	r3, r3, #16
 80101f4:	b2da      	uxtb	r2, r3
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80101fa:	6a3b      	ldr	r3, [r7, #32]
 80101fc:	0a1b      	lsrs	r3, r3, #8
 80101fe:	b2da      	uxtb	r2, r3
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010204:	6a3b      	ldr	r3, [r7, #32]
 8010206:	b2da      	uxtb	r2, r3
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 801020c:	69fb      	ldr	r3, [r7, #28]
 801020e:	b2da      	uxtb	r2, r3
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010214:	69bb      	ldr	r3, [r7, #24]
 8010216:	0e1b      	lsrs	r3, r3, #24
 8010218:	b2da      	uxtb	r2, r3
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	0c1b      	lsrs	r3, r3, #16
 8010222:	b2da      	uxtb	r2, r3
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8010228:	69bb      	ldr	r3, [r7, #24]
 801022a:	0a1b      	lsrs	r3, r3, #8
 801022c:	b2da      	uxtb	r2, r3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	0e1b      	lsrs	r3, r3, #24
 8010236:	b2da      	uxtb	r2, r3
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	0c1b      	lsrs	r3, r3, #16
 8010240:	b2da      	uxtb	r2, r3
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	b2da      	uxtb	r2, r3
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 801024e:	2300      	movs	r3, #0
}
 8010250:	4618      	mov	r0, r3
 8010252:	372c      	adds	r7, #44	; 0x2c
 8010254:	46bd      	mov	sp, r7
 8010256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025a:	4770      	bx	lr
 801025c:	58004000 	.word	0x58004000
 8010260:	a94656b9 	.word	0xa94656b9

08010264 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	4a08      	ldr	r2, [pc, #32]	; (8010294 <hci_init+0x30>)
 8010274:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8010276:	4a08      	ldr	r2, [pc, #32]	; (8010298 <hci_init+0x34>)
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 801027c:	4806      	ldr	r0, [pc, #24]	; (8010298 <hci_init+0x34>)
 801027e:	f000 f979 	bl	8010574 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4618      	mov	r0, r3
 8010288:	f000 f8da 	bl	8010440 <TlInit>

  return;
 801028c:	bf00      	nop
}
 801028e:	3708      	adds	r7, #8
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}
 8010294:	20001104 	.word	0x20001104
 8010298:	200010dc 	.word	0x200010dc

0801029c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b084      	sub	sp, #16
 80102a0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80102a2:	4822      	ldr	r0, [pc, #136]	; (801032c <hci_user_evt_proc+0x90>)
 80102a4:	f000 fd32 	bl	8010d0c <LST_is_empty>
 80102a8:	4603      	mov	r3, r0
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d12b      	bne.n	8010306 <hci_user_evt_proc+0x6a>
 80102ae:	4b20      	ldr	r3, [pc, #128]	; (8010330 <hci_user_evt_proc+0x94>)
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d027      	beq.n	8010306 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80102b6:	f107 030c 	add.w	r3, r7, #12
 80102ba:	4619      	mov	r1, r3
 80102bc:	481b      	ldr	r0, [pc, #108]	; (801032c <hci_user_evt_proc+0x90>)
 80102be:	f000 fdb4 	bl	8010e2a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80102c2:	4b1c      	ldr	r3, [pc, #112]	; (8010334 <hci_user_evt_proc+0x98>)
 80102c4:	69db      	ldr	r3, [r3, #28]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d00c      	beq.n	80102e4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80102ce:	2301      	movs	r3, #1
 80102d0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80102d2:	4b18      	ldr	r3, [pc, #96]	; (8010334 <hci_user_evt_proc+0x98>)
 80102d4:	69db      	ldr	r3, [r3, #28]
 80102d6:	1d3a      	adds	r2, r7, #4
 80102d8:	4610      	mov	r0, r2
 80102da:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80102dc:	793a      	ldrb	r2, [r7, #4]
 80102de:	4b14      	ldr	r3, [pc, #80]	; (8010330 <hci_user_evt_proc+0x94>)
 80102e0:	701a      	strb	r2, [r3, #0]
 80102e2:	e002      	b.n	80102ea <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80102e4:	4b12      	ldr	r3, [pc, #72]	; (8010330 <hci_user_evt_proc+0x94>)
 80102e6:	2201      	movs	r2, #1
 80102e8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80102ea:	4b11      	ldr	r3, [pc, #68]	; (8010330 <hci_user_evt_proc+0x94>)
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d004      	beq.n	80102fc <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	4618      	mov	r0, r3
 80102f6:	f000 fc0d 	bl	8010b14 <TL_MM_EvtDone>
 80102fa:	e004      	b.n	8010306 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	4619      	mov	r1, r3
 8010300:	480a      	ldr	r0, [pc, #40]	; (801032c <hci_user_evt_proc+0x90>)
 8010302:	f000 fd25 	bl	8010d50 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8010306:	4809      	ldr	r0, [pc, #36]	; (801032c <hci_user_evt_proc+0x90>)
 8010308:	f000 fd00 	bl	8010d0c <LST_is_empty>
 801030c:	4603      	mov	r3, r0
 801030e:	2b00      	cmp	r3, #0
 8010310:	d107      	bne.n	8010322 <hci_user_evt_proc+0x86>
 8010312:	4b07      	ldr	r3, [pc, #28]	; (8010330 <hci_user_evt_proc+0x94>)
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d003      	beq.n	8010322 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 801031a:	4804      	ldr	r0, [pc, #16]	; (801032c <hci_user_evt_proc+0x90>)
 801031c:	f001 f83a 	bl	8011394 <hci_notify_asynch_evt>
  }


  return;
 8010320:	bf00      	nop
 8010322:	bf00      	nop
}
 8010324:	3710      	adds	r7, #16
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
 801032a:	bf00      	nop
 801032c:	200001a8 	.word	0x200001a8
 8010330:	200001b4 	.word	0x200001b4
 8010334:	200010dc 	.word	0x200010dc

08010338 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b088      	sub	sp, #32
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	460b      	mov	r3, r1
 8010342:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8010344:	2000      	movs	r0, #0
 8010346:	f000 f8d1 	bl	80104ec <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 801034a:	2300      	movs	r3, #0
 801034c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	885b      	ldrh	r3, [r3, #2]
 8010352:	b21b      	sxth	r3, r3
 8010354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010358:	b21a      	sxth	r2, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	881b      	ldrh	r3, [r3, #0]
 801035e:	029b      	lsls	r3, r3, #10
 8010360:	b21b      	sxth	r3, r3
 8010362:	4313      	orrs	r3, r2
 8010364:	b21b      	sxth	r3, r3
 8010366:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8010368:	4b33      	ldr	r3, [pc, #204]	; (8010438 <hci_send_req+0x100>)
 801036a:	2201      	movs	r2, #1
 801036c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	68db      	ldr	r3, [r3, #12]
 8010372:	b2d9      	uxtb	r1, r3
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	689a      	ldr	r2, [r3, #8]
 8010378:	8bbb      	ldrh	r3, [r7, #28]
 801037a:	4618      	mov	r0, r3
 801037c:	f000 f890 	bl	80104a0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8010380:	e04e      	b.n	8010420 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8010382:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8010386:	f001 f81c 	bl	80113c2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 801038a:	e043      	b.n	8010414 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 801038c:	f107 030c 	add.w	r3, r7, #12
 8010390:	4619      	mov	r1, r3
 8010392:	482a      	ldr	r0, [pc, #168]	; (801043c <hci_send_req+0x104>)
 8010394:	f000 fd49 	bl	8010e2a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	7a5b      	ldrb	r3, [r3, #9]
 801039c:	2b0f      	cmp	r3, #15
 801039e:	d114      	bne.n	80103ca <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	330b      	adds	r3, #11
 80103a4:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	885b      	ldrh	r3, [r3, #2]
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	8bba      	ldrh	r2, [r7, #28]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d104      	bne.n	80103bc <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	691b      	ldr	r3, [r3, #16]
 80103b6:	693a      	ldr	r2, [r7, #16]
 80103b8:	7812      	ldrb	r2, [r2, #0]
 80103ba:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	785b      	ldrb	r3, [r3, #1]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d027      	beq.n	8010414 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80103c4:	2301      	movs	r3, #1
 80103c6:	77fb      	strb	r3, [r7, #31]
 80103c8:	e024      	b.n	8010414 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	330b      	adds	r3, #11
 80103ce:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	8bba      	ldrh	r2, [r7, #28]
 80103da:	429a      	cmp	r2, r3
 80103dc:	d114      	bne.n	8010408 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	7a9b      	ldrb	r3, [r3, #10]
 80103e2:	3b03      	subs	r3, #3
 80103e4:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	695a      	ldr	r2, [r3, #20]
 80103ea:	7dfb      	ldrb	r3, [r7, #23]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	bfa8      	it	ge
 80103f0:	461a      	movge	r2, r3
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6918      	ldr	r0, [r3, #16]
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	1cd9      	adds	r1, r3, #3
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	695b      	ldr	r3, [r3, #20]
 8010402:	461a      	mov	r2, r3
 8010404:	f002 fe5e 	bl	80130c4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d001      	beq.n	8010414 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8010410:	2301      	movs	r3, #1
 8010412:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8010414:	4809      	ldr	r0, [pc, #36]	; (801043c <hci_send_req+0x104>)
 8010416:	f000 fc79 	bl	8010d0c <LST_is_empty>
 801041a:	4603      	mov	r3, r0
 801041c:	2b00      	cmp	r3, #0
 801041e:	d0b5      	beq.n	801038c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8010420:	7ffb      	ldrb	r3, [r7, #31]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d0ad      	beq.n	8010382 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8010426:	2001      	movs	r0, #1
 8010428:	f000 f860 	bl	80104ec <NotifyCmdStatus>

  return 0;
 801042c:	2300      	movs	r3, #0
}
 801042e:	4618      	mov	r0, r3
 8010430:	3720      	adds	r7, #32
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
 8010436:	bf00      	nop
 8010438:	20001108 	.word	0x20001108
 801043c:	200010fc 	.word	0x200010fc

08010440 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b086      	sub	sp, #24
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8010448:	480f      	ldr	r0, [pc, #60]	; (8010488 <TlInit+0x48>)
 801044a:	f000 fc4f 	bl	8010cec <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 801044e:	4a0f      	ldr	r2, [pc, #60]	; (801048c <TlInit+0x4c>)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8010454:	480e      	ldr	r0, [pc, #56]	; (8010490 <TlInit+0x50>)
 8010456:	f000 fc49 	bl	8010cec <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 801045a:	4b0e      	ldr	r3, [pc, #56]	; (8010494 <TlInit+0x54>)
 801045c:	2201      	movs	r2, #1
 801045e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8010460:	4b0d      	ldr	r3, [pc, #52]	; (8010498 <TlInit+0x58>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d00a      	beq.n	801047e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 801046c:	4b0b      	ldr	r3, [pc, #44]	; (801049c <TlInit+0x5c>)
 801046e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8010470:	4b09      	ldr	r3, [pc, #36]	; (8010498 <TlInit+0x58>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	f107 0208 	add.w	r2, r7, #8
 8010478:	4610      	mov	r0, r2
 801047a:	4798      	blx	r3
  }

  return;
 801047c:	bf00      	nop
 801047e:	bf00      	nop
}
 8010480:	3718      	adds	r7, #24
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	200010fc 	.word	0x200010fc
 801048c:	200001b0 	.word	0x200001b0
 8010490:	200001a8 	.word	0x200001a8
 8010494:	200001b4 	.word	0x200001b4
 8010498:	200010dc 	.word	0x200010dc
 801049c:	0801052d 	.word	0x0801052d

080104a0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	4603      	mov	r3, r0
 80104a8:	603a      	str	r2, [r7, #0]
 80104aa:	80fb      	strh	r3, [r7, #6]
 80104ac:	460b      	mov	r3, r1
 80104ae:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80104b0:	4b0c      	ldr	r3, [pc, #48]	; (80104e4 <SendCmd+0x44>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	88fa      	ldrh	r2, [r7, #6]
 80104b6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80104ba:	4b0a      	ldr	r3, [pc, #40]	; (80104e4 <SendCmd+0x44>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	797a      	ldrb	r2, [r7, #5]
 80104c0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80104c2:	4b08      	ldr	r3, [pc, #32]	; (80104e4 <SendCmd+0x44>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	330c      	adds	r3, #12
 80104c8:	797a      	ldrb	r2, [r7, #5]
 80104ca:	6839      	ldr	r1, [r7, #0]
 80104cc:	4618      	mov	r0, r3
 80104ce:	f002 fdf9 	bl	80130c4 <memcpy>

  hciContext.io.Send(0,0);
 80104d2:	4b05      	ldr	r3, [pc, #20]	; (80104e8 <SendCmd+0x48>)
 80104d4:	691b      	ldr	r3, [r3, #16]
 80104d6:	2100      	movs	r1, #0
 80104d8:	2000      	movs	r0, #0
 80104da:	4798      	blx	r3

  return;
 80104dc:	bf00      	nop
}
 80104de:	3708      	adds	r7, #8
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}
 80104e4:	200001b0 	.word	0x200001b0
 80104e8:	200010dc 	.word	0x200010dc

080104ec <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	4603      	mov	r3, r0
 80104f4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80104f6:	79fb      	ldrb	r3, [r7, #7]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d108      	bne.n	801050e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80104fc:	4b0a      	ldr	r3, [pc, #40]	; (8010528 <NotifyCmdStatus+0x3c>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d00d      	beq.n	8010520 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8010504:	4b08      	ldr	r3, [pc, #32]	; (8010528 <NotifyCmdStatus+0x3c>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	2000      	movs	r0, #0
 801050a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 801050c:	e008      	b.n	8010520 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 801050e:	4b06      	ldr	r3, [pc, #24]	; (8010528 <NotifyCmdStatus+0x3c>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d004      	beq.n	8010520 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8010516:	4b04      	ldr	r3, [pc, #16]	; (8010528 <NotifyCmdStatus+0x3c>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	2001      	movs	r0, #1
 801051c:	4798      	blx	r3
  return;
 801051e:	bf00      	nop
 8010520:	bf00      	nop
}
 8010522:	3708      	adds	r7, #8
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}
 8010528:	20001104 	.word	0x20001104

0801052c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	7a5b      	ldrb	r3, [r3, #9]
 8010538:	2b0f      	cmp	r3, #15
 801053a:	d003      	beq.n	8010544 <TlEvtReceived+0x18>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	7a5b      	ldrb	r3, [r3, #9]
 8010540:	2b0e      	cmp	r3, #14
 8010542:	d107      	bne.n	8010554 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8010544:	6879      	ldr	r1, [r7, #4]
 8010546:	4809      	ldr	r0, [pc, #36]	; (801056c <TlEvtReceived+0x40>)
 8010548:	f000 fc28 	bl	8010d9c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 801054c:	2000      	movs	r0, #0
 801054e:	f000 ff2d 	bl	80113ac <hci_cmd_resp_release>
 8010552:	e006      	b.n	8010562 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8010554:	6879      	ldr	r1, [r7, #4]
 8010556:	4806      	ldr	r0, [pc, #24]	; (8010570 <TlEvtReceived+0x44>)
 8010558:	f000 fc20 	bl	8010d9c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 801055c:	4804      	ldr	r0, [pc, #16]	; (8010570 <TlEvtReceived+0x44>)
 801055e:	f000 ff19 	bl	8011394 <hci_notify_asynch_evt>
  }

  return;
 8010562:	bf00      	nop
}
 8010564:	3708      	adds	r7, #8
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	200010fc 	.word	0x200010fc
 8010570:	200001a8 	.word	0x200001a8

08010574 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8010574:	b480      	push	{r7}
 8010576:	b083      	sub	sp, #12
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	4a05      	ldr	r2, [pc, #20]	; (8010594 <hci_register_io_bus+0x20>)
 8010580:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	4a04      	ldr	r2, [pc, #16]	; (8010598 <hci_register_io_bus+0x24>)
 8010586:	611a      	str	r2, [r3, #16]

  return;
 8010588:	bf00      	nop
}
 801058a:	370c      	adds	r7, #12
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr
 8010594:	0801088d 	.word	0x0801088d
 8010598:	080108f5 	.word	0x080108f5

0801059c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	4a08      	ldr	r2, [pc, #32]	; (80105cc <shci_init+0x30>)
 80105ac:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80105ae:	4a08      	ldr	r2, [pc, #32]	; (80105d0 <shci_init+0x34>)
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80105b4:	4806      	ldr	r0, [pc, #24]	; (80105d0 <shci_init+0x34>)
 80105b6:	f000 f915 	bl	80107e4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	4618      	mov	r0, r3
 80105c0:	f000 f898 	bl	80106f4 <TlInit>

  return;
 80105c4:	bf00      	nop
}
 80105c6:	3708      	adds	r7, #8
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}
 80105cc:	2000112c 	.word	0x2000112c
 80105d0:	2000110c 	.word	0x2000110c

080105d4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b084      	sub	sp, #16
 80105d8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80105da:	4822      	ldr	r0, [pc, #136]	; (8010664 <shci_user_evt_proc+0x90>)
 80105dc:	f000 fb96 	bl	8010d0c <LST_is_empty>
 80105e0:	4603      	mov	r3, r0
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d12b      	bne.n	801063e <shci_user_evt_proc+0x6a>
 80105e6:	4b20      	ldr	r3, [pc, #128]	; (8010668 <shci_user_evt_proc+0x94>)
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d027      	beq.n	801063e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80105ee:	f107 030c 	add.w	r3, r7, #12
 80105f2:	4619      	mov	r1, r3
 80105f4:	481b      	ldr	r0, [pc, #108]	; (8010664 <shci_user_evt_proc+0x90>)
 80105f6:	f000 fc18 	bl	8010e2a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80105fa:	4b1c      	ldr	r3, [pc, #112]	; (801066c <shci_user_evt_proc+0x98>)
 80105fc:	69db      	ldr	r3, [r3, #28]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d00c      	beq.n	801061c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8010606:	2301      	movs	r3, #1
 8010608:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801060a:	4b18      	ldr	r3, [pc, #96]	; (801066c <shci_user_evt_proc+0x98>)
 801060c:	69db      	ldr	r3, [r3, #28]
 801060e:	1d3a      	adds	r2, r7, #4
 8010610:	4610      	mov	r0, r2
 8010612:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8010614:	793a      	ldrb	r2, [r7, #4]
 8010616:	4b14      	ldr	r3, [pc, #80]	; (8010668 <shci_user_evt_proc+0x94>)
 8010618:	701a      	strb	r2, [r3, #0]
 801061a:	e002      	b.n	8010622 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801061c:	4b12      	ldr	r3, [pc, #72]	; (8010668 <shci_user_evt_proc+0x94>)
 801061e:	2201      	movs	r2, #1
 8010620:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8010622:	4b11      	ldr	r3, [pc, #68]	; (8010668 <shci_user_evt_proc+0x94>)
 8010624:	781b      	ldrb	r3, [r3, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d004      	beq.n	8010634 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	4618      	mov	r0, r3
 801062e:	f000 fa71 	bl	8010b14 <TL_MM_EvtDone>
 8010632:	e004      	b.n	801063e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	4619      	mov	r1, r3
 8010638:	480a      	ldr	r0, [pc, #40]	; (8010664 <shci_user_evt_proc+0x90>)
 801063a:	f000 fb89 	bl	8010d50 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801063e:	4809      	ldr	r0, [pc, #36]	; (8010664 <shci_user_evt_proc+0x90>)
 8010640:	f000 fb64 	bl	8010d0c <LST_is_empty>
 8010644:	4603      	mov	r3, r0
 8010646:	2b00      	cmp	r3, #0
 8010648:	d107      	bne.n	801065a <shci_user_evt_proc+0x86>
 801064a:	4b07      	ldr	r3, [pc, #28]	; (8010668 <shci_user_evt_proc+0x94>)
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d003      	beq.n	801065a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8010652:	4804      	ldr	r0, [pc, #16]	; (8010664 <shci_user_evt_proc+0x90>)
 8010654:	f7f2 face 	bl	8002bf4 <shci_notify_asynch_evt>
  }


  return;
 8010658:	bf00      	nop
 801065a:	bf00      	nop
}
 801065c:	3710      	adds	r7, #16
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop
 8010664:	200001b8 	.word	0x200001b8
 8010668:	200001c8 	.word	0x200001c8
 801066c:	2000110c 	.word	0x2000110c

08010670 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b084      	sub	sp, #16
 8010674:	af00      	add	r7, sp, #0
 8010676:	60ba      	str	r2, [r7, #8]
 8010678:	607b      	str	r3, [r7, #4]
 801067a:	4603      	mov	r3, r0
 801067c:	81fb      	strh	r3, [r7, #14]
 801067e:	460b      	mov	r3, r1
 8010680:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8010682:	2000      	movs	r0, #0
 8010684:	f000 f868 	bl	8010758 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8010688:	4b17      	ldr	r3, [pc, #92]	; (80106e8 <shci_send+0x78>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	89fa      	ldrh	r2, [r7, #14]
 801068e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8010692:	4b15      	ldr	r3, [pc, #84]	; (80106e8 <shci_send+0x78>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	7b7a      	ldrb	r2, [r7, #13]
 8010698:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801069a:	4b13      	ldr	r3, [pc, #76]	; (80106e8 <shci_send+0x78>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	330c      	adds	r3, #12
 80106a0:	7b7a      	ldrb	r2, [r7, #13]
 80106a2:	68b9      	ldr	r1, [r7, #8]
 80106a4:	4618      	mov	r0, r3
 80106a6:	f002 fd0d 	bl	80130c4 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80106aa:	4b10      	ldr	r3, [pc, #64]	; (80106ec <shci_send+0x7c>)
 80106ac:	2201      	movs	r2, #1
 80106ae:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80106b0:	4b0f      	ldr	r3, [pc, #60]	; (80106f0 <shci_send+0x80>)
 80106b2:	691b      	ldr	r3, [r3, #16]
 80106b4:	2100      	movs	r1, #0
 80106b6:	2000      	movs	r0, #0
 80106b8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80106ba:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80106be:	f7f2 fab0 	bl	8002c22 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f103 0008 	add.w	r0, r3, #8
 80106c8:	4b07      	ldr	r3, [pc, #28]	; (80106e8 <shci_send+0x78>)
 80106ca:	6819      	ldr	r1, [r3, #0]
 80106cc:	4b06      	ldr	r3, [pc, #24]	; (80106e8 <shci_send+0x78>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	789b      	ldrb	r3, [r3, #2]
 80106d2:	3303      	adds	r3, #3
 80106d4:	461a      	mov	r2, r3
 80106d6:	f002 fcf5 	bl	80130c4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80106da:	2001      	movs	r0, #1
 80106dc:	f000 f83c 	bl	8010758 <Cmd_SetStatus>

  return;
 80106e0:	bf00      	nop
}
 80106e2:	3710      	adds	r7, #16
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}
 80106e8:	200001c4 	.word	0x200001c4
 80106ec:	20001130 	.word	0x20001130
 80106f0:	2000110c 	.word	0x2000110c

080106f4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b086      	sub	sp, #24
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80106fc:	4a10      	ldr	r2, [pc, #64]	; (8010740 <TlInit+0x4c>)
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8010702:	4810      	ldr	r0, [pc, #64]	; (8010744 <TlInit+0x50>)
 8010704:	f000 faf2 	bl	8010cec <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8010708:	2001      	movs	r0, #1
 801070a:	f000 f825 	bl	8010758 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801070e:	4b0e      	ldr	r3, [pc, #56]	; (8010748 <TlInit+0x54>)
 8010710:	2201      	movs	r2, #1
 8010712:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8010714:	4b0d      	ldr	r3, [pc, #52]	; (801074c <TlInit+0x58>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d00c      	beq.n	8010736 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8010720:	4b0b      	ldr	r3, [pc, #44]	; (8010750 <TlInit+0x5c>)
 8010722:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8010724:	4b0b      	ldr	r3, [pc, #44]	; (8010754 <TlInit+0x60>)
 8010726:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8010728:	4b08      	ldr	r3, [pc, #32]	; (801074c <TlInit+0x58>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	f107 020c 	add.w	r2, r7, #12
 8010730:	4610      	mov	r0, r2
 8010732:	4798      	blx	r3
  }

  return;
 8010734:	bf00      	nop
 8010736:	bf00      	nop
}
 8010738:	3718      	adds	r7, #24
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	200001c4 	.word	0x200001c4
 8010744:	200001b8 	.word	0x200001b8
 8010748:	200001c8 	.word	0x200001c8
 801074c:	2000110c 	.word	0x2000110c
 8010750:	080107a9 	.word	0x080107a9
 8010754:	080107c1 	.word	0x080107c1

08010758 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	4603      	mov	r3, r0
 8010760:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8010762:	79fb      	ldrb	r3, [r7, #7]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d10b      	bne.n	8010780 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8010768:	4b0d      	ldr	r3, [pc, #52]	; (80107a0 <Cmd_SetStatus+0x48>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d003      	beq.n	8010778 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8010770:	4b0b      	ldr	r3, [pc, #44]	; (80107a0 <Cmd_SetStatus+0x48>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	2000      	movs	r0, #0
 8010776:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8010778:	4b0a      	ldr	r3, [pc, #40]	; (80107a4 <Cmd_SetStatus+0x4c>)
 801077a:	2200      	movs	r2, #0
 801077c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 801077e:	e00b      	b.n	8010798 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8010780:	4b08      	ldr	r3, [pc, #32]	; (80107a4 <Cmd_SetStatus+0x4c>)
 8010782:	2201      	movs	r2, #1
 8010784:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8010786:	4b06      	ldr	r3, [pc, #24]	; (80107a0 <Cmd_SetStatus+0x48>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d004      	beq.n	8010798 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 801078e:	4b04      	ldr	r3, [pc, #16]	; (80107a0 <Cmd_SetStatus+0x48>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	2001      	movs	r0, #1
 8010794:	4798      	blx	r3
  return;
 8010796:	bf00      	nop
 8010798:	bf00      	nop
}
 801079a:	3708      	adds	r7, #8
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	2000112c 	.word	0x2000112c
 80107a4:	200001c0 	.word	0x200001c0

080107a8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80107b0:	2000      	movs	r0, #0
 80107b2:	f7f2 fa2b 	bl	8002c0c <shci_cmd_resp_release>

  return;
 80107b6:	bf00      	nop
}
 80107b8:	3708      	adds	r7, #8
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
	...

080107c0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80107c8:	6879      	ldr	r1, [r7, #4]
 80107ca:	4805      	ldr	r0, [pc, #20]	; (80107e0 <TlUserEvtReceived+0x20>)
 80107cc:	f000 fae6 	bl	8010d9c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80107d0:	4803      	ldr	r0, [pc, #12]	; (80107e0 <TlUserEvtReceived+0x20>)
 80107d2:	f7f2 fa0f 	bl	8002bf4 <shci_notify_asynch_evt>

  return;
 80107d6:	bf00      	nop
}
 80107d8:	3708      	adds	r7, #8
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
 80107de:	bf00      	nop
 80107e0:	200001b8 	.word	0x200001b8

080107e4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	4a05      	ldr	r2, [pc, #20]	; (8010804 <shci_register_io_bus+0x20>)
 80107f0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	4a04      	ldr	r2, [pc, #16]	; (8010808 <shci_register_io_bus+0x24>)
 80107f6:	611a      	str	r2, [r3, #16]

  return;
 80107f8:	bf00      	nop
}
 80107fa:	370c      	adds	r7, #12
 80107fc:	46bd      	mov	sp, r7
 80107fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010802:	4770      	bx	lr
 8010804:	080109a1 	.word	0x080109a1
 8010808:	080109f5 	.word	0x080109f5

0801080c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 801080c:	b580      	push	{r7, lr}
 801080e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8010810:	f001 fb7a 	bl	8011f08 <HW_IPCC_Enable>

  return;
 8010814:	bf00      	nop
}
 8010816:	bd80      	pop	{r7, pc}

08010818 <TL_Init>:


void TL_Init( void )
{
 8010818:	b580      	push	{r7, lr}
 801081a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 801081c:	4b10      	ldr	r3, [pc, #64]	; (8010860 <TL_Init+0x48>)
 801081e:	4a11      	ldr	r2, [pc, #68]	; (8010864 <TL_Init+0x4c>)
 8010820:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8010822:	4b0f      	ldr	r3, [pc, #60]	; (8010860 <TL_Init+0x48>)
 8010824:	4a10      	ldr	r2, [pc, #64]	; (8010868 <TL_Init+0x50>)
 8010826:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8010828:	4b0d      	ldr	r3, [pc, #52]	; (8010860 <TL_Init+0x48>)
 801082a:	4a10      	ldr	r2, [pc, #64]	; (801086c <TL_Init+0x54>)
 801082c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 801082e:	4b0c      	ldr	r3, [pc, #48]	; (8010860 <TL_Init+0x48>)
 8010830:	4a0f      	ldr	r2, [pc, #60]	; (8010870 <TL_Init+0x58>)
 8010832:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8010834:	4b0a      	ldr	r3, [pc, #40]	; (8010860 <TL_Init+0x48>)
 8010836:	4a0f      	ldr	r2, [pc, #60]	; (8010874 <TL_Init+0x5c>)
 8010838:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 801083a:	4b09      	ldr	r3, [pc, #36]	; (8010860 <TL_Init+0x48>)
 801083c:	4a0e      	ldr	r2, [pc, #56]	; (8010878 <TL_Init+0x60>)
 801083e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8010840:	4b07      	ldr	r3, [pc, #28]	; (8010860 <TL_Init+0x48>)
 8010842:	4a0e      	ldr	r2, [pc, #56]	; (801087c <TL_Init+0x64>)
 8010844:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8010846:	4b06      	ldr	r3, [pc, #24]	; (8010860 <TL_Init+0x48>)
 8010848:	4a0d      	ldr	r2, [pc, #52]	; (8010880 <TL_Init+0x68>)
 801084a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 801084c:	4b04      	ldr	r3, [pc, #16]	; (8010860 <TL_Init+0x48>)
 801084e:	4a0d      	ldr	r2, [pc, #52]	; (8010884 <TL_Init+0x6c>)
 8010850:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8010852:	4b03      	ldr	r3, [pc, #12]	; (8010860 <TL_Init+0x48>)
 8010854:	4a0c      	ldr	r2, [pc, #48]	; (8010888 <TL_Init+0x70>)
 8010856:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8010858:	f001 fb6a 	bl	8011f30 <HW_IPCC_Init>

  return;
 801085c:	bf00      	nop
}
 801085e:	bd80      	pop	{r7, pc}
 8010860:	20030000 	.word	0x20030000
 8010864:	20030028 	.word	0x20030028
 8010868:	20030048 	.word	0x20030048
 801086c:	20030058 	.word	0x20030058
 8010870:	20030068 	.word	0x20030068
 8010874:	20030070 	.word	0x20030070
 8010878:	20030078 	.word	0x20030078
 801087c:	20030080 	.word	0x20030080
 8010880:	2003009c 	.word	0x2003009c
 8010884:	200300a0 	.word	0x200300a0
 8010888:	200300ac 	.word	0x200300ac

0801088c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8010898:	4811      	ldr	r0, [pc, #68]	; (80108e0 <TL_BLE_Init+0x54>)
 801089a:	f000 fa27 	bl	8010cec <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 801089e:	4b11      	ldr	r3, [pc, #68]	; (80108e4 <TL_BLE_Init+0x58>)
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	689a      	ldr	r2, [r3, #8]
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	68da      	ldr	r2, [r3, #12]
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	4a0c      	ldr	r2, [pc, #48]	; (80108e8 <TL_BLE_Init+0x5c>)
 80108b8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	4a08      	ldr	r2, [pc, #32]	; (80108e0 <TL_BLE_Init+0x54>)
 80108be:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80108c0:	f001 fb4c 	bl	8011f5c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	4a08      	ldr	r2, [pc, #32]	; (80108ec <TL_BLE_Init+0x60>)
 80108ca:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	4a07      	ldr	r2, [pc, #28]	; (80108f0 <TL_BLE_Init+0x64>)
 80108d2:	6013      	str	r3, [r2, #0]

  return 0;
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	200300c8 	.word	0x200300c8
 80108e4:	20030000 	.word	0x20030000
 80108e8:	20030a58 	.word	0x20030a58
 80108ec:	2000113c 	.word	0x2000113c
 80108f0:	20001140 	.word	0x20001140

080108f4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	460b      	mov	r3, r1
 80108fe:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8010900:	4b09      	ldr	r3, [pc, #36]	; (8010928 <TL_BLE_SendCmd+0x34>)
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	2201      	movs	r2, #1
 8010908:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 801090a:	4b07      	ldr	r3, [pc, #28]	; (8010928 <TL_BLE_SendCmd+0x34>)
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4619      	mov	r1, r3
 8010912:	2001      	movs	r0, #1
 8010914:	f000 f96c 	bl	8010bf0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8010918:	f001 fb2a 	bl	8011f70 <HW_IPCC_BLE_SendCmd>

  return 0;
 801091c:	2300      	movs	r3, #0
}
 801091e:	4618      	mov	r0, r3
 8010920:	3708      	adds	r7, #8
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop
 8010928:	20030000 	.word	0x20030000

0801092c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b082      	sub	sp, #8
 8010930:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8010932:	e01c      	b.n	801096e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8010934:	1d3b      	adds	r3, r7, #4
 8010936:	4619      	mov	r1, r3
 8010938:	4812      	ldr	r0, [pc, #72]	; (8010984 <HW_IPCC_BLE_RxEvtNot+0x58>)
 801093a:	f000 fa76 	bl	8010e2a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	7a5b      	ldrb	r3, [r3, #9]
 8010942:	2b0f      	cmp	r3, #15
 8010944:	d003      	beq.n	801094e <HW_IPCC_BLE_RxEvtNot+0x22>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	7a5b      	ldrb	r3, [r3, #9]
 801094a:	2b0e      	cmp	r3, #14
 801094c:	d105      	bne.n	801095a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	4619      	mov	r1, r3
 8010952:	2002      	movs	r0, #2
 8010954:	f000 f94c 	bl	8010bf0 <OutputDbgTrace>
 8010958:	e004      	b.n	8010964 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	4619      	mov	r1, r3
 801095e:	2003      	movs	r0, #3
 8010960:	f000 f946 	bl	8010bf0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8010964:	4b08      	ldr	r3, [pc, #32]	; (8010988 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	687a      	ldr	r2, [r7, #4]
 801096a:	4610      	mov	r0, r2
 801096c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 801096e:	4805      	ldr	r0, [pc, #20]	; (8010984 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8010970:	f000 f9cc 	bl	8010d0c <LST_is_empty>
 8010974:	4603      	mov	r3, r0
 8010976:	2b00      	cmp	r3, #0
 8010978:	d0dc      	beq.n	8010934 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 801097a:	bf00      	nop
}
 801097c:	3708      	adds	r7, #8
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	200300c8 	.word	0x200300c8
 8010988:	2000113c 	.word	0x2000113c

0801098c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8010990:	4b02      	ldr	r3, [pc, #8]	; (801099c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	4798      	blx	r3

  return;
 8010996:	bf00      	nop
}
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	20001140 	.word	0x20001140

080109a0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b084      	sub	sp, #16
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80109ac:	480d      	ldr	r0, [pc, #52]	; (80109e4 <TL_SYS_Init+0x44>)
 80109ae:	f000 f99d 	bl	8010cec <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80109b2:	4b0d      	ldr	r3, [pc, #52]	; (80109e8 <TL_SYS_Init+0x48>)
 80109b4:	68db      	ldr	r3, [r3, #12]
 80109b6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	689a      	ldr	r2, [r3, #8]
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	4a08      	ldr	r2, [pc, #32]	; (80109e4 <TL_SYS_Init+0x44>)
 80109c4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80109c6:	f001 faf5 	bl	8011fb4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	4a07      	ldr	r2, [pc, #28]	; (80109ec <TL_SYS_Init+0x4c>)
 80109d0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	4a06      	ldr	r2, [pc, #24]	; (80109f0 <TL_SYS_Init+0x50>)
 80109d8:	6013      	str	r3, [r2, #0]

  return 0;
 80109da:	2300      	movs	r3, #0
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3710      	adds	r7, #16
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	200300d0 	.word	0x200300d0
 80109e8:	20030000 	.word	0x20030000
 80109ec:	20001144 	.word	0x20001144
 80109f0:	20001148 	.word	0x20001148

080109f4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	460b      	mov	r3, r1
 80109fe:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8010a00:	4b09      	ldr	r3, [pc, #36]	; (8010a28 <TL_SYS_SendCmd+0x34>)
 8010a02:	68db      	ldr	r3, [r3, #12]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	2210      	movs	r2, #16
 8010a08:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8010a0a:	4b07      	ldr	r3, [pc, #28]	; (8010a28 <TL_SYS_SendCmd+0x34>)
 8010a0c:	68db      	ldr	r3, [r3, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	4619      	mov	r1, r3
 8010a12:	2004      	movs	r0, #4
 8010a14:	f000 f8ec 	bl	8010bf0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8010a18:	f001 fad6 	bl	8011fc8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8010a1c:	2300      	movs	r3, #0
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3708      	adds	r7, #8
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop
 8010a28:	20030000 	.word	0x20030000

08010a2c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010a30:	4b07      	ldr	r3, [pc, #28]	; (8010a50 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010a32:	68db      	ldr	r3, [r3, #12]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4619      	mov	r1, r3
 8010a38:	2005      	movs	r0, #5
 8010a3a:	f000 f8d9 	bl	8010bf0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010a3e:	4b05      	ldr	r3, [pc, #20]	; (8010a54 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	4a03      	ldr	r2, [pc, #12]	; (8010a50 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010a44:	68d2      	ldr	r2, [r2, #12]
 8010a46:	6812      	ldr	r2, [r2, #0]
 8010a48:	4610      	mov	r0, r2
 8010a4a:	4798      	blx	r3

  return;
 8010a4c:	bf00      	nop
}
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	20030000 	.word	0x20030000
 8010a54:	20001144 	.word	0x20001144

08010a58 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010a5e:	e00e      	b.n	8010a7e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8010a60:	1d3b      	adds	r3, r7, #4
 8010a62:	4619      	mov	r1, r3
 8010a64:	480b      	ldr	r0, [pc, #44]	; (8010a94 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010a66:	f000 f9e0 	bl	8010e2a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	2006      	movs	r0, #6
 8010a70:	f000 f8be 	bl	8010bf0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8010a74:	4b08      	ldr	r3, [pc, #32]	; (8010a98 <HW_IPCC_SYS_EvtNot+0x40>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	687a      	ldr	r2, [r7, #4]
 8010a7a:	4610      	mov	r0, r2
 8010a7c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010a7e:	4805      	ldr	r0, [pc, #20]	; (8010a94 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010a80:	f000 f944 	bl	8010d0c <LST_is_empty>
 8010a84:	4603      	mov	r3, r0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d0ea      	beq.n	8010a60 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8010a8a:	bf00      	nop
}
 8010a8c:	3708      	adds	r7, #8
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}
 8010a92:	bf00      	nop
 8010a94:	200300d0 	.word	0x200300d0
 8010a98:	20001148 	.word	0x20001148

08010a9c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8010aa4:	4817      	ldr	r0, [pc, #92]	; (8010b04 <TL_MM_Init+0x68>)
 8010aa6:	f000 f921 	bl	8010cec <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8010aaa:	4817      	ldr	r0, [pc, #92]	; (8010b08 <TL_MM_Init+0x6c>)
 8010aac:	f000 f91e 	bl	8010cec <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8010ab0:	4b16      	ldr	r3, [pc, #88]	; (8010b0c <TL_MM_Init+0x70>)
 8010ab2:	691b      	ldr	r3, [r3, #16]
 8010ab4:	4a16      	ldr	r2, [pc, #88]	; (8010b10 <TL_MM_Init+0x74>)
 8010ab6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8010ab8:	4b15      	ldr	r3, [pc, #84]	; (8010b10 <TL_MM_Init+0x74>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	6892      	ldr	r2, [r2, #8]
 8010ac0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8010ac2:	4b13      	ldr	r3, [pc, #76]	; (8010b10 <TL_MM_Init+0x74>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	68d2      	ldr	r2, [r2, #12]
 8010aca:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8010acc:	4b10      	ldr	r3, [pc, #64]	; (8010b10 <TL_MM_Init+0x74>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4a0c      	ldr	r2, [pc, #48]	; (8010b04 <TL_MM_Init+0x68>)
 8010ad2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8010ad4:	4b0e      	ldr	r3, [pc, #56]	; (8010b10 <TL_MM_Init+0x74>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	6812      	ldr	r2, [r2, #0]
 8010adc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8010ade:	4b0c      	ldr	r3, [pc, #48]	; (8010b10 <TL_MM_Init+0x74>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	687a      	ldr	r2, [r7, #4]
 8010ae4:	6852      	ldr	r2, [r2, #4]
 8010ae6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8010ae8:	4b09      	ldr	r3, [pc, #36]	; (8010b10 <TL_MM_Init+0x74>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	687a      	ldr	r2, [r7, #4]
 8010aee:	6912      	ldr	r2, [r2, #16]
 8010af0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8010af2:	4b07      	ldr	r3, [pc, #28]	; (8010b10 <TL_MM_Init+0x74>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	6952      	ldr	r2, [r2, #20]
 8010afa:	619a      	str	r2, [r3, #24]

  return;
 8010afc:	bf00      	nop
}
 8010afe:	3708      	adds	r7, #8
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}
 8010b04:	200300b8 	.word	0x200300b8
 8010b08:	20001134 	.word	0x20001134
 8010b0c:	20030000 	.word	0x20030000
 8010b10:	2000114c 	.word	0x2000114c

08010b14 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8010b1c:	6879      	ldr	r1, [r7, #4]
 8010b1e:	4807      	ldr	r0, [pc, #28]	; (8010b3c <TL_MM_EvtDone+0x28>)
 8010b20:	f000 f93c 	bl	8010d9c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8010b24:	6879      	ldr	r1, [r7, #4]
 8010b26:	2000      	movs	r0, #0
 8010b28:	f000 f862 	bl	8010bf0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8010b2c:	4804      	ldr	r0, [pc, #16]	; (8010b40 <TL_MM_EvtDone+0x2c>)
 8010b2e:	f001 fa71 	bl	8012014 <HW_IPCC_MM_SendFreeBuf>

  return;
 8010b32:	bf00      	nop
}
 8010b34:	3708      	adds	r7, #8
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	20001134 	.word	0x20001134
 8010b40:	08010b45 	.word	0x08010b45

08010b44 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010b4a:	e00c      	b.n	8010b66 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8010b4c:	1d3b      	adds	r3, r7, #4
 8010b4e:	4619      	mov	r1, r3
 8010b50:	480a      	ldr	r0, [pc, #40]	; (8010b7c <SendFreeBuf+0x38>)
 8010b52:	f000 f96a 	bl	8010e2a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8010b56:	4b0a      	ldr	r3, [pc, #40]	; (8010b80 <SendFreeBuf+0x3c>)
 8010b58:	691b      	ldr	r3, [r3, #16]
 8010b5a:	691b      	ldr	r3, [r3, #16]
 8010b5c:	687a      	ldr	r2, [r7, #4]
 8010b5e:	4611      	mov	r1, r2
 8010b60:	4618      	mov	r0, r3
 8010b62:	f000 f91b 	bl	8010d9c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010b66:	4805      	ldr	r0, [pc, #20]	; (8010b7c <SendFreeBuf+0x38>)
 8010b68:	f000 f8d0 	bl	8010d0c <LST_is_empty>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d0ec      	beq.n	8010b4c <SendFreeBuf+0x8>
  }

  return;
 8010b72:	bf00      	nop
}
 8010b74:	3708      	adds	r7, #8
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}
 8010b7a:	bf00      	nop
 8010b7c:	20001134 	.word	0x20001134
 8010b80:	20030000 	.word	0x20030000

08010b84 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8010b88:	4805      	ldr	r0, [pc, #20]	; (8010ba0 <TL_TRACES_Init+0x1c>)
 8010b8a:	f000 f8af 	bl	8010cec <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8010b8e:	4b05      	ldr	r3, [pc, #20]	; (8010ba4 <TL_TRACES_Init+0x20>)
 8010b90:	695b      	ldr	r3, [r3, #20]
 8010b92:	4a03      	ldr	r2, [pc, #12]	; (8010ba0 <TL_TRACES_Init+0x1c>)
 8010b94:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8010b96:	f001 fa73 	bl	8012080 <HW_IPCC_TRACES_Init>

  return;
 8010b9a:	bf00      	nop
}
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	200300c0 	.word	0x200300c0
 8010ba4:	20030000 	.word	0x20030000

08010ba8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b082      	sub	sp, #8
 8010bac:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010bae:	e008      	b.n	8010bc2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8010bb0:	1d3b      	adds	r3, r7, #4
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	4808      	ldr	r0, [pc, #32]	; (8010bd8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8010bb6:	f000 f938 	bl	8010e2a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f000 f80d 	bl	8010bdc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010bc2:	4805      	ldr	r0, [pc, #20]	; (8010bd8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8010bc4:	f000 f8a2 	bl	8010d0c <LST_is_empty>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d0f0      	beq.n	8010bb0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8010bce:	bf00      	nop
}
 8010bd0:	3708      	adds	r7, #8
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	200300c0 	.word	0x200300c0

08010bdc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8010bdc:	b480      	push	{r7}
 8010bde:	b083      	sub	sp, #12
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8010be4:	bf00      	nop
 8010be6:	370c      	adds	r7, #12
 8010be8:	46bd      	mov	sp, r7
 8010bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bee:	4770      	bx	lr

08010bf0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b085      	sub	sp, #20
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	6039      	str	r1, [r7, #0]
 8010bfa:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8010bfc:	79fb      	ldrb	r3, [r7, #7]
 8010bfe:	2b06      	cmp	r3, #6
 8010c00:	d845      	bhi.n	8010c8e <OutputDbgTrace+0x9e>
 8010c02:	a201      	add	r2, pc, #4	; (adr r2, 8010c08 <OutputDbgTrace+0x18>)
 8010c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c08:	08010c25 	.word	0x08010c25
 8010c0c:	08010c49 	.word	0x08010c49
 8010c10:	08010c4f 	.word	0x08010c4f
 8010c14:	08010c63 	.word	0x08010c63
 8010c18:	08010c6f 	.word	0x08010c6f
 8010c1c:	08010c75 	.word	0x08010c75
 8010c20:	08010c83 	.word	0x08010c83
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	7a5b      	ldrb	r3, [r3, #9]
 8010c2c:	2bff      	cmp	r3, #255	; 0xff
 8010c2e:	d005      	beq.n	8010c3c <OutputDbgTrace+0x4c>
 8010c30:	2bff      	cmp	r3, #255	; 0xff
 8010c32:	dc05      	bgt.n	8010c40 <OutputDbgTrace+0x50>
 8010c34:	2b0e      	cmp	r3, #14
 8010c36:	d005      	beq.n	8010c44 <OutputDbgTrace+0x54>
 8010c38:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8010c3a:	e001      	b.n	8010c40 <OutputDbgTrace+0x50>
          break;
 8010c3c:	bf00      	nop
 8010c3e:	e027      	b.n	8010c90 <OutputDbgTrace+0xa0>
          break;
 8010c40:	bf00      	nop
 8010c42:	e025      	b.n	8010c90 <OutputDbgTrace+0xa0>
          break;
 8010c44:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8010c46:	e023      	b.n	8010c90 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010c4c:	e020      	b.n	8010c90 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	7a5b      	ldrb	r3, [r3, #9]
 8010c56:	2b0e      	cmp	r3, #14
 8010c58:	d001      	beq.n	8010c5e <OutputDbgTrace+0x6e>
 8010c5a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010c5c:	e000      	b.n	8010c60 <OutputDbgTrace+0x70>
          break;
 8010c5e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010c60:	e016      	b.n	8010c90 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	7a5b      	ldrb	r3, [r3, #9]
 8010c6a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010c6c:	e010      	b.n	8010c90 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010c72:	e00d      	b.n	8010c90 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	7a5b      	ldrb	r3, [r3, #9]
 8010c7c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010c7e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010c80:	e006      	b.n	8010c90 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	7a5b      	ldrb	r3, [r3, #9]
 8010c8a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010c8c:	e000      	b.n	8010c90 <OutputDbgTrace+0xa0>

    default:
      break;
 8010c8e:	bf00      	nop
  }

  return;
 8010c90:	bf00      	nop
}
 8010c92:	3714      	adds	r7, #20
 8010c94:	46bd      	mov	sp, r7
 8010c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9a:	4770      	bx	lr

08010c9c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b085      	sub	sp, #20
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8010ca6:	4b0f      	ldr	r3, [pc, #60]	; (8010ce4 <OTP_Read+0x48>)
 8010ca8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010caa:	e002      	b.n	8010cb2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	3b08      	subs	r3, #8
 8010cb0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	3307      	adds	r3, #7
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	79fa      	ldrb	r2, [r7, #7]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d003      	beq.n	8010cc6 <OTP_Read+0x2a>
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	4a09      	ldr	r2, [pc, #36]	; (8010ce8 <OTP_Read+0x4c>)
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d1f2      	bne.n	8010cac <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	3307      	adds	r3, #7
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	79fa      	ldrb	r2, [r7, #7]
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d001      	beq.n	8010cd6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3714      	adds	r7, #20
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce2:	4770      	bx	lr
 8010ce4:	1fff73f8 	.word	0x1fff73f8
 8010ce8:	1fff7000 	.word	0x1fff7000

08010cec <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b083      	sub	sp, #12
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	687a      	ldr	r2, [r7, #4]
 8010cfe:	605a      	str	r2, [r3, #4]
}
 8010d00:	bf00      	nop
 8010d02:	370c      	adds	r7, #12
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr

08010d0c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b087      	sub	sp, #28
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d14:	f3ef 8310 	mrs	r3, PRIMASK
 8010d18:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010d1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010d1e:	b672      	cpsid	i
}
 8010d20:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	687a      	ldr	r2, [r7, #4]
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d102      	bne.n	8010d32 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	75fb      	strb	r3, [r7, #23]
 8010d30:	e001      	b.n	8010d36 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8010d32:	2300      	movs	r3, #0
 8010d34:	75fb      	strb	r3, [r7, #23]
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	f383 8810 	msr	PRIMASK, r3
}
 8010d40:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8010d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	371c      	adds	r7, #28
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr

08010d50 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8010d50:	b480      	push	{r7}
 8010d52:	b087      	sub	sp, #28
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8010d5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d60:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010d62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010d64:	b672      	cpsid	i
}
 8010d66:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	687a      	ldr	r2, [r7, #4]
 8010d74:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	683a      	ldr	r2, [r7, #0]
 8010d7a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	683a      	ldr	r2, [r7, #0]
 8010d82:	605a      	str	r2, [r3, #4]
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	f383 8810 	msr	PRIMASK, r3
}
 8010d8e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010d90:	bf00      	nop
 8010d92:	371c      	adds	r7, #28
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr

08010d9c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b087      	sub	sp, #28
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
 8010da4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010da6:	f3ef 8310 	mrs	r3, PRIMASK
 8010daa:	60fb      	str	r3, [r7, #12]
  return(result);
 8010dac:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010dae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010db0:	b672      	cpsid	i
}
 8010db2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	687a      	ldr	r2, [r7, #4]
 8010db8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	685a      	ldr	r2, [r3, #4]
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	683a      	ldr	r2, [r7, #0]
 8010dc6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	685b      	ldr	r3, [r3, #4]
 8010dcc:	683a      	ldr	r2, [r7, #0]
 8010dce:	601a      	str	r2, [r3, #0]
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	f383 8810 	msr	PRIMASK, r3
}
 8010dda:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010ddc:	bf00      	nop
 8010dde:	371c      	adds	r7, #28
 8010de0:	46bd      	mov	sp, r7
 8010de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de6:	4770      	bx	lr

08010de8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b087      	sub	sp, #28
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010df0:	f3ef 8310 	mrs	r3, PRIMASK
 8010df4:	60fb      	str	r3, [r7, #12]
  return(result);
 8010df6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010df8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010dfa:	b672      	cpsid	i
}
 8010dfc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	685b      	ldr	r3, [r3, #4]
 8010e02:	687a      	ldr	r2, [r7, #4]
 8010e04:	6812      	ldr	r2, [r2, #0]
 8010e06:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	687a      	ldr	r2, [r7, #4]
 8010e0e:	6852      	ldr	r2, [r2, #4]
 8010e10:	605a      	str	r2, [r3, #4]
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	f383 8810 	msr	PRIMASK, r3
}
 8010e1c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010e1e:	bf00      	nop
 8010e20:	371c      	adds	r7, #28
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr

08010e2a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8010e2a:	b580      	push	{r7, lr}
 8010e2c:	b086      	sub	sp, #24
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	6078      	str	r0, [r7, #4]
 8010e32:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e34:	f3ef 8310 	mrs	r3, PRIMASK
 8010e38:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e3a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010e3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e3e:	b672      	cpsid	i
}
 8010e40:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681a      	ldr	r2, [r3, #0]
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7ff ffca 	bl	8010de8 <LST_remove_node>
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	f383 8810 	msr	PRIMASK, r3
}
 8010e5e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010e60:	bf00      	nop
 8010e62:	3718      	adds	r7, #24
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8010e6c:	4b03      	ldr	r3, [pc, #12]	; (8010e7c <LL_FLASH_GetUDN+0x14>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	46bd      	mov	sp, r7
 8010e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e78:	4770      	bx	lr
 8010e7a:	bf00      	nop
 8010e7c:	1fff7580 	.word	0x1fff7580

08010e80 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8010e80:	b480      	push	{r7}
 8010e82:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8010e84:	4b03      	ldr	r3, [pc, #12]	; (8010e94 <LL_FLASH_GetDeviceID+0x14>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	b2db      	uxtb	r3, r3
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr
 8010e94:	1fff7584 	.word	0x1fff7584

08010e98 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8010e9c:	4b03      	ldr	r3, [pc, #12]	; (8010eac <LL_FLASH_GetSTCompanyID+0x14>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	0a1b      	lsrs	r3, r3, #8
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eaa:	4770      	bx	lr
 8010eac:	1fff7584 	.word	0x1fff7584

08010eb0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8010eb0:	b5b0      	push	{r4, r5, r7, lr}
 8010eb2:	b090      	sub	sp, #64	; 0x40
 8010eb4:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010eb6:	2392      	movs	r3, #146	; 0x92
 8010eb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8010ebc:	4b25      	ldr	r3, [pc, #148]	; (8010f54 <APP_BLE_Init+0xa4>)
 8010ebe:	1d3c      	adds	r4, r7, #4
 8010ec0:	461d      	mov	r5, r3
 8010ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ece:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010ed2:	c403      	stmia	r4!, {r0, r1}
 8010ed4:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8010ed6:	f000 f905 	bl	80110e4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8010eda:	2101      	movs	r1, #1
 8010edc:	2002      	movs	r0, #2
 8010ede:	f001 fe57 	bl	8012b90 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8010ee2:	4a1d      	ldr	r2, [pc, #116]	; (8010f58 <APP_BLE_Init+0xa8>)
 8010ee4:	2100      	movs	r1, #0
 8010ee6:	2002      	movs	r0, #2
 8010ee8:	f001 ff7e 	bl	8012de8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8010eec:	1d3b      	adds	r3, r7, #4
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7ff f8c6 	bl	8010080 <SHCI_C2_BLE_Init>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8010efa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d001      	beq.n	8010f06 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8010f02:	f7f2 ffe9 	bl	8003ed8 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8010f06:	f000 f903 	bl	8011110 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8010f0a:	f7ff f813 	bl	800ff34 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010f0e:	4b13      	ldr	r3, [pc, #76]	; (8010f5c <APP_BLE_Init+0xac>)
 8010f10:	2200      	movs	r2, #0
 8010f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8010f16:	4b11      	ldr	r3, [pc, #68]	; (8010f5c <APP_BLE_Init+0xac>)
 8010f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f1c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8010f1e:	4a10      	ldr	r2, [pc, #64]	; (8010f60 <APP_BLE_Init+0xb0>)
 8010f20:	2100      	movs	r1, #0
 8010f22:	2001      	movs	r0, #1
 8010f24:	f001 ff60 	bl	8012de8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8010f28:	2006      	movs	r0, #6
 8010f2a:	f7fe fe76 	bl	800fc1a <aci_hal_set_radio_activity_mask>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8010f34:	f000 fac4 	bl	80114c0 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8010f38:	4b08      	ldr	r3, [pc, #32]	; (8010f5c <APP_BLE_Init+0xac>)
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8010f3e:	4b07      	ldr	r3, [pc, #28]	; (8010f5c <APP_BLE_Init+0xac>)
 8010f40:	2200      	movs	r2, #0
 8010f42:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8010f44:	2001      	movs	r0, #1
 8010f46:	f000 f997 	bl	8011278 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8010f4a:	bf00      	nop
}
 8010f4c:	3740      	adds	r7, #64	; 0x40
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bdb0      	pop	{r4, r5, r7, pc}
 8010f52:	bf00      	nop
 8010f54:	08014268 	.word	0x08014268
 8010f58:	0801029d 	.word	0x0801029d
 8010f5c:	20001158 	.word	0x20001158
 8010f60:	08011361 	.word	0x08011361

08010f64 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b08a      	sub	sp, #40	; 0x28
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8010f6c:	2392      	movs	r3, #146	; 0x92
 8010f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	3301      	adds	r3, #1
 8010f76:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8010f78:	6a3b      	ldr	r3, [r7, #32]
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	2bff      	cmp	r3, #255	; 0xff
 8010f7e:	d053      	beq.n	8011028 <SVCCTL_App_Notification+0xc4>
 8010f80:	2bff      	cmp	r3, #255	; 0xff
 8010f82:	f300 80a1 	bgt.w	80110c8 <SVCCTL_App_Notification+0x164>
 8010f86:	2b05      	cmp	r3, #5
 8010f88:	d002      	beq.n	8010f90 <SVCCTL_App_Notification+0x2c>
 8010f8a:	2b3e      	cmp	r3, #62	; 0x3e
 8010f8c:	d020      	beq.n	8010fd0 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8010f8e:	e09b      	b.n	80110c8 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8010f90:	6a3b      	ldr	r3, [r7, #32]
 8010f92:	3302      	adds	r3, #2
 8010f94:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010f9c:	b29a      	uxth	r2, r3
 8010f9e:	4b4e      	ldr	r3, [pc, #312]	; (80110d8 <SVCCTL_App_Notification+0x174>)
 8010fa0:	8adb      	ldrh	r3, [r3, #22]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d106      	bne.n	8010fb4 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8010fa6:	4b4c      	ldr	r3, [pc, #304]	; (80110d8 <SVCCTL_App_Notification+0x174>)
 8010fa8:	2200      	movs	r2, #0
 8010faa:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010fac:	4b4a      	ldr	r3, [pc, #296]	; (80110d8 <SVCCTL_App_Notification+0x174>)
 8010fae:	2200      	movs	r2, #0
 8010fb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8010fb4:	2001      	movs	r0, #1
 8010fb6:	f000 f95f 	bl	8011278 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8010fba:	4b48      	ldr	r3, [pc, #288]	; (80110dc <SVCCTL_App_Notification+0x178>)
 8010fbc:	2201      	movs	r2, #1
 8010fbe:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8010fc0:	4b45      	ldr	r3, [pc, #276]	; (80110d8 <SVCCTL_App_Notification+0x174>)
 8010fc2:	8ada      	ldrh	r2, [r3, #22]
 8010fc4:	4b45      	ldr	r3, [pc, #276]	; (80110dc <SVCCTL_App_Notification+0x178>)
 8010fc6:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8010fc8:	4844      	ldr	r0, [pc, #272]	; (80110dc <SVCCTL_App_Notification+0x178>)
 8010fca:	f000 fa59 	bl	8011480 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8010fce:	e07e      	b.n	80110ce <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8010fd0:	6a3b      	ldr	r3, [r7, #32]
 8010fd2:	3302      	adds	r3, #2
 8010fd4:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	2b01      	cmp	r3, #1
 8010fdc:	d001      	beq.n	8010fe2 <SVCCTL_App_Notification+0x7e>
 8010fde:	2b03      	cmp	r3, #3
          break;
 8010fe0:	e021      	b.n	8011026 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	3301      	adds	r3, #1
 8010fe6:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8010fe8:	4b3b      	ldr	r3, [pc, #236]	; (80110d8 <SVCCTL_App_Notification+0x174>)
 8010fea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010fee:	2b04      	cmp	r3, #4
 8010ff0:	d104      	bne.n	8010ffc <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8010ff2:	4b39      	ldr	r3, [pc, #228]	; (80110d8 <SVCCTL_App_Notification+0x174>)
 8010ff4:	2206      	movs	r2, #6
 8010ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8010ffa:	e003      	b.n	8011004 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8010ffc:	4b36      	ldr	r3, [pc, #216]	; (80110d8 <SVCCTL_App_Notification+0x174>)
 8010ffe:	2205      	movs	r2, #5
 8011000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8011004:	693b      	ldr	r3, [r7, #16]
 8011006:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801100a:	b29a      	uxth	r2, r3
 801100c:	4b32      	ldr	r3, [pc, #200]	; (80110d8 <SVCCTL_App_Notification+0x174>)
 801100e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8011010:	4b32      	ldr	r3, [pc, #200]	; (80110dc <SVCCTL_App_Notification+0x178>)
 8011012:	2200      	movs	r2, #0
 8011014:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8011016:	4b30      	ldr	r3, [pc, #192]	; (80110d8 <SVCCTL_App_Notification+0x174>)
 8011018:	8ada      	ldrh	r2, [r3, #22]
 801101a:	4b30      	ldr	r3, [pc, #192]	; (80110dc <SVCCTL_App_Notification+0x178>)
 801101c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 801101e:	482f      	ldr	r0, [pc, #188]	; (80110dc <SVCCTL_App_Notification+0x178>)
 8011020:	f000 fa2e 	bl	8011480 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8011024:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8011026:	e052      	b.n	80110ce <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8011028:	6a3b      	ldr	r3, [r7, #32]
 801102a:	3302      	adds	r3, #2
 801102c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 801102e:	69fb      	ldr	r3, [r7, #28]
 8011030:	881b      	ldrh	r3, [r3, #0]
 8011032:	b29b      	uxth	r3, r3
 8011034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011038:	d040      	beq.n	80110bc <SVCCTL_App_Notification+0x158>
 801103a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801103e:	dc45      	bgt.n	80110cc <SVCCTL_App_Notification+0x168>
 8011040:	2b04      	cmp	r3, #4
 8011042:	d03d      	beq.n	80110c0 <SVCCTL_App_Notification+0x15c>
 8011044:	2b04      	cmp	r3, #4
 8011046:	db41      	blt.n	80110cc <SVCCTL_App_Notification+0x168>
 8011048:	f240 420a 	movw	r2, #1034	; 0x40a
 801104c:	4293      	cmp	r3, r2
 801104e:	dc3d      	bgt.n	80110cc <SVCCTL_App_Notification+0x168>
 8011050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011054:	dd3a      	ble.n	80110cc <SVCCTL_App_Notification+0x168>
 8011056:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 801105a:	2b09      	cmp	r3, #9
 801105c:	d836      	bhi.n	80110cc <SVCCTL_App_Notification+0x168>
 801105e:	a201      	add	r2, pc, #4	; (adr r2, 8011064 <SVCCTL_App_Notification+0x100>)
 8011060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011064:	080110b5 	.word	0x080110b5
 8011068:	0801108d 	.word	0x0801108d
 801106c:	080110cd 	.word	0x080110cd
 8011070:	080110cd 	.word	0x080110cd
 8011074:	080110cd 	.word	0x080110cd
 8011078:	080110cd 	.word	0x080110cd
 801107c:	080110c5 	.word	0x080110c5
 8011080:	080110cd 	.word	0x080110cd
 8011084:	080110a1 	.word	0x080110a1
 8011088:	080110c5 	.word	0x080110c5
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 801108c:	4b12      	ldr	r3, [pc, #72]	; (80110d8 <SVCCTL_App_Notification+0x174>)
 801108e:	8adb      	ldrh	r3, [r3, #22]
 8011090:	4913      	ldr	r1, [pc, #76]	; (80110e0 <SVCCTL_App_Notification+0x17c>)
 8011092:	4618      	mov	r0, r3
 8011094:	f7fe f818 	bl	800f0c8 <aci_gap_pass_key_resp>
 8011098:	4603      	mov	r3, r0
 801109a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801109e:	e012      	b.n	80110c6 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80110a0:	4b0d      	ldr	r3, [pc, #52]	; (80110d8 <SVCCTL_App_Notification+0x174>)
 80110a2:	8adb      	ldrh	r3, [r3, #22]
 80110a4:	2101      	movs	r1, #1
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fe f9b8 	bl	800f41c <aci_gap_numeric_comparison_value_confirm_yesno>
 80110ac:	4603      	mov	r3, r0
 80110ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80110b2:	e008      	b.n	80110c6 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80110b4:	69fb      	ldr	r3, [r7, #28]
 80110b6:	3302      	adds	r3, #2
 80110b8:	61bb      	str	r3, [r7, #24]
          break;
 80110ba:	e004      	b.n	80110c6 <SVCCTL_App_Notification+0x162>
          break;
 80110bc:	bf00      	nop
 80110be:	e005      	b.n	80110cc <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80110c0:	bf00      	nop
 80110c2:	e003      	b.n	80110cc <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80110c4:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80110c6:	e001      	b.n	80110cc <SVCCTL_App_Notification+0x168>
      break;
 80110c8:	bf00      	nop
 80110ca:	e000      	b.n	80110ce <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80110cc:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80110ce:	2301      	movs	r3, #1
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3728      	adds	r7, #40	; 0x28
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	20001158 	.word	0x20001158
 80110dc:	200011dc 	.word	0x200011dc
 80110e0:	0001b207 	.word	0x0001b207

080110e4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80110ea:	4b06      	ldr	r3, [pc, #24]	; (8011104 <Ble_Tl_Init+0x20>)
 80110ec:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80110ee:	4b06      	ldr	r3, [pc, #24]	; (8011108 <Ble_Tl_Init+0x24>)
 80110f0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80110f2:	463b      	mov	r3, r7
 80110f4:	4619      	mov	r1, r3
 80110f6:	4805      	ldr	r0, [pc, #20]	; (801110c <Ble_Tl_Init+0x28>)
 80110f8:	f7ff f8b4 	bl	8010264 <hci_init>

  return;
 80110fc:	bf00      	nop
}
 80110fe:	3708      	adds	r7, #8
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	200300d8 	.word	0x200300d8
 8011108:	08011411 	.word	0x08011411
 801110c:	080113d9 	.word	0x080113d9

08011110 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8011110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011112:	b08d      	sub	sp, #52	; 0x34
 8011114:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8011116:	2300      	movs	r3, #0
 8011118:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801111a:	2392      	movs	r3, #146	; 0x92
 801111c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 801111e:	f7fe fdd0 	bl	800fcc2 <hci_reset>
 8011122:	4603      	mov	r3, r0
 8011124:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8011126:	f000 f8d7 	bl	80112d8 <BleGetBdAddress>
 801112a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 801112c:	693a      	ldr	r2, [r7, #16]
 801112e:	2106      	movs	r1, #6
 8011130:	2000      	movs	r0, #0
 8011132:	f7fe fc86 	bl	800fa42 <aci_hal_write_config_data>
 8011136:	4603      	mov	r3, r0
 8011138:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 801113a:	4a4a      	ldr	r2, [pc, #296]	; (8011264 <Ble_Hci_Gap_Gatt_Init+0x154>)
 801113c:	2110      	movs	r1, #16
 801113e:	2018      	movs	r0, #24
 8011140:	f7fe fc7f 	bl	800fa42 <aci_hal_write_config_data>
 8011144:	4603      	mov	r3, r0
 8011146:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8011148:	4a47      	ldr	r2, [pc, #284]	; (8011268 <Ble_Hci_Gap_Gatt_Init+0x158>)
 801114a:	2110      	movs	r1, #16
 801114c:	2008      	movs	r0, #8
 801114e:	f7fe fc78 	bl	800fa42 <aci_hal_write_config_data>
 8011152:	4603      	mov	r3, r0
 8011154:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8011156:	211f      	movs	r1, #31
 8011158:	2001      	movs	r0, #1
 801115a:	f7fe fcf7 	bl	800fb4c <aci_hal_set_tx_power_level>
 801115e:	4603      	mov	r3, r0
 8011160:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8011162:	f7fe f9c2 	bl	800f4ea <aci_gatt_init>
 8011166:	4603      	mov	r3, r0
 8011168:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 801116a:	2300      	movs	r3, #0
 801116c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 801116e:	7bfb      	ldrb	r3, [r7, #15]
 8011170:	f043 0301 	orr.w	r3, r3, #1
 8011174:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8011176:	7bfb      	ldrb	r3, [r7, #15]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d01f      	beq.n	80111bc <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 801117c:	4b3b      	ldr	r3, [pc, #236]	; (801126c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 801117e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8011180:	1dba      	adds	r2, r7, #6
 8011182:	7bf8      	ldrb	r0, [r7, #15]
 8011184:	1cbb      	adds	r3, r7, #2
 8011186:	9301      	str	r3, [sp, #4]
 8011188:	1d3b      	adds	r3, r7, #4
 801118a:	9300      	str	r3, [sp, #0]
 801118c:	4613      	mov	r3, r2
 801118e:	2209      	movs	r2, #9
 8011190:	2100      	movs	r1, #0
 8011192:	f7fe f800 	bl	800f196 <aci_gap_init>
 8011196:	4603      	mov	r3, r0
 8011198:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 801119a:	88fc      	ldrh	r4, [r7, #6]
 801119c:	88bd      	ldrh	r5, [r7, #4]
 801119e:	68b8      	ldr	r0, [r7, #8]
 80111a0:	f7ee ffee 	bl	8000180 <strlen>
 80111a4:	4603      	mov	r3, r0
 80111a6:	b2da      	uxtb	r2, r3
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	9300      	str	r3, [sp, #0]
 80111ac:	4613      	mov	r3, r2
 80111ae:	2200      	movs	r2, #0
 80111b0:	4629      	mov	r1, r5
 80111b2:	4620      	mov	r0, r4
 80111b4:	f7fe fb9c 	bl	800f8f0 <aci_gatt_update_char_value>
 80111b8:	4603      	mov	r3, r0
 80111ba:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80111bc:	88f8      	ldrh	r0, [r7, #6]
 80111be:	8879      	ldrh	r1, [r7, #2]
 80111c0:	463b      	mov	r3, r7
 80111c2:	9300      	str	r3, [sp, #0]
 80111c4:	2302      	movs	r3, #2
 80111c6:	2200      	movs	r2, #0
 80111c8:	f7fe fb92 	bl	800f8f0 <aci_gatt_update_char_value>
 80111cc:	4603      	mov	r3, r0
 80111ce:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80111d0:	2202      	movs	r2, #2
 80111d2:	2102      	movs	r1, #2
 80111d4:	2000      	movs	r0, #0
 80111d6:	f7fe fd98 	bl	800fd0a <hci_le_set_default_phy>
 80111da:	4603      	mov	r3, r0
 80111dc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80111de:	4b24      	ldr	r3, [pc, #144]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80111e0:	2201      	movs	r2, #1
 80111e2:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80111e4:	4b22      	ldr	r3, [pc, #136]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7fd fe55 	bl	800ee98 <aci_gap_set_io_capability>
 80111ee:	4603      	mov	r3, r0
 80111f0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80111f2:	4b1f      	ldr	r3, [pc, #124]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80111f4:	2201      	movs	r2, #1
 80111f6:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80111f8:	4b1d      	ldr	r3, [pc, #116]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80111fa:	2208      	movs	r2, #8
 80111fc:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80111fe:	4b1c      	ldr	r3, [pc, #112]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011200:	2210      	movs	r2, #16
 8011202:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8011204:	4b1a      	ldr	r3, [pc, #104]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011206:	2200      	movs	r2, #0
 8011208:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 801120a:	4b19      	ldr	r3, [pc, #100]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801120c:	4a19      	ldr	r2, [pc, #100]	; (8011274 <Ble_Hci_Gap_Gatt_Init+0x164>)
 801120e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8011210:	4b17      	ldr	r3, [pc, #92]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011212:	2200      	movs	r2, #0
 8011214:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8011216:	4b16      	ldr	r3, [pc, #88]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011218:	789c      	ldrb	r4, [r3, #2]
 801121a:	4b15      	ldr	r3, [pc, #84]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801121c:	785d      	ldrb	r5, [r3, #1]
 801121e:	4b14      	ldr	r3, [pc, #80]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011220:	791b      	ldrb	r3, [r3, #4]
 8011222:	4a13      	ldr	r2, [pc, #76]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011224:	7952      	ldrb	r2, [r2, #5]
 8011226:	4912      	ldr	r1, [pc, #72]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011228:	78c9      	ldrb	r1, [r1, #3]
 801122a:	4811      	ldr	r0, [pc, #68]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801122c:	6880      	ldr	r0, [r0, #8]
 801122e:	2600      	movs	r6, #0
 8011230:	9604      	str	r6, [sp, #16]
 8011232:	9003      	str	r0, [sp, #12]
 8011234:	9102      	str	r1, [sp, #8]
 8011236:	9201      	str	r2, [sp, #4]
 8011238:	9300      	str	r3, [sp, #0]
 801123a:	2300      	movs	r3, #0
 801123c:	2201      	movs	r2, #1
 801123e:	4629      	mov	r1, r5
 8011240:	4620      	mov	r0, r4
 8011242:	f7fd fe7d 	bl	800ef40 <aci_gap_set_authentication_requirement>
 8011246:	4603      	mov	r3, r0
 8011248:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 801124a:	4b09      	ldr	r3, [pc, #36]	; (8011270 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801124c:	789b      	ldrb	r3, [r3, #2]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d003      	beq.n	801125a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8011252:	f7fe f8bf 	bl	800f3d4 <aci_gap_configure_filter_accept_list>
 8011256:	4603      	mov	r3, r0
 8011258:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 801125a:	bf00      	nop
 801125c:	371c      	adds	r7, #28
 801125e:	46bd      	mov	sp, r7
 8011260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011262:	bf00      	nop
 8011264:	080144b0 	.word	0x080144b0
 8011268:	080144c0 	.word	0x080144c0
 801126c:	080142a4 	.word	0x080142a4
 8011270:	20001158 	.word	0x20001158
 8011274:	0001b207 	.word	0x0001b207

08011278 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b08c      	sub	sp, #48	; 0x30
 801127c:	af08      	add	r7, sp, #32
 801127e:	4603      	mov	r3, r0
 8011280:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011282:	2392      	movs	r3, #146	; 0x92
 8011284:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8011286:	4a12      	ldr	r2, [pc, #72]	; (80112d0 <Adv_Request+0x58>)
 8011288:	79fb      	ldrb	r3, [r7, #7]
 801128a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 801128e:	2300      	movs	r3, #0
 8011290:	9306      	str	r3, [sp, #24]
 8011292:	2300      	movs	r3, #0
 8011294:	9305      	str	r3, [sp, #20]
 8011296:	2300      	movs	r3, #0
 8011298:	9304      	str	r3, [sp, #16]
 801129a:	2300      	movs	r3, #0
 801129c:	9303      	str	r3, [sp, #12]
 801129e:	2300      	movs	r3, #0
 80112a0:	9302      	str	r3, [sp, #8]
 80112a2:	2300      	movs	r3, #0
 80112a4:	9301      	str	r3, [sp, #4]
 80112a6:	2300      	movs	r3, #0
 80112a8:	9300      	str	r3, [sp, #0]
 80112aa:	2300      	movs	r3, #0
 80112ac:	22a0      	movs	r2, #160	; 0xa0
 80112ae:	2180      	movs	r1, #128	; 0x80
 80112b0:	2000      	movs	r0, #0
 80112b2:	f7fd fcf7 	bl	800eca4 <aci_gap_set_discoverable>
 80112b6:	4603      	mov	r3, r0
 80112b8:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80112ba:	4906      	ldr	r1, [pc, #24]	; (80112d4 <Adv_Request+0x5c>)
 80112bc:	200b      	movs	r0, #11
 80112be:	f7fe f817 	bl	800f2f0 <aci_gap_update_adv_data>
 80112c2:	4603      	mov	r3, r0
 80112c4:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80112c6:	bf00      	nop
}
 80112c8:	3710      	adds	r7, #16
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}
 80112ce:	bf00      	nop
 80112d0:	20001158 	.word	0x20001158
 80112d4:	200000e4 	.word	0x200000e4

080112d8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b086      	sub	sp, #24
 80112dc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80112de:	f7ff fdc3 	bl	8010e68 <LL_FLASH_GetUDN>
 80112e2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80112e4:	693b      	ldr	r3, [r7, #16]
 80112e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ea:	d023      	beq.n	8011334 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80112ec:	f7ff fdd4 	bl	8010e98 <LL_FLASH_GetSTCompanyID>
 80112f0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80112f2:	f7ff fdc5 	bl	8010e80 <LL_FLASH_GetDeviceID>
 80112f6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	b2da      	uxtb	r2, r3
 80112fc:	4b16      	ldr	r3, [pc, #88]	; (8011358 <BleGetBdAddress+0x80>)
 80112fe:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	0a1b      	lsrs	r3, r3, #8
 8011304:	b2da      	uxtb	r2, r3
 8011306:	4b14      	ldr	r3, [pc, #80]	; (8011358 <BleGetBdAddress+0x80>)
 8011308:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	b2da      	uxtb	r2, r3
 801130e:	4b12      	ldr	r3, [pc, #72]	; (8011358 <BleGetBdAddress+0x80>)
 8011310:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	b2da      	uxtb	r2, r3
 8011316:	4b10      	ldr	r3, [pc, #64]	; (8011358 <BleGetBdAddress+0x80>)
 8011318:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	0a1b      	lsrs	r3, r3, #8
 801131e:	b2da      	uxtb	r2, r3
 8011320:	4b0d      	ldr	r3, [pc, #52]	; (8011358 <BleGetBdAddress+0x80>)
 8011322:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	0c1b      	lsrs	r3, r3, #16
 8011328:	b2da      	uxtb	r2, r3
 801132a:	4b0b      	ldr	r3, [pc, #44]	; (8011358 <BleGetBdAddress+0x80>)
 801132c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 801132e:	4b0a      	ldr	r3, [pc, #40]	; (8011358 <BleGetBdAddress+0x80>)
 8011330:	617b      	str	r3, [r7, #20]
 8011332:	e00b      	b.n	801134c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8011334:	2000      	movs	r0, #0
 8011336:	f7ff fcb1 	bl	8010c9c <OTP_Read>
 801133a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d002      	beq.n	8011348 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	617b      	str	r3, [r7, #20]
 8011346:	e001      	b.n	801134c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8011348:	4b04      	ldr	r3, [pc, #16]	; (801135c <BleGetBdAddress+0x84>)
 801134a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 801134c:	697b      	ldr	r3, [r7, #20]
}
 801134e:	4618      	mov	r0, r3
 8011350:	3718      	adds	r7, #24
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}
 8011356:	bf00      	nop
 8011358:	20001150 	.word	0x20001150
 801135c:	080144a8 	.word	0x080144a8

08011360 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b082      	sub	sp, #8
 8011364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8011366:	4b0a      	ldr	r3, [pc, #40]	; (8011390 <Adv_Cancel+0x30>)
 8011368:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801136c:	2b05      	cmp	r3, #5
 801136e:	d00a      	beq.n	8011386 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011370:	2392      	movs	r3, #146	; 0x92
 8011372:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8011374:	f7fd fc72 	bl	800ec5c <aci_gap_set_non_discoverable>
 8011378:	4603      	mov	r3, r0
 801137a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801137c:	4b04      	ldr	r3, [pc, #16]	; (8011390 <Adv_Cancel+0x30>)
 801137e:	2200      	movs	r2, #0
 8011380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8011384:	bf00      	nop
 8011386:	bf00      	nop
}
 8011388:	3708      	adds	r7, #8
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}
 801138e:	bf00      	nop
 8011390:	20001158 	.word	0x20001158

08011394 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 801139c:	2100      	movs	r1, #0
 801139e:	2002      	movs	r0, #2
 80113a0:	f001 fd44 	bl	8012e2c <UTIL_SEQ_SetTask>

  return;
 80113a4:	bf00      	nop
}
 80113a6:	3708      	adds	r7, #8
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80113b4:	2001      	movs	r0, #1
 80113b6:	f001 fda5 	bl	8012f04 <UTIL_SEQ_SetEvt>

  return;
 80113ba:	bf00      	nop
}
 80113bc:	3708      	adds	r7, #8
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}

080113c2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80113c2:	b580      	push	{r7, lr}
 80113c4:	b082      	sub	sp, #8
 80113c6:	af00      	add	r7, sp, #0
 80113c8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80113ca:	2001      	movs	r0, #1
 80113cc:	f001 fdba 	bl	8012f44 <UTIL_SEQ_WaitEvt>

  return;
 80113d0:	bf00      	nop
}
 80113d2:	3708      	adds	r7, #8
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}

080113d8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	685b      	ldr	r3, [r3, #4]
 80113e8:	3308      	adds	r3, #8
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7fe fdf4 	bl	800ffd8 <SVCCTL_UserEvtRx>
 80113f0:	4603      	mov	r3, r0
 80113f2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80113f4:	7afb      	ldrb	r3, [r7, #11]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d003      	beq.n	8011402 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	2201      	movs	r2, #1
 80113fe:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8011400:	e003      	b.n	801140a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	2200      	movs	r2, #0
 8011406:	701a      	strb	r2, [r3, #0]
  return;
 8011408:	bf00      	nop
}
 801140a:	3710      	adds	r7, #16
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	4603      	mov	r3, r0
 8011418:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 801141a:	79fb      	ldrb	r3, [r7, #7]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d002      	beq.n	8011426 <BLE_StatusNot+0x16>
 8011420:	2b01      	cmp	r3, #1
 8011422:	d006      	beq.n	8011432 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8011424:	e00b      	b.n	801143e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8011426:	2307      	movs	r3, #7
 8011428:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 801142a:	68f8      	ldr	r0, [r7, #12]
 801142c:	f001 fd2a 	bl	8012e84 <UTIL_SEQ_PauseTask>
      break;
 8011430:	e005      	b.n	801143e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8011432:	2307      	movs	r3, #7
 8011434:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8011436:	68f8      	ldr	r0, [r7, #12]
 8011438:	f001 fd44 	bl	8012ec4 <UTIL_SEQ_ResumeTask>
      break;
 801143c:	bf00      	nop
  }

  return;
 801143e:	bf00      	nop
}
 8011440:	3710      	adds	r7, #16
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}

08011446 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8011446:	b480      	push	{r7}
 8011448:	b083      	sub	sp, #12
 801144a:	af00      	add	r7, sp, #0
 801144c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	2b02      	cmp	r3, #2
 8011454:	d006      	beq.n	8011464 <Custom_STM_App_Notification+0x1e>
 8011456:	2b02      	cmp	r3, #2
 8011458:	dc06      	bgt.n	8011468 <Custom_STM_App_Notification+0x22>
 801145a:	2b00      	cmp	r3, #0
 801145c:	d006      	beq.n	801146c <Custom_STM_App_Notification+0x26>
 801145e:	2b01      	cmp	r3, #1
 8011460:	d006      	beq.n	8011470 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8011462:	e001      	b.n	8011468 <Custom_STM_App_Notification+0x22>
      break;
 8011464:	bf00      	nop
 8011466:	e004      	b.n	8011472 <Custom_STM_App_Notification+0x2c>
      break;
 8011468:	bf00      	nop
 801146a:	e002      	b.n	8011472 <Custom_STM_App_Notification+0x2c>
      break;
 801146c:	bf00      	nop
 801146e:	e000      	b.n	8011472 <Custom_STM_App_Notification+0x2c>
      break;
 8011470:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8011472:	bf00      	nop
}
 8011474:	370c      	adds	r7, #12
 8011476:	46bd      	mov	sp, r7
 8011478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147c:	4770      	bx	lr
	...

08011480 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b082      	sub	sp, #8
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	781b      	ldrb	r3, [r3, #0]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d002      	beq.n	8011496 <Custom_APP_Notification+0x16>
 8011490:	2b01      	cmp	r3, #1
 8011492:	d007      	beq.n	80114a4 <Custom_APP_Notification+0x24>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8011494:	e00d      	b.n	80114b2 <Custom_APP_Notification+0x32>
    	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8011496:	2201      	movs	r2, #1
 8011498:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801149c:	4807      	ldr	r0, [pc, #28]	; (80114bc <Custom_APP_Notification+0x3c>)
 801149e:	f7f3 fb9f 	bl	8004be0 <HAL_GPIO_WritePin>
      break;
 80114a2:	e006      	b.n	80114b2 <Custom_APP_Notification+0x32>
    	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80114a4:	2200      	movs	r2, #0
 80114a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80114aa:	4804      	ldr	r0, [pc, #16]	; (80114bc <Custom_APP_Notification+0x3c>)
 80114ac:	f7f3 fb98 	bl	8004be0 <HAL_GPIO_WritePin>
      break;
 80114b0:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80114b2:	bf00      	nop
}
 80114b4:	3708      	adds	r7, #8
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop
 80114bc:	48000800 	.word	0x48000800

080114c0 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b082      	sub	sp, #8
 80114c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	// Add pivot
	for(int index = 0; index < 4; index++)
 80114c6:	2300      	movs	r3, #0
 80114c8:	607b      	str	r3, [r7, #4]
 80114ca:	e00b      	b.n	80114e4 <Custom_APP_Init+0x24>
		UpdateCharData[index] = 0xff - (uint8_t)index;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	43db      	mvns	r3, r3
 80114d2:	b2d9      	uxtb	r1, r3
 80114d4:	4a1e      	ldr	r2, [pc, #120]	; (8011550 <Custom_APP_Init+0x90>)
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	4413      	add	r3, r2
 80114da:	460a      	mov	r2, r1
 80114dc:	701a      	strb	r2, [r3, #0]
	for(int index = 0; index < 4; index++)
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	3301      	adds	r3, #1
 80114e2:	607b      	str	r3, [r7, #4]
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2b03      	cmp	r3, #3
 80114e8:	ddf0      	ble.n	80114cc <Custom_APP_Init+0xc>

	// Initial mahony q, IMU setting
	q_init();
 80114ea:	f7f0 f9ad 	bl	8001848 <q_init>
	IMU_All_Init();
 80114ee:	f7ef fc9f 	bl	8000e30 <IMU_All_Init>
	IMU_All_Bank_0();
 80114f2:	f7ef fccf 	bl	8000e94 <IMU_All_Bank_0>
	FFT_Init(1);
 80114f6:	2001      	movs	r0, #1
 80114f8:	f7ef fd76 	bl	8000fe8 <FFT_Init>

	// Record gyro drift
	for(int count = 0; count < 50; count++){
 80114fc:	2300      	movs	r3, #0
 80114fe:	603b      	str	r3, [r7, #0]
 8011500:	e00c      	b.n	801151c <Custom_APP_Init+0x5c>
		IMU_All_Read_Data(IMU_Status);
 8011502:	4814      	ldr	r0, [pc, #80]	; (8011554 <Custom_APP_Init+0x94>)
 8011504:	f7ef fcf4 	bl	8000ef0 <IMU_All_Read_Data>
		Record_Gyro_bias(IMU_Status + 3);
 8011508:	4b13      	ldr	r3, [pc, #76]	; (8011558 <Custom_APP_Init+0x98>)
 801150a:	4618      	mov	r0, r3
 801150c:	f7f0 fa6a 	bl	80019e4 <Record_Gyro_bias>
		HAL_Delay(20);
 8011510:	2014      	movs	r0, #20
 8011512:	f7f1 fb2e 	bl	8002b72 <HAL_Delay>
	for(int count = 0; count < 50; count++){
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	3301      	adds	r3, #1
 801151a:	603b      	str	r3, [r7, #0]
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	2b31      	cmp	r3, #49	; 0x31
 8011520:	ddef      	ble.n	8011502 <Custom_APP_Init+0x42>
	}
	statistic_gyro_bias();
 8011522:	f7f0 fb43 	bl	8001bac <statistic_gyro_bias>

	UTIL_SEQ_RegTask(1 << CFG_IMU_TASK_UPDATE, UTIL_SEQ_RFU, IMU_task);
 8011526:	4a0d      	ldr	r2, [pc, #52]	; (801155c <Custom_APP_Init+0x9c>)
 8011528:	2100      	movs	r1, #0
 801152a:	2004      	movs	r0, #4
 801152c:	f001 fc5c 	bl	8012de8 <UTIL_SEQ_RegTask>

	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(Custom_App_Context.Update_IMU_Task_Timer_Id),
 8011530:	4b0b      	ldr	r3, [pc, #44]	; (8011560 <Custom_APP_Init+0xa0>)
 8011532:	2201      	movs	r2, #1
 8011534:	490b      	ldr	r1, [pc, #44]	; (8011564 <Custom_APP_Init+0xa4>)
 8011536:	2000      	movs	r0, #0
 8011538:	f7f2 f8c0 	bl	80036bc <HW_TS_Create>
				hw_ts_Repeated, IMU_Update_Timer_Callback);

	HW_TS_Start(Custom_App_Context.Update_IMU_Task_Timer_Id, Update_IMU_Task_TIMER_PERIOD);
 801153c:	4b0a      	ldr	r3, [pc, #40]	; (8011568 <Custom_APP_Init+0xa8>)
 801153e:	785b      	ldrb	r3, [r3, #1]
 8011540:	2128      	movs	r1, #40	; 0x28
 8011542:	4618      	mov	r0, r3
 8011544:	f7f2 f9b8 	bl	80038b8 <HW_TS_Start>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 8011548:	bf00      	nop
}
 801154a:	3708      	adds	r7, #8
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	200011e4 	.word	0x200011e4
 8011554:	200012dc 	.word	0x200012dc
 8011558:	200012df 	.word	0x200012df
 801155c:	080119a5 	.word	0x080119a5
 8011560:	080115b5 	.word	0x080115b5
 8011564:	200011e1 	.word	0x200011e1
 8011568:	200011e0 	.word	0x200011e0

0801156c <Button_Press_Detect>:

/* USER CODE BEGIN FD */

void Button_Press_Detect(){
 801156c:	b580      	push	{r7, lr}
 801156e:	af00      	add	r7, sp, #0
	Button_Cur_State = HAL_GPIO_ReadPin(Btn_GPIO_Port, Btn_Pin);
 8011570:	2101      	movs	r1, #1
 8011572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011576:	f7f3 fb1b 	bl	8004bb0 <HAL_GPIO_ReadPin>
 801157a:	4603      	mov	r3, r0
 801157c:	461a      	mov	r2, r3
 801157e:	4b0a      	ldr	r3, [pc, #40]	; (80115a8 <Button_Press_Detect+0x3c>)
 8011580:	701a      	strb	r2, [r3, #0]

	if ((Button_Cur_State != Button_Pre_State) && (Button_Cur_State == 1)){
 8011582:	4b09      	ldr	r3, [pc, #36]	; (80115a8 <Button_Press_Detect+0x3c>)
 8011584:	781a      	ldrb	r2, [r3, #0]
 8011586:	4b09      	ldr	r3, [pc, #36]	; (80115ac <Button_Press_Detect+0x40>)
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	429a      	cmp	r2, r3
 801158c:	d006      	beq.n	801159c <Button_Press_Detect+0x30>
 801158e:	4b06      	ldr	r3, [pc, #24]	; (80115a8 <Button_Press_Detect+0x3c>)
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	2b01      	cmp	r3, #1
 8011594:	d102      	bne.n	801159c <Button_Press_Detect+0x30>
		Change_State_Force = 1;
 8011596:	4b06      	ldr	r3, [pc, #24]	; (80115b0 <Button_Press_Detect+0x44>)
 8011598:	2201      	movs	r2, #1
 801159a:	701a      	strb	r2, [r3, #0]
	}

	Button_Pre_State = Button_Cur_State;
 801159c:	4b02      	ldr	r3, [pc, #8]	; (80115a8 <Button_Press_Detect+0x3c>)
 801159e:	781a      	ldrb	r2, [r3, #0]
 80115a0:	4b02      	ldr	r3, [pc, #8]	; (80115ac <Button_Press_Detect+0x40>)
 80115a2:	701a      	strb	r2, [r3, #0]
}
 80115a4:	bf00      	nop
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	200000f8 	.word	0x200000f8
 80115ac:	200000f9 	.word	0x200000f9
 80115b0:	20001500 	.word	0x20001500

080115b4 <IMU_Update_Timer_Callback>:

static void IMU_Update_Timer_Callback(){
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b084      	sub	sp, #16
 80115b8:	af00      	add	r7, sp, #0
	// Initialize IMU status buffer and send buffer
	for (int index = 0; index < 140; index++) IMU_Status[index] = 0;
 80115ba:	2300      	movs	r3, #0
 80115bc:	60fb      	str	r3, [r7, #12]
 80115be:	e007      	b.n	80115d0 <IMU_Update_Timer_Callback+0x1c>
 80115c0:	4a9a      	ldr	r2, [pc, #616]	; (801182c <IMU_Update_Timer_Callback+0x278>)
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	4413      	add	r3, r2
 80115c6:	2200      	movs	r2, #0
 80115c8:	701a      	strb	r2, [r3, #0]
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	3301      	adds	r3, #1
 80115ce:	60fb      	str	r3, [r7, #12]
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	2b8b      	cmp	r3, #139	; 0x8b
 80115d4:	ddf4      	ble.n	80115c0 <IMU_Update_Timer_Callback+0xc>
	for (int index = 0; index < 112; index ++) IMU_q[index] = 0;
 80115d6:	2300      	movs	r3, #0
 80115d8:	60bb      	str	r3, [r7, #8]
 80115da:	e007      	b.n	80115ec <IMU_Update_Timer_Callback+0x38>
 80115dc:	4a94      	ldr	r2, [pc, #592]	; (8011830 <IMU_Update_Timer_Callback+0x27c>)
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	4413      	add	r3, r2
 80115e2:	2200      	movs	r2, #0
 80115e4:	701a      	strb	r2, [r3, #0]
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	3301      	adds	r3, #1
 80115ea:	60bb      	str	r3, [r7, #8]
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	2b6f      	cmp	r3, #111	; 0x6f
 80115f0:	ddf4      	ble.n	80115dc <IMU_Update_Timer_Callback+0x28>

	// Get all peripheral IMU data
	IMU_All_Read_Data(IMU_Status);
 80115f2:	488e      	ldr	r0, [pc, #568]	; (801182c <IMU_Update_Timer_Callback+0x278>)
 80115f4:	f7ef fc7c 	bl	8000ef0 <IMU_All_Read_Data>

	for(int index = 0; index < 7; index++)
 80115f8:	2300      	movs	r3, #0
 80115fa:	607b      	str	r3, [r7, #4]
 80115fc:	e013      	b.n	8011626 <IMU_Update_Timer_Callback+0x72>
		mahony((IMU_Status + 3 + 20 * index), index, (float *)(IMU_q + 16 * index));
 80115fe:	687a      	ldr	r2, [r7, #4]
 8011600:	4613      	mov	r3, r2
 8011602:	009b      	lsls	r3, r3, #2
 8011604:	4413      	add	r3, r2
 8011606:	009b      	lsls	r3, r3, #2
 8011608:	3303      	adds	r3, #3
 801160a:	4a88      	ldr	r2, [pc, #544]	; (801182c <IMU_Update_Timer_Callback+0x278>)
 801160c:	1898      	adds	r0, r3, r2
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	011b      	lsls	r3, r3, #4
 8011612:	461a      	mov	r2, r3
 8011614:	4b86      	ldr	r3, [pc, #536]	; (8011830 <IMU_Update_Timer_Callback+0x27c>)
 8011616:	4413      	add	r3, r2
 8011618:	461a      	mov	r2, r3
 801161a:	6879      	ldr	r1, [r7, #4]
 801161c:	f7f0 fd96 	bl	800214c <mahony>
	for(int index = 0; index < 7; index++)
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	3301      	adds	r3, #1
 8011624:	607b      	str	r3, [r7, #4]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	2b06      	cmp	r3, #6
 801162a:	dde8      	ble.n	80115fe <IMU_Update_Timer_Callback+0x4a>

	// Get glove board IMU data
	accex = (int16_t)((IMU_Status[3] << 8) | IMU_Status[4]) / 16384.0;
 801162c:	4b7f      	ldr	r3, [pc, #508]	; (801182c <IMU_Update_Timer_Callback+0x278>)
 801162e:	78db      	ldrb	r3, [r3, #3]
 8011630:	021b      	lsls	r3, r3, #8
 8011632:	b21a      	sxth	r2, r3
 8011634:	4b7d      	ldr	r3, [pc, #500]	; (801182c <IMU_Update_Timer_Callback+0x278>)
 8011636:	791b      	ldrb	r3, [r3, #4]
 8011638:	b21b      	sxth	r3, r3
 801163a:	4313      	orrs	r3, r2
 801163c:	b21b      	sxth	r3, r3
 801163e:	4618      	mov	r0, r3
 8011640:	f7ee fef8 	bl	8000434 <__aeabi_i2d>
 8011644:	f04f 0200 	mov.w	r2, #0
 8011648:	4b7a      	ldr	r3, [pc, #488]	; (8011834 <IMU_Update_Timer_Callback+0x280>)
 801164a:	f7ef f887 	bl	800075c <__aeabi_ddiv>
 801164e:	4602      	mov	r2, r0
 8011650:	460b      	mov	r3, r1
 8011652:	4610      	mov	r0, r2
 8011654:	4619      	mov	r1, r3
 8011656:	f7ef fa19 	bl	8000a8c <__aeabi_d2f>
 801165a:	4603      	mov	r3, r0
 801165c:	4a76      	ldr	r2, [pc, #472]	; (8011838 <IMU_Update_Timer_Callback+0x284>)
 801165e:	6013      	str	r3, [r2, #0]
	accey = (int16_t)((IMU_Status[5] << 8) | IMU_Status[6]) / 16384.0;
 8011660:	4b72      	ldr	r3, [pc, #456]	; (801182c <IMU_Update_Timer_Callback+0x278>)
 8011662:	795b      	ldrb	r3, [r3, #5]
 8011664:	021b      	lsls	r3, r3, #8
 8011666:	b21a      	sxth	r2, r3
 8011668:	4b70      	ldr	r3, [pc, #448]	; (801182c <IMU_Update_Timer_Callback+0x278>)
 801166a:	799b      	ldrb	r3, [r3, #6]
 801166c:	b21b      	sxth	r3, r3
 801166e:	4313      	orrs	r3, r2
 8011670:	b21b      	sxth	r3, r3
 8011672:	4618      	mov	r0, r3
 8011674:	f7ee fede 	bl	8000434 <__aeabi_i2d>
 8011678:	f04f 0200 	mov.w	r2, #0
 801167c:	4b6d      	ldr	r3, [pc, #436]	; (8011834 <IMU_Update_Timer_Callback+0x280>)
 801167e:	f7ef f86d 	bl	800075c <__aeabi_ddiv>
 8011682:	4602      	mov	r2, r0
 8011684:	460b      	mov	r3, r1
 8011686:	4610      	mov	r0, r2
 8011688:	4619      	mov	r1, r3
 801168a:	f7ef f9ff 	bl	8000a8c <__aeabi_d2f>
 801168e:	4603      	mov	r3, r0
 8011690:	4a6a      	ldr	r2, [pc, #424]	; (801183c <IMU_Update_Timer_Callback+0x288>)
 8011692:	6013      	str	r3, [r2, #0]
	accez = (int16_t)((IMU_Status[7] << 8) | IMU_Status[8]) / 16384.0;
 8011694:	4b65      	ldr	r3, [pc, #404]	; (801182c <IMU_Update_Timer_Callback+0x278>)
 8011696:	79db      	ldrb	r3, [r3, #7]
 8011698:	021b      	lsls	r3, r3, #8
 801169a:	b21a      	sxth	r2, r3
 801169c:	4b63      	ldr	r3, [pc, #396]	; (801182c <IMU_Update_Timer_Callback+0x278>)
 801169e:	7a1b      	ldrb	r3, [r3, #8]
 80116a0:	b21b      	sxth	r3, r3
 80116a2:	4313      	orrs	r3, r2
 80116a4:	b21b      	sxth	r3, r3
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7ee fec4 	bl	8000434 <__aeabi_i2d>
 80116ac:	f04f 0200 	mov.w	r2, #0
 80116b0:	4b60      	ldr	r3, [pc, #384]	; (8011834 <IMU_Update_Timer_Callback+0x280>)
 80116b2:	f7ef f853 	bl	800075c <__aeabi_ddiv>
 80116b6:	4602      	mov	r2, r0
 80116b8:	460b      	mov	r3, r1
 80116ba:	4610      	mov	r0, r2
 80116bc:	4619      	mov	r1, r3
 80116be:	f7ef f9e5 	bl	8000a8c <__aeabi_d2f>
 80116c2:	4603      	mov	r3, r0
 80116c4:	4a5e      	ldr	r2, [pc, #376]	; (8011840 <IMU_Update_Timer_Callback+0x28c>)
 80116c6:	6013      	str	r3, [r2, #0]

	FFT_Counter++;
 80116c8:	4b5e      	ldr	r3, [pc, #376]	; (8011844 <IMU_Update_Timer_Callback+0x290>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	3301      	adds	r3, #1
 80116ce:	4a5d      	ldr	r2, [pc, #372]	; (8011844 <IMU_Update_Timer_Callback+0x290>)
 80116d0:	6013      	str	r3, [r2, #0]
	Past_Acc[0][50 - FFT_Counter] = accex;
 80116d2:	4b5c      	ldr	r3, [pc, #368]	; (8011844 <IMU_Update_Timer_Callback+0x290>)
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80116da:	4a57      	ldr	r2, [pc, #348]	; (8011838 <IMU_Update_Timer_Callback+0x284>)
 80116dc:	6812      	ldr	r2, [r2, #0]
 80116de:	495a      	ldr	r1, [pc, #360]	; (8011848 <IMU_Update_Timer_Callback+0x294>)
 80116e0:	009b      	lsls	r3, r3, #2
 80116e2:	440b      	add	r3, r1
 80116e4:	601a      	str	r2, [r3, #0]
	Past_Acc[1][50 - FFT_Counter] = accey;
 80116e6:	4b57      	ldr	r3, [pc, #348]	; (8011844 <IMU_Update_Timer_Callback+0x290>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80116ee:	4a53      	ldr	r2, [pc, #332]	; (801183c <IMU_Update_Timer_Callback+0x288>)
 80116f0:	6812      	ldr	r2, [r2, #0]
 80116f2:	4955      	ldr	r1, [pc, #340]	; (8011848 <IMU_Update_Timer_Callback+0x294>)
 80116f4:	3340      	adds	r3, #64	; 0x40
 80116f6:	009b      	lsls	r3, r3, #2
 80116f8:	440b      	add	r3, r1
 80116fa:	601a      	str	r2, [r3, #0]
	Past_Acc[2][50 - FFT_Counter] = accez;
 80116fc:	4b51      	ldr	r3, [pc, #324]	; (8011844 <IMU_Update_Timer_Callback+0x290>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8011704:	4a4e      	ldr	r2, [pc, #312]	; (8011840 <IMU_Update_Timer_Callback+0x28c>)
 8011706:	6812      	ldr	r2, [r2, #0]
 8011708:	494f      	ldr	r1, [pc, #316]	; (8011848 <IMU_Update_Timer_Callback+0x294>)
 801170a:	3380      	adds	r3, #128	; 0x80
 801170c:	009b      	lsls	r3, r3, #2
 801170e:	440b      	add	r3, r1
 8011710:	601a      	str	r2, [r3, #0]

	// Calculate frequency energy
	if (FFT_Counter == 50){
 8011712:	4b4c      	ldr	r3, [pc, #304]	; (8011844 <IMU_Update_Timer_Callback+0x290>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	2b32      	cmp	r3, #50	; 0x32
 8011718:	d143      	bne.n	80117a2 <IMU_Update_Timer_Callback+0x1ee>
		FFT_Init(0);
 801171a:	2000      	movs	r0, #0
 801171c:	f7ef fc64 	bl	8000fe8 <FFT_Init>
		FFT(Past_Acc[0], 0);
 8011720:	2100      	movs	r1, #0
 8011722:	4849      	ldr	r0, [pc, #292]	; (8011848 <IMU_Update_Timer_Callback+0x294>)
 8011724:	f7ef fd48 	bl	80011b8 <FFT>
		FFT(Past_Acc[1], 1);
 8011728:	2101      	movs	r1, #1
 801172a:	4848      	ldr	r0, [pc, #288]	; (801184c <IMU_Update_Timer_Callback+0x298>)
 801172c:	f7ef fd44 	bl	80011b8 <FFT>
		FFT(Past_Acc[2], 2);
 8011730:	2102      	movs	r1, #2
 8011732:	4847      	ldr	r0, [pc, #284]	; (8011850 <IMU_Update_Timer_Callback+0x29c>)
 8011734:	f7ef fd40 	bl	80011b8 <FFT>
		Frequency_Energy(PWM_Status, Freq_Intensity);
 8011738:	4946      	ldr	r1, [pc, #280]	; (8011854 <IMU_Update_Timer_Callback+0x2a0>)
 801173a:	4847      	ldr	r0, [pc, #284]	; (8011858 <IMU_Update_Timer_Callback+0x2a4>)
 801173c:	f7ef ff20 	bl	8001580 <Frequency_Energy>
		FFT_Counter = 0;
 8011740:	4b40      	ldr	r3, [pc, #256]	; (8011844 <IMU_Update_Timer_Callback+0x290>)
 8011742:	2200      	movs	r2, #0
 8011744:	601a      	str	r2, [r3, #0]

		for(int index = 0; index < SAMPLERATE - 50; index++){
 8011746:	2300      	movs	r3, #0
 8011748:	603b      	str	r3, [r7, #0]
 801174a:	e027      	b.n	801179c <IMU_Update_Timer_Callback+0x1e8>
			Past_Acc[0][index + 50] = Past_Acc[0][index];
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	3332      	adds	r3, #50	; 0x32
 8011750:	493d      	ldr	r1, [pc, #244]	; (8011848 <IMU_Update_Timer_Callback+0x294>)
 8011752:	683a      	ldr	r2, [r7, #0]
 8011754:	0092      	lsls	r2, r2, #2
 8011756:	440a      	add	r2, r1
 8011758:	6812      	ldr	r2, [r2, #0]
 801175a:	493b      	ldr	r1, [pc, #236]	; (8011848 <IMU_Update_Timer_Callback+0x294>)
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	440b      	add	r3, r1
 8011760:	601a      	str	r2, [r3, #0]
			Past_Acc[1][index + 50] = Past_Acc[1][index];
 8011762:	683b      	ldr	r3, [r7, #0]
 8011764:	3332      	adds	r3, #50	; 0x32
 8011766:	4938      	ldr	r1, [pc, #224]	; (8011848 <IMU_Update_Timer_Callback+0x294>)
 8011768:	683a      	ldr	r2, [r7, #0]
 801176a:	3240      	adds	r2, #64	; 0x40
 801176c:	0092      	lsls	r2, r2, #2
 801176e:	440a      	add	r2, r1
 8011770:	6812      	ldr	r2, [r2, #0]
 8011772:	4935      	ldr	r1, [pc, #212]	; (8011848 <IMU_Update_Timer_Callback+0x294>)
 8011774:	3340      	adds	r3, #64	; 0x40
 8011776:	009b      	lsls	r3, r3, #2
 8011778:	440b      	add	r3, r1
 801177a:	601a      	str	r2, [r3, #0]
			Past_Acc[2][index + 50] = Past_Acc[2][index];
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	3332      	adds	r3, #50	; 0x32
 8011780:	4931      	ldr	r1, [pc, #196]	; (8011848 <IMU_Update_Timer_Callback+0x294>)
 8011782:	683a      	ldr	r2, [r7, #0]
 8011784:	3280      	adds	r2, #128	; 0x80
 8011786:	0092      	lsls	r2, r2, #2
 8011788:	440a      	add	r2, r1
 801178a:	6812      	ldr	r2, [r2, #0]
 801178c:	492e      	ldr	r1, [pc, #184]	; (8011848 <IMU_Update_Timer_Callback+0x294>)
 801178e:	3380      	adds	r3, #128	; 0x80
 8011790:	009b      	lsls	r3, r3, #2
 8011792:	440b      	add	r3, r1
 8011794:	601a      	str	r2, [r3, #0]
		for(int index = 0; index < SAMPLERATE - 50; index++){
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	3301      	adds	r3, #1
 801179a:	603b      	str	r3, [r7, #0]
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	2b0d      	cmp	r3, #13
 80117a0:	ddd4      	ble.n	801174c <IMU_Update_Timer_Callback+0x198>
	}
//	if (Calculate_ab(accex, accey, accez) == 1)
//		Calculate_Freq_Energy(PWM_Status);

	// Control PWM open
	if (((PWM_Status[1] & 0x07) == 0x07) || (Change_State_Force == 1 && PWM_Raise_Status == false)){
 80117a2:	4b2d      	ldr	r3, [pc, #180]	; (8011858 <IMU_Update_Timer_Callback+0x2a4>)
 80117a4:	785b      	ldrb	r3, [r3, #1]
 80117a6:	f003 0307 	and.w	r3, r3, #7
 80117aa:	2b07      	cmp	r3, #7
 80117ac:	d007      	beq.n	80117be <IMU_Update_Timer_Callback+0x20a>
 80117ae:	4b2b      	ldr	r3, [pc, #172]	; (801185c <IMU_Update_Timer_Callback+0x2a8>)
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	d10d      	bne.n	80117d2 <IMU_Update_Timer_Callback+0x21e>
 80117b6:	4b2a      	ldr	r3, [pc, #168]	; (8011860 <IMU_Update_Timer_Callback+0x2ac>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d109      	bne.n	80117d2 <IMU_Update_Timer_Callback+0x21e>
		PWM_Raise_Status = true;
 80117be:	4b28      	ldr	r3, [pc, #160]	; (8011860 <IMU_Update_Timer_Callback+0x2ac>)
 80117c0:	2201      	movs	r2, #1
 80117c2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80117c4:	2201      	movs	r2, #1
 80117c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80117ca:	4826      	ldr	r0, [pc, #152]	; (8011864 <IMU_Update_Timer_Callback+0x2b0>)
 80117cc:	f7f3 fa08 	bl	8004be0 <HAL_GPIO_WritePin>
 80117d0:	e016      	b.n	8011800 <IMU_Update_Timer_Callback+0x24c>
	}
	else if ((PWM_KEEP_TIME_COUNT >= PWM_KEEP_TIME) || (Change_State_Force == 1 && PWM_Raise_Status == true)){
 80117d2:	4b25      	ldr	r3, [pc, #148]	; (8011868 <IMU_Update_Timer_Callback+0x2b4>)
 80117d4:	681a      	ldr	r2, [r3, #0]
 80117d6:	4b25      	ldr	r3, [pc, #148]	; (801186c <IMU_Update_Timer_Callback+0x2b8>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	429a      	cmp	r2, r3
 80117dc:	da07      	bge.n	80117ee <IMU_Update_Timer_Callback+0x23a>
 80117de:	4b1f      	ldr	r3, [pc, #124]	; (801185c <IMU_Update_Timer_Callback+0x2a8>)
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	2b01      	cmp	r3, #1
 80117e4:	d10c      	bne.n	8011800 <IMU_Update_Timer_Callback+0x24c>
 80117e6:	4b1e      	ldr	r3, [pc, #120]	; (8011860 <IMU_Update_Timer_Callback+0x2ac>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	2b01      	cmp	r3, #1
 80117ec:	d108      	bne.n	8011800 <IMU_Update_Timer_Callback+0x24c>
		PWM_Raise_Status = false;
 80117ee:	4b1c      	ldr	r3, [pc, #112]	; (8011860 <IMU_Update_Timer_Callback+0x2ac>)
 80117f0:	2200      	movs	r2, #0
 80117f2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80117f4:	2200      	movs	r2, #0
 80117f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80117fa:	481a      	ldr	r0, [pc, #104]	; (8011864 <IMU_Update_Timer_Callback+0x2b0>)
 80117fc:	f7f3 f9f0 	bl	8004be0 <HAL_GPIO_WritePin>
	}

	// Count PWM raise times
	Clocks_Count += 1;
 8011800:	4b1b      	ldr	r3, [pc, #108]	; (8011870 <IMU_Update_Timer_Callback+0x2bc>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	3301      	adds	r3, #1
 8011806:	4a1a      	ldr	r2, [pc, #104]	; (8011870 <IMU_Update_Timer_Callback+0x2bc>)
 8011808:	6013      	str	r3, [r2, #0]

	// Count PWM keep time
	if (PWM_Raise_Status == true && ((PWM_Status[1] & 7) != 7))
 801180a:	4b15      	ldr	r3, [pc, #84]	; (8011860 <IMU_Update_Timer_Callback+0x2ac>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	2b01      	cmp	r3, #1
 8011810:	d130      	bne.n	8011874 <IMU_Update_Timer_Callback+0x2c0>
 8011812:	4b11      	ldr	r3, [pc, #68]	; (8011858 <IMU_Update_Timer_Callback+0x2a4>)
 8011814:	785b      	ldrb	r3, [r3, #1]
 8011816:	f003 0307 	and.w	r3, r3, #7
 801181a:	2b07      	cmp	r3, #7
 801181c:	d02a      	beq.n	8011874 <IMU_Update_Timer_Callback+0x2c0>
		PWM_KEEP_TIME_COUNT += 1;
 801181e:	4b12      	ldr	r3, [pc, #72]	; (8011868 <IMU_Update_Timer_Callback+0x2b4>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	3301      	adds	r3, #1
 8011824:	4a10      	ldr	r2, [pc, #64]	; (8011868 <IMU_Update_Timer_Callback+0x2b4>)
 8011826:	6013      	str	r3, [r2, #0]
 8011828:	e027      	b.n	801187a <IMU_Update_Timer_Callback+0x2c6>
 801182a:	bf00      	nop
 801182c:	200012dc 	.word	0x200012dc
 8011830:	2000136c 	.word	0x2000136c
 8011834:	40d00000 	.word	0x40d00000
 8011838:	20001504 	.word	0x20001504
 801183c:	20001508 	.word	0x20001508
 8011840:	2000150c 	.word	0x2000150c
 8011844:	200014fc 	.word	0x200014fc
 8011848:	20001510 	.word	0x20001510
 801184c:	20001610 	.word	0x20001610
 8011850:	20001710 	.word	0x20001710
 8011854:	200013ec 	.word	0x200013ec
 8011858:	200013dc 	.word	0x200013dc
 801185c:	20001500 	.word	0x20001500
 8011860:	200014f8 	.word	0x200014f8
 8011864:	48000800 	.word	0x48000800
 8011868:	200014f4 	.word	0x200014f4
 801186c:	200000f4 	.word	0x200000f4
 8011870:	200014f0 	.word	0x200014f0
	else
		PWM_KEEP_TIME_COUNT = 0;
 8011874:	4b3d      	ldr	r3, [pc, #244]	; (801196c <IMU_Update_Timer_Callback+0x3b8>)
 8011876:	2200      	movs	r2, #0
 8011878:	601a      	str	r2, [r3, #0]

	// Gradually change PWM duty cycle
	if (Clocks_Count == Clocks_Raise_Per_Value){
 801187a:	4b3d      	ldr	r3, [pc, #244]	; (8011970 <IMU_Update_Timer_Callback+0x3bc>)
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	4b3d      	ldr	r3, [pc, #244]	; (8011974 <IMU_Update_Timer_Callback+0x3c0>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	429a      	cmp	r2, r3
 8011884:	d140      	bne.n	8011908 <IMU_Update_Timer_Callback+0x354>
		if ((PWM_Raise_Status == true) && (PWM_CC1_ACTIVE_TIM < PWM_MAX_ACTIVE_TIM))
 8011886:	4b3c      	ldr	r3, [pc, #240]	; (8011978 <IMU_Update_Timer_Callback+0x3c4>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	2b01      	cmp	r3, #1
 801188c:	d10b      	bne.n	80118a6 <IMU_Update_Timer_Callback+0x2f2>
 801188e:	4b3b      	ldr	r3, [pc, #236]	; (801197c <IMU_Update_Timer_Callback+0x3c8>)
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	4b3b      	ldr	r3, [pc, #236]	; (8011980 <IMU_Update_Timer_Callback+0x3cc>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	429a      	cmp	r2, r3
 8011898:	da05      	bge.n	80118a6 <IMU_Update_Timer_Callback+0x2f2>
			PWM_CC1_ACTIVE_TIM += 1;
 801189a:	4b38      	ldr	r3, [pc, #224]	; (801197c <IMU_Update_Timer_Callback+0x3c8>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	3301      	adds	r3, #1
 80118a0:	4a36      	ldr	r2, [pc, #216]	; (801197c <IMU_Update_Timer_Callback+0x3c8>)
 80118a2:	6013      	str	r3, [r2, #0]
 80118a4:	e00e      	b.n	80118c4 <IMU_Update_Timer_Callback+0x310>
		else if ((PWM_Raise_Status == false) && (PWM_CC1_ACTIVE_TIM > PWM_MIN_ACTIVE_TIM))
 80118a6:	4b34      	ldr	r3, [pc, #208]	; (8011978 <IMU_Update_Timer_Callback+0x3c4>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d10a      	bne.n	80118c4 <IMU_Update_Timer_Callback+0x310>
 80118ae:	4b33      	ldr	r3, [pc, #204]	; (801197c <IMU_Update_Timer_Callback+0x3c8>)
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	4b34      	ldr	r3, [pc, #208]	; (8011984 <IMU_Update_Timer_Callback+0x3d0>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	429a      	cmp	r2, r3
 80118b8:	dd04      	ble.n	80118c4 <IMU_Update_Timer_Callback+0x310>
			PWM_CC1_ACTIVE_TIM -= 1;
 80118ba:	4b30      	ldr	r3, [pc, #192]	; (801197c <IMU_Update_Timer_Callback+0x3c8>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	3b01      	subs	r3, #1
 80118c0:	4a2e      	ldr	r2, [pc, #184]	; (801197c <IMU_Update_Timer_Callback+0x3c8>)
 80118c2:	6013      	str	r3, [r2, #0]

		if ((PWM_Raise_Status == true) && (PWM_CC2_ACTIVE_TIM < PWM_MAX_ACTIVE_TIM))
 80118c4:	4b2c      	ldr	r3, [pc, #176]	; (8011978 <IMU_Update_Timer_Callback+0x3c4>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	d10b      	bne.n	80118e4 <IMU_Update_Timer_Callback+0x330>
 80118cc:	4b2e      	ldr	r3, [pc, #184]	; (8011988 <IMU_Update_Timer_Callback+0x3d4>)
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	4b2b      	ldr	r3, [pc, #172]	; (8011980 <IMU_Update_Timer_Callback+0x3cc>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	429a      	cmp	r2, r3
 80118d6:	da05      	bge.n	80118e4 <IMU_Update_Timer_Callback+0x330>
			PWM_CC2_ACTIVE_TIM += 1;
 80118d8:	4b2b      	ldr	r3, [pc, #172]	; (8011988 <IMU_Update_Timer_Callback+0x3d4>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	3301      	adds	r3, #1
 80118de:	4a2a      	ldr	r2, [pc, #168]	; (8011988 <IMU_Update_Timer_Callback+0x3d4>)
 80118e0:	6013      	str	r3, [r2, #0]
 80118e2:	e00e      	b.n	8011902 <IMU_Update_Timer_Callback+0x34e>
		else if ((PWM_Raise_Status == false) && (PWM_CC2_ACTIVE_TIM > PWM_MIN_ACTIVE_TIM))
 80118e4:	4b24      	ldr	r3, [pc, #144]	; (8011978 <IMU_Update_Timer_Callback+0x3c4>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d10a      	bne.n	8011902 <IMU_Update_Timer_Callback+0x34e>
 80118ec:	4b26      	ldr	r3, [pc, #152]	; (8011988 <IMU_Update_Timer_Callback+0x3d4>)
 80118ee:	681a      	ldr	r2, [r3, #0]
 80118f0:	4b24      	ldr	r3, [pc, #144]	; (8011984 <IMU_Update_Timer_Callback+0x3d0>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	dd04      	ble.n	8011902 <IMU_Update_Timer_Callback+0x34e>
			PWM_CC2_ACTIVE_TIM -= 1;
 80118f8:	4b23      	ldr	r3, [pc, #140]	; (8011988 <IMU_Update_Timer_Callback+0x3d4>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	3b01      	subs	r3, #1
 80118fe:	4a22      	ldr	r2, [pc, #136]	; (8011988 <IMU_Update_Timer_Callback+0x3d4>)
 8011900:	6013      	str	r3, [r2, #0]

		Clocks_Count = 0;
 8011902:	4b1b      	ldr	r3, [pc, #108]	; (8011970 <IMU_Update_Timer_Callback+0x3bc>)
 8011904:	2200      	movs	r2, #0
 8011906:	601a      	str	r2, [r3, #0]
	}

	// Test Code
	*(PWM_Status + 2) = PWM_Raise_Status;;
 8011908:	4b1b      	ldr	r3, [pc, #108]	; (8011978 <IMU_Update_Timer_Callback+0x3c4>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	b2da      	uxtb	r2, r3
 801190e:	4b1f      	ldr	r3, [pc, #124]	; (801198c <IMU_Update_Timer_Callback+0x3d8>)
 8011910:	709a      	strb	r2, [r3, #2]
	PWM_Status_mem = (int *)(PWM_Status + 3);
 8011912:	4a1f      	ldr	r2, [pc, #124]	; (8011990 <IMU_Update_Timer_Callback+0x3dc>)
 8011914:	4b1f      	ldr	r3, [pc, #124]	; (8011994 <IMU_Update_Timer_Callback+0x3e0>)
 8011916:	601a      	str	r2, [r3, #0]
	*(PWM_Status_mem + 0) = PWM_CC1_ACTIVE_TIM;  // 980 ~ 1300
 8011918:	4b1e      	ldr	r3, [pc, #120]	; (8011994 <IMU_Update_Timer_Callback+0x3e0>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	4a17      	ldr	r2, [pc, #92]	; (801197c <IMU_Update_Timer_Callback+0x3c8>)
 801191e:	6812      	ldr	r2, [r2, #0]
 8011920:	601a      	str	r2, [r3, #0]
	*(PWM_Status_mem + 1) = PWM_CC2_ACTIVE_TIM;  // 980 ~ 1300
 8011922:	4b1c      	ldr	r3, [pc, #112]	; (8011994 <IMU_Update_Timer_Callback+0x3e0>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	3304      	adds	r3, #4
 8011928:	4a17      	ldr	r2, [pc, #92]	; (8011988 <IMU_Update_Timer_Callback+0x3d4>)
 801192a:	6812      	ldr	r2, [r2, #0]
 801192c:	601a      	str	r2, [r3, #0]
	*(PWM_Status_mem + 2) = PWM_KEEP_TIME_COUNT;  // PWM_Keep_Time_Count
 801192e:	4b19      	ldr	r3, [pc, #100]	; (8011994 <IMU_Update_Timer_Callback+0x3e0>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	3308      	adds	r3, #8
 8011934:	4a0d      	ldr	r2, [pc, #52]	; (801196c <IMU_Update_Timer_Callback+0x3b8>)
 8011936:	6812      	ldr	r2, [r2, #0]
 8011938:	601a      	str	r2, [r3, #0]

	TIM1->CCR1 = PWM_CC1_ACTIVE_TIM;
 801193a:	4b10      	ldr	r3, [pc, #64]	; (801197c <IMU_Update_Timer_Callback+0x3c8>)
 801193c:	681a      	ldr	r2, [r3, #0]
 801193e:	4b16      	ldr	r3, [pc, #88]	; (8011998 <IMU_Update_Timer_Callback+0x3e4>)
 8011940:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = PWM_CC2_ACTIVE_TIM;
 8011942:	4b11      	ldr	r3, [pc, #68]	; (8011988 <IMU_Update_Timer_Callback+0x3d4>)
 8011944:	681a      	ldr	r2, [r3, #0]
 8011946:	4b14      	ldr	r3, [pc, #80]	; (8011998 <IMU_Update_Timer_Callback+0x3e4>)
 8011948:	639a      	str	r2, [r3, #56]	; 0x38
	Change_State_Force = 0;
 801194a:	4b14      	ldr	r3, [pc, #80]	; (801199c <IMU_Update_Timer_Callback+0x3e8>)
 801194c:	2200      	movs	r2, #0
 801194e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8011950:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011954:	4812      	ldr	r0, [pc, #72]	; (80119a0 <IMU_Update_Timer_Callback+0x3ec>)
 8011956:	f7f3 f95b 	bl	8004c10 <HAL_GPIO_TogglePin>
	UTIL_SEQ_SetTask(1 << CFG_IMU_TASK_UPDATE, CFG_SCH_PRIO_0);
 801195a:	2100      	movs	r1, #0
 801195c:	2004      	movs	r0, #4
 801195e:	f001 fa65 	bl	8012e2c <UTIL_SEQ_SetTask>
}
 8011962:	bf00      	nop
 8011964:	3710      	adds	r7, #16
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}
 801196a:	bf00      	nop
 801196c:	200014f4 	.word	0x200014f4
 8011970:	200014f0 	.word	0x200014f0
 8011974:	200000f0 	.word	0x200000f0
 8011978:	200014f8 	.word	0x200014f8
 801197c:	20000104 	.word	0x20000104
 8011980:	200000fc 	.word	0x200000fc
 8011984:	20000100 	.word	0x20000100
 8011988:	20000108 	.word	0x20000108
 801198c:	200013dc 	.word	0x200013dc
 8011990:	200013df 	.word	0x200013df
 8011994:	200014ec 	.word	0x200014ec
 8011998:	40012c00 	.word	0x40012c00
 801199c:	20001500 	.word	0x20001500
 80119a0:	48000800 	.word	0x48000800

080119a4 <IMU_task>:

static void IMU_task(){
 80119a4:	b598      	push	{r3, r4, r7, lr}
 80119a6:	af00      	add	r7, sp, #0
	memcpy((UpdateCharData + 4), IMU_Status, 15);
 80119a8:	4b0f      	ldr	r3, [pc, #60]	; (80119e8 <IMU_task+0x44>)
 80119aa:	220f      	movs	r2, #15
 80119ac:	490f      	ldr	r1, [pc, #60]	; (80119ec <IMU_task+0x48>)
 80119ae:	4618      	mov	r0, r3
 80119b0:	f001 fb88 	bl	80130c4 <memcpy>
//	memcpy((UpdateCharData + 7), (IMU_Status + 9), 6);
//	memcpy((UpdateCharData + 13), (IMU_Status + 109), 6);

//	memcpy((UpdateCharData + 4), IMU_Status, 15);
//	memcpy((UpdateCharData + 4), IMU_Status, 23);  // Read include magnetometer data
	memcpy((UpdateCharData + 23), (IMU_q + 16), 96);
 80119b4:	4b0e      	ldr	r3, [pc, #56]	; (80119f0 <IMU_task+0x4c>)
 80119b6:	490f      	ldr	r1, [pc, #60]	; (80119f4 <IMU_task+0x50>)
 80119b8:	2260      	movs	r2, #96	; 0x60
 80119ba:	4618      	mov	r0, r3
 80119bc:	f001 fb82 	bl	80130c4 <memcpy>
	memcpy((UpdateCharData + 119), PWM_Status, 15);
 80119c0:	4a0d      	ldr	r2, [pc, #52]	; (80119f8 <IMU_task+0x54>)
 80119c2:	4b0e      	ldr	r3, [pc, #56]	; (80119fc <IMU_task+0x58>)
 80119c4:	4614      	mov	r4, r2
 80119c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80119c8:	6020      	str	r0, [r4, #0]
 80119ca:	6061      	str	r1, [r4, #4]
 80119cc:	60a2      	str	r2, [r4, #8]
 80119ce:	881a      	ldrh	r2, [r3, #0]
 80119d0:	789b      	ldrb	r3, [r3, #2]
 80119d2:	81a2      	strh	r2, [r4, #12]
 80119d4:	73a3      	strb	r3, [r4, #14]
	Custom_Imu_Update_Char();
 80119d6:	f000 f815 	bl	8011a04 <Custom_Imu_Update_Char>
	CDC_Transmit_FS(UpdateCharData, sizeof(uint8_t) * 140);
 80119da:	218c      	movs	r1, #140	; 0x8c
 80119dc:	4808      	ldr	r0, [pc, #32]	; (8011a00 <IMU_task+0x5c>)
 80119de:	f000 fc23 	bl	8012228 <CDC_Transmit_FS>
}
 80119e2:	bf00      	nop
 80119e4:	bd98      	pop	{r3, r4, r7, pc}
 80119e6:	bf00      	nop
 80119e8:	200011e8 	.word	0x200011e8
 80119ec:	200012dc 	.word	0x200012dc
 80119f0:	200011fb 	.word	0x200011fb
 80119f4:	2000137c 	.word	0x2000137c
 80119f8:	2000125b 	.word	0x2000125b
 80119fc:	200013dc 	.word	0x200013dc
 8011a00:	200011e4 	.word	0x200011e4

08011a04 <Custom_Imu_Update_Char>:
 *
 *************************************************************/

/* IMU_Data */
void Custom_Imu_Update_Char(void) /* Property Read */
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Imu_UC_1*/

  updateflag = 1;
 8011a0e:	2301      	movs	r3, #1
 8011a10:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END Imu_UC_1*/

  if (updateflag != 0)
 8011a12:	79fb      	ldrb	r3, [r7, #7]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d004      	beq.n	8011a22 <Custom_Imu_Update_Char+0x1e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_IMU, (uint8_t *)UpdateCharData);
 8011a18:	4904      	ldr	r1, [pc, #16]	; (8011a2c <Custom_Imu_Update_Char+0x28>)
 8011a1a:	2000      	movs	r0, #0
 8011a1c:	f000 f8da 	bl	8011bd4 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Imu_UC_Last*/

  /* USER CODE END Imu_UC_Last*/
  return;
 8011a20:	bf00      	nop
 8011a22:	bf00      	nop
}
 8011a24:	3708      	adds	r7, #8
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}
 8011a2a:	bf00      	nop
 8011a2c:	200011e4 	.word	0x200011e4

08011a30 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b08a      	sub	sp, #40	; 0x28
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	3301      	adds	r3, #1
 8011a42:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8011a44:	6a3b      	ldr	r3, [r7, #32]
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	2bff      	cmp	r3, #255	; 0xff
 8011a4a:	d142      	bne.n	8011ad2 <Custom_STM_Event_Handler+0xa2>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8011a4c:	6a3b      	ldr	r3, [r7, #32]
 8011a4e:	3302      	adds	r3, #2
 8011a50:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8011a52:	69fb      	ldr	r3, [r7, #28]
 8011a54:	881b      	ldrh	r3, [r3, #0]
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	f640 4214 	movw	r2, #3092	; 0xc14
 8011a5c:	4293      	cmp	r3, r2
 8011a5e:	d032      	beq.n	8011ac6 <Custom_STM_Event_Handler+0x96>
 8011a60:	f640 4214 	movw	r2, #3092	; 0xc14
 8011a64:	4293      	cmp	r3, r2
 8011a66:	dc30      	bgt.n	8011aca <Custom_STM_Event_Handler+0x9a>
 8011a68:	f640 4201 	movw	r2, #3073	; 0xc01
 8011a6c:	4293      	cmp	r3, r2
 8011a6e:	d003      	beq.n	8011a78 <Custom_STM_Event_Handler+0x48>
 8011a70:	f640 4213 	movw	r2, #3091	; 0xc13
 8011a74:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8011a76:	e02b      	b.n	8011ad0 <Custom_STM_Event_Handler+0xa0>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	3302      	adds	r3, #2
 8011a7c:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomImuHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8011a7e:	69bb      	ldr	r3, [r7, #24]
 8011a80:	885b      	ldrh	r3, [r3, #2]
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	461a      	mov	r2, r3
 8011a86:	4b16      	ldr	r3, [pc, #88]	; (8011ae0 <Custom_STM_Event_Handler+0xb0>)
 8011a88:	885b      	ldrh	r3, [r3, #2]
 8011a8a:	3302      	adds	r3, #2
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d11e      	bne.n	8011ace <Custom_STM_Event_Handler+0x9e>
            return_value = SVCCTL_EvtAckFlowEnable;
 8011a90:	2301      	movs	r3, #1
 8011a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	7a1b      	ldrb	r3, [r3, #8]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d002      	beq.n	8011aa4 <Custom_STM_Event_Handler+0x74>
 8011a9e:	2b01      	cmp	r3, #1
 8011aa0:	d008      	beq.n	8011ab4 <Custom_STM_Event_Handler+0x84>
              break;
 8011aa2:	e00f      	b.n	8011ac4 <Custom_STM_Event_Handler+0x94>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_IMU_NOTIFY_DISABLED_EVT;
 8011aa4:	2302      	movs	r3, #2
 8011aa6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011aa8:	f107 0308 	add.w	r3, r7, #8
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7ff fcca 	bl	8011446 <Custom_STM_App_Notification>
                break;
 8011ab2:	e007      	b.n	8011ac4 <Custom_STM_Event_Handler+0x94>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_IMU_NOTIFY_ENABLED_EVT;
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011ab8:	f107 0308 	add.w	r3, r7, #8
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7ff fcc2 	bl	8011446 <Custom_STM_App_Notification>
                break;
 8011ac2:	bf00      	nop
          break;
 8011ac4:	e003      	b.n	8011ace <Custom_STM_Event_Handler+0x9e>
          break;
 8011ac6:	bf00      	nop
 8011ac8:	e004      	b.n	8011ad4 <Custom_STM_Event_Handler+0xa4>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8011aca:	bf00      	nop
 8011acc:	e002      	b.n	8011ad4 <Custom_STM_Event_Handler+0xa4>
          break;
 8011ace:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8011ad0:	e000      	b.n	8011ad4 <Custom_STM_Event_Handler+0xa4>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8011ad2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8011ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3728      	adds	r7, #40	; 0x28
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd80      	pop	{r7, pc}
 8011ae0:	20001810 	.word	0x20001810

08011ae4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b08c      	sub	sp, #48	; 0x30
 8011ae8:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011aea:	2392      	movs	r3, #146	; 0x92
 8011aec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8011aee:	4835      	ldr	r0, [pc, #212]	; (8011bc4 <SVCCTL_InitCustomSvc+0xe0>)
 8011af0:	f7fe fa58 	bl	800ffa4 <SVCCTL_RegisterSvcHandler>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 8011af4:	2304      	movs	r3, #4
 8011af6:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_IMU_DATA_UUID(uuid.Char_UUID_128);
 8011af8:	238f      	movs	r3, #143	; 0x8f
 8011afa:	713b      	strb	r3, [r7, #4]
 8011afc:	23e5      	movs	r3, #229	; 0xe5
 8011afe:	717b      	strb	r3, [r7, #5]
 8011b00:	23b3      	movs	r3, #179	; 0xb3
 8011b02:	71bb      	strb	r3, [r7, #6]
 8011b04:	23d5      	movs	r3, #213	; 0xd5
 8011b06:	71fb      	strb	r3, [r7, #7]
 8011b08:	232e      	movs	r3, #46	; 0x2e
 8011b0a:	723b      	strb	r3, [r7, #8]
 8011b0c:	237f      	movs	r3, #127	; 0x7f
 8011b0e:	727b      	strb	r3, [r7, #9]
 8011b10:	234a      	movs	r3, #74	; 0x4a
 8011b12:	72bb      	strb	r3, [r7, #10]
 8011b14:	2398      	movs	r3, #152	; 0x98
 8011b16:	72fb      	strb	r3, [r7, #11]
 8011b18:	232a      	movs	r3, #42	; 0x2a
 8011b1a:	733b      	strb	r3, [r7, #12]
 8011b1c:	2348      	movs	r3, #72	; 0x48
 8011b1e:	737b      	strb	r3, [r7, #13]
 8011b20:	237a      	movs	r3, #122	; 0x7a
 8011b22:	73bb      	strb	r3, [r7, #14]
 8011b24:	23cc      	movs	r3, #204	; 0xcc
 8011b26:	73fb      	strb	r3, [r7, #15]
 8011b28:	2334      	movs	r3, #52	; 0x34
 8011b2a:	743b      	strb	r3, [r7, #16]
 8011b2c:	2312      	movs	r3, #18
 8011b2e:	747b      	strb	r3, [r7, #17]
 8011b30:	2300      	movs	r3, #0
 8011b32:	74bb      	strb	r3, [r7, #18]
 8011b34:	2300      	movs	r3, #0
 8011b36:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8011b38:	7dbb      	ldrb	r3, [r7, #22]
 8011b3a:	1d39      	adds	r1, r7, #4
 8011b3c:	4a22      	ldr	r2, [pc, #136]	; (8011bc8 <SVCCTL_InitCustomSvc+0xe4>)
 8011b3e:	9200      	str	r2, [sp, #0]
 8011b40:	2201      	movs	r2, #1
 8011b42:	2002      	movs	r0, #2
 8011b44:	f7fd fcf6 	bl	800f534 <aci_gatt_add_service>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  IMU
   */
  COPY_IMU_UUID(uuid.Char_UUID_128);
 8011b4c:	2319      	movs	r3, #25
 8011b4e:	713b      	strb	r3, [r7, #4]
 8011b50:	23ed      	movs	r3, #237	; 0xed
 8011b52:	717b      	strb	r3, [r7, #5]
 8011b54:	2382      	movs	r3, #130	; 0x82
 8011b56:	71bb      	strb	r3, [r7, #6]
 8011b58:	23ae      	movs	r3, #174	; 0xae
 8011b5a:	71fb      	strb	r3, [r7, #7]
 8011b5c:	23ed      	movs	r3, #237	; 0xed
 8011b5e:	723b      	strb	r3, [r7, #8]
 8011b60:	2321      	movs	r3, #33	; 0x21
 8011b62:	727b      	strb	r3, [r7, #9]
 8011b64:	234c      	movs	r3, #76	; 0x4c
 8011b66:	72bb      	strb	r3, [r7, #10]
 8011b68:	239d      	movs	r3, #157	; 0x9d
 8011b6a:	72fb      	strb	r3, [r7, #11]
 8011b6c:	2341      	movs	r3, #65	; 0x41
 8011b6e:	733b      	strb	r3, [r7, #12]
 8011b70:	2345      	movs	r3, #69	; 0x45
 8011b72:	737b      	strb	r3, [r7, #13]
 8011b74:	2322      	movs	r3, #34	; 0x22
 8011b76:	73bb      	strb	r3, [r7, #14]
 8011b78:	238e      	movs	r3, #142	; 0x8e
 8011b7a:	73fb      	strb	r3, [r7, #15]
 8011b7c:	2378      	movs	r3, #120	; 0x78
 8011b7e:	743b      	strb	r3, [r7, #16]
 8011b80:	2356      	movs	r3, #86	; 0x56
 8011b82:	747b      	strb	r3, [r7, #17]
 8011b84:	2300      	movs	r3, #0
 8011b86:	74bb      	strb	r3, [r7, #18]
 8011b88:	2300      	movs	r3, #0
 8011b8a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomImu_DataHdle,
 8011b8c:	4b0e      	ldr	r3, [pc, #56]	; (8011bc8 <SVCCTL_InitCustomSvc+0xe4>)
 8011b8e:	8818      	ldrh	r0, [r3, #0]
 8011b90:	4b0e      	ldr	r3, [pc, #56]	; (8011bcc <SVCCTL_InitCustomSvc+0xe8>)
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	1d3a      	adds	r2, r7, #4
 8011b98:	490d      	ldr	r1, [pc, #52]	; (8011bd0 <SVCCTL_InitCustomSvc+0xec>)
 8011b9a:	9105      	str	r1, [sp, #20]
 8011b9c:	2100      	movs	r1, #0
 8011b9e:	9104      	str	r1, [sp, #16]
 8011ba0:	2110      	movs	r1, #16
 8011ba2:	9103      	str	r1, [sp, #12]
 8011ba4:	2100      	movs	r1, #0
 8011ba6:	9102      	str	r1, [sp, #8]
 8011ba8:	2100      	movs	r1, #0
 8011baa:	9101      	str	r1, [sp, #4]
 8011bac:	2112      	movs	r1, #18
 8011bae:	9100      	str	r1, [sp, #0]
 8011bb0:	2102      	movs	r1, #2
 8011bb2:	f7fd fd95 	bl	800f6e0 <aci_gatt_add_char>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8011bba:	bf00      	nop
}
 8011bbc:	3718      	adds	r7, #24
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	08011a31 	.word	0x08011a31
 8011bc8:	20001810 	.word	0x20001810
 8011bcc:	2000010c 	.word	0x2000010c
 8011bd0:	20001812 	.word	0x20001812

08011bd4 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b086      	sub	sp, #24
 8011bd8:	af02      	add	r7, sp, #8
 8011bda:	4603      	mov	r3, r0
 8011bdc:	6039      	str	r1, [r7, #0]
 8011bde:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011be0:	2392      	movs	r3, #146	; 0x92
 8011be2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8011be4:	79fb      	ldrb	r3, [r7, #7]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d10e      	bne.n	8011c08 <Custom_STM_App_Update_Char+0x34>
  {

    case CUSTOM_STM_IMU:
      ret = aci_gatt_update_char_value(CustomContext.CustomImu_DataHdle,
 8011bea:	4b0a      	ldr	r3, [pc, #40]	; (8011c14 <Custom_STM_App_Update_Char+0x40>)
 8011bec:	8818      	ldrh	r0, [r3, #0]
 8011bee:	4b09      	ldr	r3, [pc, #36]	; (8011c14 <Custom_STM_App_Update_Char+0x40>)
 8011bf0:	8859      	ldrh	r1, [r3, #2]
 8011bf2:	4b09      	ldr	r3, [pc, #36]	; (8011c18 <Custom_STM_App_Update_Char+0x44>)
 8011bf4:	781a      	ldrb	r2, [r3, #0]
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	9300      	str	r3, [sp, #0]
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	f7fd fe77 	bl	800f8f0 <aci_gatt_update_char_value>
 8011c02:	4603      	mov	r3, r0
 8011c04:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value IMU command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8011c06:	e000      	b.n	8011c0a <Custom_STM_App_Update_Char+0x36>

    default:
      break;
 8011c08:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8011c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3710      	adds	r7, #16
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}
 8011c14:	20001810 	.word	0x20001810
 8011c18:	2000010c 	.word	0x2000010c

08011c1c <LL_PWR_EnableBootC2>:
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8011c20:	4b05      	ldr	r3, [pc, #20]	; (8011c38 <LL_PWR_EnableBootC2+0x1c>)
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	4a04      	ldr	r2, [pc, #16]	; (8011c38 <LL_PWR_EnableBootC2+0x1c>)
 8011c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c2a:	60d3      	str	r3, [r2, #12]
}
 8011c2c:	bf00      	nop
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop
 8011c38:	58000400 	.word	0x58000400

08011c3c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8011c3c:	b480      	push	{r7}
 8011c3e:	b083      	sub	sp, #12
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8011c44:	4b06      	ldr	r3, [pc, #24]	; (8011c60 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8011c46:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8011c4a:	4905      	ldr	r1, [pc, #20]	; (8011c60 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	4313      	orrs	r3, r2
 8011c50:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8011c54:	bf00      	nop
 8011c56:	370c      	adds	r7, #12
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5e:	4770      	bx	lr
 8011c60:	58000800 	.word	0x58000800

08011c64 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8011c64:	b480      	push	{r7}
 8011c66:	b083      	sub	sp, #12
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8011c6c:	4b05      	ldr	r3, [pc, #20]	; (8011c84 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8011c6e:	6a1a      	ldr	r2, [r3, #32]
 8011c70:	4904      	ldr	r1, [pc, #16]	; (8011c84 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	4313      	orrs	r3, r2
 8011c76:	620b      	str	r3, [r1, #32]
}
 8011c78:	bf00      	nop
 8011c7a:	370c      	adds	r7, #12
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c82:	4770      	bx	lr
 8011c84:	58000800 	.word	0x58000800

08011c88 <LL_AHB3_GRP1_EnableClock>:
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b085      	sub	sp, #20
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8011c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	4313      	orrs	r3, r2
 8011c9e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8011ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011ca4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	4013      	ands	r3, r2
 8011caa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011cac:	68fb      	ldr	r3, [r7, #12]
}
 8011cae:	bf00      	nop
 8011cb0:	3714      	adds	r7, #20
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb8:	4770      	bx	lr

08011cba <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8011cba:	b480      	push	{r7}
 8011cbc:	b085      	sub	sp, #20
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8011cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011cc6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8011cca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	4313      	orrs	r3, r2
 8011cd2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8011cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011cda:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	4013      	ands	r3, r2
 8011ce2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011ce4:	68fb      	ldr	r3, [r7, #12]
}
 8011ce6:	bf00      	nop
 8011ce8:	3714      	adds	r7, #20
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr

08011cf2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8011cf2:	b480      	push	{r7}
 8011cf4:	b083      	sub	sp, #12
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	601a      	str	r2, [r3, #0]
}
 8011d06:	bf00      	nop
 8011d08:	370c      	adds	r7, #12
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d10:	4770      	bx	lr

08011d12 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8011d12:	b480      	push	{r7}
 8011d14:	b083      	sub	sp, #12
 8011d16:	af00      	add	r7, sp, #0
 8011d18:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f043 0201 	orr.w	r2, r3, #1
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	601a      	str	r2, [r3, #0]
}
 8011d26:	bf00      	nop
 8011d28:	370c      	adds	r7, #12
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d30:	4770      	bx	lr

08011d32 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8011d32:	b480      	push	{r7}
 8011d34:	b083      	sub	sp, #12
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	6078      	str	r0, [r7, #4]
 8011d3a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	685a      	ldr	r2, [r3, #4]
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	041b      	lsls	r3, r3, #16
 8011d44:	43db      	mvns	r3, r3
 8011d46:	401a      	ands	r2, r3
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	605a      	str	r2, [r3, #4]
}
 8011d4c:	bf00      	nop
 8011d4e:	370c      	adds	r7, #12
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr

08011d58 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b083      	sub	sp, #12
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	685a      	ldr	r2, [r3, #4]
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	041b      	lsls	r3, r3, #16
 8011d6a:	431a      	orrs	r2, r3
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	605a      	str	r2, [r3, #4]
}
 8011d70:	bf00      	nop
 8011d72:	370c      	adds	r7, #12
 8011d74:	46bd      	mov	sp, r7
 8011d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7a:	4770      	bx	lr

08011d7c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8011d7c:	b480      	push	{r7}
 8011d7e:	b083      	sub	sp, #12
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	685a      	ldr	r2, [r3, #4]
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	43db      	mvns	r3, r3
 8011d8e:	401a      	ands	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	605a      	str	r2, [r3, #4]
}
 8011d94:	bf00      	nop
 8011d96:	370c      	adds	r7, #12
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr

08011da0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8011da0:	b480      	push	{r7}
 8011da2:	b083      	sub	sp, #12
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	683a      	ldr	r2, [r7, #0]
 8011dae:	609a      	str	r2, [r3, #8]
}
 8011db0:	bf00      	nop
 8011db2:	370c      	adds	r7, #12
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr

08011dbc <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8011dbc:	b480      	push	{r7}
 8011dbe:	b083      	sub	sp, #12
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	041a      	lsls	r2, r3, #16
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	609a      	str	r2, [r3, #8]
}
 8011dce:	bf00      	nop
 8011dd0:	370c      	adds	r7, #12
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd8:	4770      	bx	lr

08011dda <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8011dda:	b480      	push	{r7}
 8011ddc:	b083      	sub	sp, #12
 8011dde:	af00      	add	r7, sp, #0
 8011de0:	6078      	str	r0, [r7, #4]
 8011de2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	68da      	ldr	r2, [r3, #12]
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	4013      	ands	r3, r2
 8011dec:	683a      	ldr	r2, [r7, #0]
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d101      	bne.n	8011df6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8011df2:	2301      	movs	r3, #1
 8011df4:	e000      	b.n	8011df8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8011df6:	2300      	movs	r3, #0
}
 8011df8:	4618      	mov	r0, r3
 8011dfa:	370c      	adds	r7, #12
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr

08011e04 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	69da      	ldr	r2, [r3, #28]
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	4013      	ands	r3, r2
 8011e16:	683a      	ldr	r2, [r7, #0]
 8011e18:	429a      	cmp	r2, r3
 8011e1a:	d101      	bne.n	8011e20 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	e000      	b.n	8011e22 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8011e20:	2300      	movs	r3, #0
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	370c      	adds	r7, #12
 8011e26:	46bd      	mov	sp, r7
 8011e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2c:	4770      	bx	lr
	...

08011e30 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8011e34:	2102      	movs	r1, #2
 8011e36:	4818      	ldr	r0, [pc, #96]	; (8011e98 <HW_IPCC_Rx_Handler+0x68>)
 8011e38:	f7ff ffe4 	bl	8011e04 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d008      	beq.n	8011e54 <HW_IPCC_Rx_Handler+0x24>
 8011e42:	4b15      	ldr	r3, [pc, #84]	; (8011e98 <HW_IPCC_Rx_Handler+0x68>)
 8011e44:	685b      	ldr	r3, [r3, #4]
 8011e46:	f003 0302 	and.w	r3, r3, #2
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d102      	bne.n	8011e54 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8011e4e:	f000 f8d5 	bl	8011ffc <HW_IPCC_SYS_EvtHandler>
 8011e52:	e01e      	b.n	8011e92 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8011e54:	2101      	movs	r1, #1
 8011e56:	4810      	ldr	r0, [pc, #64]	; (8011e98 <HW_IPCC_Rx_Handler+0x68>)
 8011e58:	f7ff ffd4 	bl	8011e04 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d008      	beq.n	8011e74 <HW_IPCC_Rx_Handler+0x44>
 8011e62:	4b0d      	ldr	r3, [pc, #52]	; (8011e98 <HW_IPCC_Rx_Handler+0x68>)
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	f003 0301 	and.w	r3, r3, #1
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d102      	bne.n	8011e74 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8011e6e:	f000 f889 	bl	8011f84 <HW_IPCC_BLE_EvtHandler>
 8011e72:	e00e      	b.n	8011e92 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8011e74:	2108      	movs	r1, #8
 8011e76:	4808      	ldr	r0, [pc, #32]	; (8011e98 <HW_IPCC_Rx_Handler+0x68>)
 8011e78:	f7ff ffc4 	bl	8011e04 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d008      	beq.n	8011e94 <HW_IPCC_Rx_Handler+0x64>
 8011e82:	4b05      	ldr	r3, [pc, #20]	; (8011e98 <HW_IPCC_Rx_Handler+0x68>)
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	f003 0308 	and.w	r3, r3, #8
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d102      	bne.n	8011e94 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8011e8e:	f000 f901 	bl	8012094 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8011e92:	bf00      	nop
 8011e94:	bf00      	nop
}
 8011e96:	bd80      	pop	{r7, pc}
 8011e98:	58000c00 	.word	0x58000c00

08011e9c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8011ea0:	2102      	movs	r1, #2
 8011ea2:	4818      	ldr	r0, [pc, #96]	; (8011f04 <HW_IPCC_Tx_Handler+0x68>)
 8011ea4:	f7ff ff99 	bl	8011dda <LL_C1_IPCC_IsActiveFlag_CHx>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d108      	bne.n	8011ec0 <HW_IPCC_Tx_Handler+0x24>
 8011eae:	4b15      	ldr	r3, [pc, #84]	; (8011f04 <HW_IPCC_Tx_Handler+0x68>)
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d102      	bne.n	8011ec0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8011eba:	f000 f893 	bl	8011fe4 <HW_IPCC_SYS_CmdEvtHandler>
 8011ebe:	e01e      	b.n	8011efe <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8011ec0:	2108      	movs	r1, #8
 8011ec2:	4810      	ldr	r0, [pc, #64]	; (8011f04 <HW_IPCC_Tx_Handler+0x68>)
 8011ec4:	f7ff ff89 	bl	8011dda <LL_C1_IPCC_IsActiveFlag_CHx>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d108      	bne.n	8011ee0 <HW_IPCC_Tx_Handler+0x44>
 8011ece:	4b0d      	ldr	r3, [pc, #52]	; (8011f04 <HW_IPCC_Tx_Handler+0x68>)
 8011ed0:	685b      	ldr	r3, [r3, #4]
 8011ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d102      	bne.n	8011ee0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8011eda:	f000 f8bd 	bl	8012058 <HW_IPCC_MM_FreeBufHandler>
 8011ede:	e00e      	b.n	8011efe <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8011ee0:	2120      	movs	r1, #32
 8011ee2:	4808      	ldr	r0, [pc, #32]	; (8011f04 <HW_IPCC_Tx_Handler+0x68>)
 8011ee4:	f7ff ff79 	bl	8011dda <LL_C1_IPCC_IsActiveFlag_CHx>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d108      	bne.n	8011f00 <HW_IPCC_Tx_Handler+0x64>
 8011eee:	4b05      	ldr	r3, [pc, #20]	; (8011f04 <HW_IPCC_Tx_Handler+0x68>)
 8011ef0:	685b      	ldr	r3, [r3, #4]
 8011ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d102      	bne.n	8011f00 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8011efa:	f000 f84f 	bl	8011f9c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8011efe:	bf00      	nop
 8011f00:	bf00      	nop
}
 8011f02:	bd80      	pop	{r7, pc}
 8011f04:	58000c00 	.word	0x58000c00

08011f08 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8011f0c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011f10:	f7ff fed3 	bl	8011cba <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8011f14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011f18:	f7ff fea4 	bl	8011c64 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8011f1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011f20:	f7ff fe8c 	bl	8011c3c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8011f24:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8011f26:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8011f28:	f7ff fe78 	bl	8011c1c <LL_PWR_EnableBootC2>

  return;
 8011f2c:	bf00      	nop
}
 8011f2e:	bd80      	pop	{r7, pc}

08011f30 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8011f34:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011f38:	f7ff fea6 	bl	8011c88 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8011f3c:	4806      	ldr	r0, [pc, #24]	; (8011f58 <HW_IPCC_Init+0x28>)
 8011f3e:	f7ff fee8 	bl	8011d12 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8011f42:	4805      	ldr	r0, [pc, #20]	; (8011f58 <HW_IPCC_Init+0x28>)
 8011f44:	f7ff fed5 	bl	8011cf2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8011f48:	202c      	movs	r0, #44	; 0x2c
 8011f4a:	f7f2 fc7c 	bl	8004846 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8011f4e:	202d      	movs	r0, #45	; 0x2d
 8011f50:	f7f2 fc79 	bl	8004846 <HAL_NVIC_EnableIRQ>

  return;
 8011f54:	bf00      	nop
}
 8011f56:	bd80      	pop	{r7, pc}
 8011f58:	58000c00 	.word	0x58000c00

08011f5c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8011f60:	2101      	movs	r1, #1
 8011f62:	4802      	ldr	r0, [pc, #8]	; (8011f6c <HW_IPCC_BLE_Init+0x10>)
 8011f64:	f7ff ff0a 	bl	8011d7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011f68:	bf00      	nop
}
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	58000c00 	.word	0x58000c00

08011f70 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8011f74:	2101      	movs	r1, #1
 8011f76:	4802      	ldr	r0, [pc, #8]	; (8011f80 <HW_IPCC_BLE_SendCmd+0x10>)
 8011f78:	f7ff ff20 	bl	8011dbc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011f7c:	bf00      	nop
}
 8011f7e:	bd80      	pop	{r7, pc}
 8011f80:	58000c00 	.word	0x58000c00

08011f84 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8011f88:	f7fe fcd0 	bl	801092c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8011f8c:	2101      	movs	r1, #1
 8011f8e:	4802      	ldr	r0, [pc, #8]	; (8011f98 <HW_IPCC_BLE_EvtHandler+0x14>)
 8011f90:	f7ff ff06 	bl	8011da0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011f94:	bf00      	nop
}
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	58000c00 	.word	0x58000c00

08011f9c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8011fa0:	2120      	movs	r1, #32
 8011fa2:	4803      	ldr	r0, [pc, #12]	; (8011fb0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8011fa4:	f7ff fed8 	bl	8011d58 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8011fa8:	f7fe fcf0 	bl	801098c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8011fac:	bf00      	nop
}
 8011fae:	bd80      	pop	{r7, pc}
 8011fb0:	58000c00 	.word	0x58000c00

08011fb4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8011fb8:	2102      	movs	r1, #2
 8011fba:	4802      	ldr	r0, [pc, #8]	; (8011fc4 <HW_IPCC_SYS_Init+0x10>)
 8011fbc:	f7ff fede 	bl	8011d7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011fc0:	bf00      	nop
}
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	58000c00 	.word	0x58000c00

08011fc8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011fcc:	2102      	movs	r1, #2
 8011fce:	4804      	ldr	r0, [pc, #16]	; (8011fe0 <HW_IPCC_SYS_SendCmd+0x18>)
 8011fd0:	f7ff fef4 	bl	8011dbc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011fd4:	2102      	movs	r1, #2
 8011fd6:	4802      	ldr	r0, [pc, #8]	; (8011fe0 <HW_IPCC_SYS_SendCmd+0x18>)
 8011fd8:	f7ff feab 	bl	8011d32 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8011fdc:	bf00      	nop
}
 8011fde:	bd80      	pop	{r7, pc}
 8011fe0:	58000c00 	.word	0x58000c00

08011fe4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011fe8:	2102      	movs	r1, #2
 8011fea:	4803      	ldr	r0, [pc, #12]	; (8011ff8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8011fec:	f7ff feb4 	bl	8011d58 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8011ff0:	f7fe fd1c 	bl	8010a2c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8011ff4:	bf00      	nop
}
 8011ff6:	bd80      	pop	{r7, pc}
 8011ff8:	58000c00 	.word	0x58000c00

08011ffc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8012000:	f7fe fd2a 	bl	8010a58 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012004:	2102      	movs	r1, #2
 8012006:	4802      	ldr	r0, [pc, #8]	; (8012010 <HW_IPCC_SYS_EvtHandler+0x14>)
 8012008:	f7ff feca 	bl	8011da0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801200c:	bf00      	nop
}
 801200e:	bd80      	pop	{r7, pc}
 8012010:	58000c00 	.word	0x58000c00

08012014 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b082      	sub	sp, #8
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 801201c:	2108      	movs	r1, #8
 801201e:	480c      	ldr	r0, [pc, #48]	; (8012050 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012020:	f7ff fedb 	bl	8011dda <LL_C1_IPCC_IsActiveFlag_CHx>
 8012024:	4603      	mov	r3, r0
 8012026:	2b00      	cmp	r3, #0
 8012028:	d007      	beq.n	801203a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801202a:	4a0a      	ldr	r2, [pc, #40]	; (8012054 <HW_IPCC_MM_SendFreeBuf+0x40>)
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012030:	2108      	movs	r1, #8
 8012032:	4807      	ldr	r0, [pc, #28]	; (8012050 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012034:	f7ff fe7d 	bl	8011d32 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8012038:	e006      	b.n	8012048 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801203e:	2108      	movs	r1, #8
 8012040:	4803      	ldr	r0, [pc, #12]	; (8012050 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012042:	f7ff febb 	bl	8011dbc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8012046:	bf00      	nop
}
 8012048:	3708      	adds	r7, #8
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}
 801204e:	bf00      	nop
 8012050:	58000c00 	.word	0x58000c00
 8012054:	20001814 	.word	0x20001814

08012058 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8012058:	b580      	push	{r7, lr}
 801205a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801205c:	2108      	movs	r1, #8
 801205e:	4806      	ldr	r0, [pc, #24]	; (8012078 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012060:	f7ff fe7a 	bl	8011d58 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8012064:	4b05      	ldr	r3, [pc, #20]	; (801207c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801206a:	2108      	movs	r1, #8
 801206c:	4802      	ldr	r0, [pc, #8]	; (8012078 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801206e:	f7ff fea5 	bl	8011dbc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012072:	bf00      	nop
}
 8012074:	bd80      	pop	{r7, pc}
 8012076:	bf00      	nop
 8012078:	58000c00 	.word	0x58000c00
 801207c:	20001814 	.word	0x20001814

08012080 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8012080:	b580      	push	{r7, lr}
 8012082:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012084:	2108      	movs	r1, #8
 8012086:	4802      	ldr	r0, [pc, #8]	; (8012090 <HW_IPCC_TRACES_Init+0x10>)
 8012088:	f7ff fe78 	bl	8011d7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801208c:	bf00      	nop
}
 801208e:	bd80      	pop	{r7, pc}
 8012090:	58000c00 	.word	0x58000c00

08012094 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8012094:	b580      	push	{r7, lr}
 8012096:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8012098:	f7fe fd86 	bl	8010ba8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 801209c:	2108      	movs	r1, #8
 801209e:	4802      	ldr	r0, [pc, #8]	; (80120a8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80120a0:	f7ff fe7e 	bl	8011da0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80120a4:	bf00      	nop
}
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	58000c00 	.word	0x58000c00

080120ac <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80120b0:	2200      	movs	r2, #0
 80120b2:	4912      	ldr	r1, [pc, #72]	; (80120fc <MX_USB_Device_Init+0x50>)
 80120b4:	4812      	ldr	r0, [pc, #72]	; (8012100 <MX_USB_Device_Init+0x54>)
 80120b6:	f7fb fb41 	bl	800d73c <USBD_Init>
 80120ba:	4603      	mov	r3, r0
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d001      	beq.n	80120c4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80120c0:	f7f1 ff0a 	bl	8003ed8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80120c4:	490f      	ldr	r1, [pc, #60]	; (8012104 <MX_USB_Device_Init+0x58>)
 80120c6:	480e      	ldr	r0, [pc, #56]	; (8012100 <MX_USB_Device_Init+0x54>)
 80120c8:	f7fb fb68 	bl	800d79c <USBD_RegisterClass>
 80120cc:	4603      	mov	r3, r0
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d001      	beq.n	80120d6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80120d2:	f7f1 ff01 	bl	8003ed8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80120d6:	490c      	ldr	r1, [pc, #48]	; (8012108 <MX_USB_Device_Init+0x5c>)
 80120d8:	4809      	ldr	r0, [pc, #36]	; (8012100 <MX_USB_Device_Init+0x54>)
 80120da:	f7fb fa5f 	bl	800d59c <USBD_CDC_RegisterInterface>
 80120de:	4603      	mov	r3, r0
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d001      	beq.n	80120e8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80120e4:	f7f1 fef8 	bl	8003ed8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80120e8:	4805      	ldr	r0, [pc, #20]	; (8012100 <MX_USB_Device_Init+0x54>)
 80120ea:	f7fb fb8d 	bl	800d808 <USBD_Start>
 80120ee:	4603      	mov	r3, r0
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d001      	beq.n	80120f8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80120f4:	f7f1 fef0 	bl	8003ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80120f8:	bf00      	nop
 80120fa:	bd80      	pop	{r7, pc}
 80120fc:	20000124 	.word	0x20000124
 8012100:	20001818 	.word	0x20001818
 8012104:	20000064 	.word	0x20000064
 8012108:	20000110 	.word	0x20000110

0801210c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012110:	2200      	movs	r2, #0
 8012112:	4905      	ldr	r1, [pc, #20]	; (8012128 <CDC_Init_FS+0x1c>)
 8012114:	4805      	ldr	r0, [pc, #20]	; (801212c <CDC_Init_FS+0x20>)
 8012116:	f7fb fa5b 	bl	800d5d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801211a:	4905      	ldr	r1, [pc, #20]	; (8012130 <CDC_Init_FS+0x24>)
 801211c:	4803      	ldr	r0, [pc, #12]	; (801212c <CDC_Init_FS+0x20>)
 801211e:	f7fb fa79 	bl	800d614 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012122:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012124:	4618      	mov	r0, r3
 8012126:	bd80      	pop	{r7, pc}
 8012128:	200022f4 	.word	0x200022f4
 801212c:	20001818 	.word	0x20001818
 8012130:	20001af4 	.word	0x20001af4

08012134 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012134:	b480      	push	{r7}
 8012136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012138:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801213a:	4618      	mov	r0, r3
 801213c:	46bd      	mov	sp, r7
 801213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012142:	4770      	bx	lr

08012144 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012144:	b480      	push	{r7}
 8012146:	b083      	sub	sp, #12
 8012148:	af00      	add	r7, sp, #0
 801214a:	4603      	mov	r3, r0
 801214c:	6039      	str	r1, [r7, #0]
 801214e:	71fb      	strb	r3, [r7, #7]
 8012150:	4613      	mov	r3, r2
 8012152:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012154:	79fb      	ldrb	r3, [r7, #7]
 8012156:	2b23      	cmp	r3, #35	; 0x23
 8012158:	d84a      	bhi.n	80121f0 <CDC_Control_FS+0xac>
 801215a:	a201      	add	r2, pc, #4	; (adr r2, 8012160 <CDC_Control_FS+0x1c>)
 801215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012160:	080121f1 	.word	0x080121f1
 8012164:	080121f1 	.word	0x080121f1
 8012168:	080121f1 	.word	0x080121f1
 801216c:	080121f1 	.word	0x080121f1
 8012170:	080121f1 	.word	0x080121f1
 8012174:	080121f1 	.word	0x080121f1
 8012178:	080121f1 	.word	0x080121f1
 801217c:	080121f1 	.word	0x080121f1
 8012180:	080121f1 	.word	0x080121f1
 8012184:	080121f1 	.word	0x080121f1
 8012188:	080121f1 	.word	0x080121f1
 801218c:	080121f1 	.word	0x080121f1
 8012190:	080121f1 	.word	0x080121f1
 8012194:	080121f1 	.word	0x080121f1
 8012198:	080121f1 	.word	0x080121f1
 801219c:	080121f1 	.word	0x080121f1
 80121a0:	080121f1 	.word	0x080121f1
 80121a4:	080121f1 	.word	0x080121f1
 80121a8:	080121f1 	.word	0x080121f1
 80121ac:	080121f1 	.word	0x080121f1
 80121b0:	080121f1 	.word	0x080121f1
 80121b4:	080121f1 	.word	0x080121f1
 80121b8:	080121f1 	.word	0x080121f1
 80121bc:	080121f1 	.word	0x080121f1
 80121c0:	080121f1 	.word	0x080121f1
 80121c4:	080121f1 	.word	0x080121f1
 80121c8:	080121f1 	.word	0x080121f1
 80121cc:	080121f1 	.word	0x080121f1
 80121d0:	080121f1 	.word	0x080121f1
 80121d4:	080121f1 	.word	0x080121f1
 80121d8:	080121f1 	.word	0x080121f1
 80121dc:	080121f1 	.word	0x080121f1
 80121e0:	080121f1 	.word	0x080121f1
 80121e4:	080121f1 	.word	0x080121f1
 80121e8:	080121f1 	.word	0x080121f1
 80121ec:	080121f1 	.word	0x080121f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80121f0:	bf00      	nop
  }

  return (USBD_OK);
 80121f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80121f4:	4618      	mov	r0, r3
 80121f6:	370c      	adds	r7, #12
 80121f8:	46bd      	mov	sp, r7
 80121fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fe:	4770      	bx	lr

08012200 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b082      	sub	sp, #8
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801220a:	6879      	ldr	r1, [r7, #4]
 801220c:	4805      	ldr	r0, [pc, #20]	; (8012224 <CDC_Receive_FS+0x24>)
 801220e:	f7fb fa01 	bl	800d614 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012212:	4804      	ldr	r0, [pc, #16]	; (8012224 <CDC_Receive_FS+0x24>)
 8012214:	f7fb fa5c 	bl	800d6d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012218:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801221a:	4618      	mov	r0, r3
 801221c:	3708      	adds	r7, #8
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}
 8012222:	bf00      	nop
 8012224:	20001818 	.word	0x20001818

08012228 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b084      	sub	sp, #16
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	460b      	mov	r3, r1
 8012232:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012234:	2300      	movs	r3, #0
 8012236:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012238:	4b0d      	ldr	r3, [pc, #52]	; (8012270 <CDC_Transmit_FS+0x48>)
 801223a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801223e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012246:	2b00      	cmp	r3, #0
 8012248:	d001      	beq.n	801224e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801224a:	2301      	movs	r3, #1
 801224c:	e00b      	b.n	8012266 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801224e:	887b      	ldrh	r3, [r7, #2]
 8012250:	461a      	mov	r2, r3
 8012252:	6879      	ldr	r1, [r7, #4]
 8012254:	4806      	ldr	r0, [pc, #24]	; (8012270 <CDC_Transmit_FS+0x48>)
 8012256:	f7fb f9bb 	bl	800d5d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801225a:	4805      	ldr	r0, [pc, #20]	; (8012270 <CDC_Transmit_FS+0x48>)
 801225c:	f7fb f9f8 	bl	800d650 <USBD_CDC_TransmitPacket>
 8012260:	4603      	mov	r3, r0
 8012262:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012264:	7bfb      	ldrb	r3, [r7, #15]
}
 8012266:	4618      	mov	r0, r3
 8012268:	3710      	adds	r7, #16
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	20001818 	.word	0x20001818

08012274 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012274:	b480      	push	{r7}
 8012276:	b087      	sub	sp, #28
 8012278:	af00      	add	r7, sp, #0
 801227a:	60f8      	str	r0, [r7, #12]
 801227c:	60b9      	str	r1, [r7, #8]
 801227e:	4613      	mov	r3, r2
 8012280:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012282:	2300      	movs	r3, #0
 8012284:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012286:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801228a:	4618      	mov	r0, r3
 801228c:	371c      	adds	r7, #28
 801228e:	46bd      	mov	sp, r7
 8012290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012294:	4770      	bx	lr
	...

08012298 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012298:	b480      	push	{r7}
 801229a:	b083      	sub	sp, #12
 801229c:	af00      	add	r7, sp, #0
 801229e:	4603      	mov	r3, r0
 80122a0:	6039      	str	r1, [r7, #0]
 80122a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	2212      	movs	r2, #18
 80122a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80122aa:	4b03      	ldr	r3, [pc, #12]	; (80122b8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	370c      	adds	r7, #12
 80122b0:	46bd      	mov	sp, r7
 80122b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b6:	4770      	bx	lr
 80122b8:	20000144 	.word	0x20000144

080122bc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	4603      	mov	r3, r0
 80122c4:	6039      	str	r1, [r7, #0]
 80122c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	2204      	movs	r2, #4
 80122cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80122ce:	4b03      	ldr	r3, [pc, #12]	; (80122dc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	370c      	adds	r7, #12
 80122d4:	46bd      	mov	sp, r7
 80122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122da:	4770      	bx	lr
 80122dc:	20000158 	.word	0x20000158

080122e0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b082      	sub	sp, #8
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	4603      	mov	r3, r0
 80122e8:	6039      	str	r1, [r7, #0]
 80122ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80122ec:	79fb      	ldrb	r3, [r7, #7]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d105      	bne.n	80122fe <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80122f2:	683a      	ldr	r2, [r7, #0]
 80122f4:	4907      	ldr	r1, [pc, #28]	; (8012314 <USBD_CDC_ProductStrDescriptor+0x34>)
 80122f6:	4808      	ldr	r0, [pc, #32]	; (8012318 <USBD_CDC_ProductStrDescriptor+0x38>)
 80122f8:	f7fc fbd0 	bl	800ea9c <USBD_GetString>
 80122fc:	e004      	b.n	8012308 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80122fe:	683a      	ldr	r2, [r7, #0]
 8012300:	4904      	ldr	r1, [pc, #16]	; (8012314 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012302:	4805      	ldr	r0, [pc, #20]	; (8012318 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012304:	f7fc fbca 	bl	800ea9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012308:	4b02      	ldr	r3, [pc, #8]	; (8012314 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801230a:	4618      	mov	r0, r3
 801230c:	3708      	adds	r7, #8
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
 8012312:	bf00      	nop
 8012314:	20002af4 	.word	0x20002af4
 8012318:	080142b0 	.word	0x080142b0

0801231c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	af00      	add	r7, sp, #0
 8012322:	4603      	mov	r3, r0
 8012324:	6039      	str	r1, [r7, #0]
 8012326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012328:	683a      	ldr	r2, [r7, #0]
 801232a:	4904      	ldr	r1, [pc, #16]	; (801233c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801232c:	4804      	ldr	r0, [pc, #16]	; (8012340 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801232e:	f7fc fbb5 	bl	800ea9c <USBD_GetString>
  return USBD_StrDesc;
 8012332:	4b02      	ldr	r3, [pc, #8]	; (801233c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8012334:	4618      	mov	r0, r3
 8012336:	3708      	adds	r7, #8
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}
 801233c:	20002af4 	.word	0x20002af4
 8012340:	080142c8 	.word	0x080142c8

08012344 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b082      	sub	sp, #8
 8012348:	af00      	add	r7, sp, #0
 801234a:	4603      	mov	r3, r0
 801234c:	6039      	str	r1, [r7, #0]
 801234e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	221a      	movs	r2, #26
 8012354:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012356:	f000 f843 	bl	80123e0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801235a:	4b02      	ldr	r3, [pc, #8]	; (8012364 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801235c:	4618      	mov	r0, r3
 801235e:	3708      	adds	r7, #8
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}
 8012364:	2000015c 	.word	0x2000015c

08012368 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	4603      	mov	r3, r0
 8012370:	6039      	str	r1, [r7, #0]
 8012372:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012374:	79fb      	ldrb	r3, [r7, #7]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d105      	bne.n	8012386 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801237a:	683a      	ldr	r2, [r7, #0]
 801237c:	4907      	ldr	r1, [pc, #28]	; (801239c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801237e:	4808      	ldr	r0, [pc, #32]	; (80123a0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012380:	f7fc fb8c 	bl	800ea9c <USBD_GetString>
 8012384:	e004      	b.n	8012390 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012386:	683a      	ldr	r2, [r7, #0]
 8012388:	4904      	ldr	r1, [pc, #16]	; (801239c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801238a:	4805      	ldr	r0, [pc, #20]	; (80123a0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801238c:	f7fc fb86 	bl	800ea9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012390:	4b02      	ldr	r3, [pc, #8]	; (801239c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8012392:	4618      	mov	r0, r3
 8012394:	3708      	adds	r7, #8
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	20002af4 	.word	0x20002af4
 80123a0:	080142dc 	.word	0x080142dc

080123a4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	4603      	mov	r3, r0
 80123ac:	6039      	str	r1, [r7, #0]
 80123ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80123b0:	79fb      	ldrb	r3, [r7, #7]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d105      	bne.n	80123c2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80123b6:	683a      	ldr	r2, [r7, #0]
 80123b8:	4907      	ldr	r1, [pc, #28]	; (80123d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80123ba:	4808      	ldr	r0, [pc, #32]	; (80123dc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80123bc:	f7fc fb6e 	bl	800ea9c <USBD_GetString>
 80123c0:	e004      	b.n	80123cc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80123c2:	683a      	ldr	r2, [r7, #0]
 80123c4:	4904      	ldr	r1, [pc, #16]	; (80123d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80123c6:	4805      	ldr	r0, [pc, #20]	; (80123dc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80123c8:	f7fc fb68 	bl	800ea9c <USBD_GetString>
  }
  return USBD_StrDesc;
 80123cc:	4b02      	ldr	r3, [pc, #8]	; (80123d8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3708      	adds	r7, #8
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	bf00      	nop
 80123d8:	20002af4 	.word	0x20002af4
 80123dc:	080142e8 	.word	0x080142e8

080123e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b084      	sub	sp, #16
 80123e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80123e6:	4b0f      	ldr	r3, [pc, #60]	; (8012424 <Get_SerialNum+0x44>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80123ec:	4b0e      	ldr	r3, [pc, #56]	; (8012428 <Get_SerialNum+0x48>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80123f2:	4b0e      	ldr	r3, [pc, #56]	; (801242c <Get_SerialNum+0x4c>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80123f8:	68fa      	ldr	r2, [r7, #12]
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	4413      	add	r3, r2
 80123fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d009      	beq.n	801241a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012406:	2208      	movs	r2, #8
 8012408:	4909      	ldr	r1, [pc, #36]	; (8012430 <Get_SerialNum+0x50>)
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	f000 f814 	bl	8012438 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012410:	2204      	movs	r2, #4
 8012412:	4908      	ldr	r1, [pc, #32]	; (8012434 <Get_SerialNum+0x54>)
 8012414:	68b8      	ldr	r0, [r7, #8]
 8012416:	f000 f80f 	bl	8012438 <IntToUnicode>
  }
}
 801241a:	bf00      	nop
 801241c:	3710      	adds	r7, #16
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}
 8012422:	bf00      	nop
 8012424:	1fff7590 	.word	0x1fff7590
 8012428:	1fff7594 	.word	0x1fff7594
 801242c:	1fff7598 	.word	0x1fff7598
 8012430:	2000015e 	.word	0x2000015e
 8012434:	2000016e 	.word	0x2000016e

08012438 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012438:	b480      	push	{r7}
 801243a:	b087      	sub	sp, #28
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	4613      	mov	r3, r2
 8012444:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012446:	2300      	movs	r3, #0
 8012448:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801244a:	2300      	movs	r3, #0
 801244c:	75fb      	strb	r3, [r7, #23]
 801244e:	e027      	b.n	80124a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	0f1b      	lsrs	r3, r3, #28
 8012454:	2b09      	cmp	r3, #9
 8012456:	d80b      	bhi.n	8012470 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	0f1b      	lsrs	r3, r3, #28
 801245c:	b2da      	uxtb	r2, r3
 801245e:	7dfb      	ldrb	r3, [r7, #23]
 8012460:	005b      	lsls	r3, r3, #1
 8012462:	4619      	mov	r1, r3
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	440b      	add	r3, r1
 8012468:	3230      	adds	r2, #48	; 0x30
 801246a:	b2d2      	uxtb	r2, r2
 801246c:	701a      	strb	r2, [r3, #0]
 801246e:	e00a      	b.n	8012486 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	0f1b      	lsrs	r3, r3, #28
 8012474:	b2da      	uxtb	r2, r3
 8012476:	7dfb      	ldrb	r3, [r7, #23]
 8012478:	005b      	lsls	r3, r3, #1
 801247a:	4619      	mov	r1, r3
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	440b      	add	r3, r1
 8012480:	3237      	adds	r2, #55	; 0x37
 8012482:	b2d2      	uxtb	r2, r2
 8012484:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	011b      	lsls	r3, r3, #4
 801248a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801248c:	7dfb      	ldrb	r3, [r7, #23]
 801248e:	005b      	lsls	r3, r3, #1
 8012490:	3301      	adds	r3, #1
 8012492:	68ba      	ldr	r2, [r7, #8]
 8012494:	4413      	add	r3, r2
 8012496:	2200      	movs	r2, #0
 8012498:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801249a:	7dfb      	ldrb	r3, [r7, #23]
 801249c:	3301      	adds	r3, #1
 801249e:	75fb      	strb	r3, [r7, #23]
 80124a0:	7dfa      	ldrb	r2, [r7, #23]
 80124a2:	79fb      	ldrb	r3, [r7, #7]
 80124a4:	429a      	cmp	r2, r3
 80124a6:	d3d3      	bcc.n	8012450 <IntToUnicode+0x18>
  }
}
 80124a8:	bf00      	nop
 80124aa:	bf00      	nop
 80124ac:	371c      	adds	r7, #28
 80124ae:	46bd      	mov	sp, r7
 80124b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b4:	4770      	bx	lr

080124b6 <LL_AHB2_GRP1_EnableClock>:
{
 80124b6:	b480      	push	{r7}
 80124b8:	b085      	sub	sp, #20
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80124be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80124c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80124c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	4313      	orrs	r3, r2
 80124cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80124ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80124d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	4013      	ands	r3, r2
 80124d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80124da:	68fb      	ldr	r3, [r7, #12]
}
 80124dc:	bf00      	nop
 80124de:	3714      	adds	r7, #20
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr

080124e8 <LL_APB1_GRP1_EnableClock>:
{
 80124e8:	b480      	push	{r7}
 80124ea:	b085      	sub	sp, #20
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80124f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80124f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80124f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	4313      	orrs	r3, r2
 80124fe:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8012500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012504:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	4013      	ands	r3, r2
 801250a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801250c:	68fb      	ldr	r3, [r7, #12]
}
 801250e:	bf00      	nop
 8012510:	3714      	adds	r7, #20
 8012512:	46bd      	mov	sp, r7
 8012514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012518:	4770      	bx	lr
	...

0801251c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b09c      	sub	sp, #112	; 0x70
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012524:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012528:	2200      	movs	r2, #0
 801252a:	601a      	str	r2, [r3, #0]
 801252c:	605a      	str	r2, [r3, #4]
 801252e:	609a      	str	r2, [r3, #8]
 8012530:	60da      	str	r2, [r3, #12]
 8012532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012534:	f107 030c 	add.w	r3, r7, #12
 8012538:	2250      	movs	r2, #80	; 0x50
 801253a:	2100      	movs	r1, #0
 801253c:	4618      	mov	r0, r3
 801253e:	f000 fd95 	bl	801306c <memset>
  if(pcdHandle->Instance==USB)
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	4a23      	ldr	r2, [pc, #140]	; (80125d4 <HAL_PCD_MspInit+0xb8>)
 8012548:	4293      	cmp	r3, r2
 801254a:	d13e      	bne.n	80125ca <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801254c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012550:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8012552:	2318      	movs	r3, #24
 8012554:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8012556:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801255a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 801255c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012560:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8012562:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8012566:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8012568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801256c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801256e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8012572:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012574:	f107 030c 	add.w	r3, r7, #12
 8012578:	4618      	mov	r0, r3
 801257a:	f7f6 fbc2 	bl	8008d02 <HAL_RCCEx_PeriphCLKConfig>
 801257e:	4603      	mov	r3, r0
 8012580:	2b00      	cmp	r3, #0
 8012582:	d001      	beq.n	8012588 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8012584:	f7f1 fca8 	bl	8003ed8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012588:	2001      	movs	r0, #1
 801258a:	f7ff ff94 	bl	80124b6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801258e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012592:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012594:	2302      	movs	r3, #2
 8012596:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012598:	2300      	movs	r3, #0
 801259a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801259c:	2300      	movs	r3, #0
 801259e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80125a0:	230a      	movs	r3, #10
 80125a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80125a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80125a8:	4619      	mov	r1, r3
 80125aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80125ae:	f7f2 f98f 	bl	80048d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80125b2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80125b6:	f7ff ff97 	bl	80124e8 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80125ba:	2200      	movs	r2, #0
 80125bc:	2100      	movs	r1, #0
 80125be:	2014      	movs	r0, #20
 80125c0:	f7f2 f927 	bl	8004812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80125c4:	2014      	movs	r0, #20
 80125c6:	f7f2 f93e 	bl	8004846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80125ca:	bf00      	nop
 80125cc:	3770      	adds	r7, #112	; 0x70
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd80      	pop	{r7, pc}
 80125d2:	bf00      	nop
 80125d4:	40006800 	.word	0x40006800

080125d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b082      	sub	sp, #8
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80125ec:	4619      	mov	r1, r3
 80125ee:	4610      	mov	r0, r2
 80125f0:	f7fb f957 	bl	800d8a2 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80125f4:	bf00      	nop
 80125f6:	3708      	adds	r7, #8
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	460b      	mov	r3, r1
 8012606:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801260e:	78fa      	ldrb	r2, [r7, #3]
 8012610:	6879      	ldr	r1, [r7, #4]
 8012612:	4613      	mov	r3, r2
 8012614:	009b      	lsls	r3, r3, #2
 8012616:	4413      	add	r3, r2
 8012618:	00db      	lsls	r3, r3, #3
 801261a:	440b      	add	r3, r1
 801261c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012620:	681a      	ldr	r2, [r3, #0]
 8012622:	78fb      	ldrb	r3, [r7, #3]
 8012624:	4619      	mov	r1, r3
 8012626:	f7fb f991 	bl	800d94c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801262a:	bf00      	nop
 801262c:	3708      	adds	r7, #8
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}

08012632 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012632:	b580      	push	{r7, lr}
 8012634:	b082      	sub	sp, #8
 8012636:	af00      	add	r7, sp, #0
 8012638:	6078      	str	r0, [r7, #4]
 801263a:	460b      	mov	r3, r1
 801263c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8012644:	78fa      	ldrb	r2, [r7, #3]
 8012646:	6879      	ldr	r1, [r7, #4]
 8012648:	4613      	mov	r3, r2
 801264a:	009b      	lsls	r3, r3, #2
 801264c:	4413      	add	r3, r2
 801264e:	00db      	lsls	r3, r3, #3
 8012650:	440b      	add	r3, r1
 8012652:	3324      	adds	r3, #36	; 0x24
 8012654:	681a      	ldr	r2, [r3, #0]
 8012656:	78fb      	ldrb	r3, [r7, #3]
 8012658:	4619      	mov	r1, r3
 801265a:	f7fb fa2a 	bl	800dab2 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801265e:	bf00      	nop
 8012660:	3708      	adds	r7, #8
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}

08012666 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012666:	b580      	push	{r7, lr}
 8012668:	b082      	sub	sp, #8
 801266a:	af00      	add	r7, sp, #0
 801266c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8012674:	4618      	mov	r0, r3
 8012676:	f7fb fb64 	bl	800dd42 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801267a:	bf00      	nop
 801267c:	3708      	adds	r7, #8
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}

08012682 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012682:	b580      	push	{r7, lr}
 8012684:	b084      	sub	sp, #16
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801268a:	2301      	movs	r3, #1
 801268c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	795b      	ldrb	r3, [r3, #5]
 8012692:	2b02      	cmp	r3, #2
 8012694:	d001      	beq.n	801269a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012696:	f7f1 fc1f 	bl	8003ed8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80126a0:	7bfa      	ldrb	r2, [r7, #15]
 80126a2:	4611      	mov	r1, r2
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7fb fb08 	bl	800dcba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7fb fab0 	bl	800dc16 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80126b6:	bf00      	nop
 80126b8:	3710      	adds	r7, #16
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
	...

080126c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7fb fb03 	bl	800dcda <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	7a5b      	ldrb	r3, [r3, #9]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d005      	beq.n	80126e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80126dc:	4b04      	ldr	r3, [pc, #16]	; (80126f0 <HAL_PCD_SuspendCallback+0x30>)
 80126de:	691b      	ldr	r3, [r3, #16]
 80126e0:	4a03      	ldr	r2, [pc, #12]	; (80126f0 <HAL_PCD_SuspendCallback+0x30>)
 80126e2:	f043 0306 	orr.w	r3, r3, #6
 80126e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80126e8:	bf00      	nop
 80126ea:	3708      	adds	r7, #8
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}
 80126f0:	e000ed00 	.word	0xe000ed00

080126f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	7a5b      	ldrb	r3, [r3, #9]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d007      	beq.n	8012714 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012704:	4b08      	ldr	r3, [pc, #32]	; (8012728 <HAL_PCD_ResumeCallback+0x34>)
 8012706:	691b      	ldr	r3, [r3, #16]
 8012708:	4a07      	ldr	r2, [pc, #28]	; (8012728 <HAL_PCD_ResumeCallback+0x34>)
 801270a:	f023 0306 	bic.w	r3, r3, #6
 801270e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012710:	f000 f9fa 	bl	8012b08 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801271a:	4618      	mov	r0, r3
 801271c:	f7fb faf9 	bl	800dd12 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8012720:	bf00      	nop
 8012722:	3708      	adds	r7, #8
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	e000ed00 	.word	0xe000ed00

0801272c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b082      	sub	sp, #8
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8012734:	4a2c      	ldr	r2, [pc, #176]	; (80127e8 <USBD_LL_Init+0xbc>)
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	4a2a      	ldr	r2, [pc, #168]	; (80127e8 <USBD_LL_Init+0xbc>)
 8012740:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8012744:	f7f4 ffb6 	bl	80076b4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8012748:	4b27      	ldr	r3, [pc, #156]	; (80127e8 <USBD_LL_Init+0xbc>)
 801274a:	4a28      	ldr	r2, [pc, #160]	; (80127ec <USBD_LL_Init+0xc0>)
 801274c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801274e:	4b26      	ldr	r3, [pc, #152]	; (80127e8 <USBD_LL_Init+0xbc>)
 8012750:	2208      	movs	r2, #8
 8012752:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012754:	4b24      	ldr	r3, [pc, #144]	; (80127e8 <USBD_LL_Init+0xbc>)
 8012756:	2202      	movs	r2, #2
 8012758:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801275a:	4b23      	ldr	r3, [pc, #140]	; (80127e8 <USBD_LL_Init+0xbc>)
 801275c:	2202      	movs	r2, #2
 801275e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012760:	4b21      	ldr	r3, [pc, #132]	; (80127e8 <USBD_LL_Init+0xbc>)
 8012762:	2200      	movs	r2, #0
 8012764:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012766:	4b20      	ldr	r3, [pc, #128]	; (80127e8 <USBD_LL_Init+0xbc>)
 8012768:	2200      	movs	r2, #0
 801276a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801276c:	4b1e      	ldr	r3, [pc, #120]	; (80127e8 <USBD_LL_Init+0xbc>)
 801276e:	2200      	movs	r2, #0
 8012770:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012772:	4b1d      	ldr	r3, [pc, #116]	; (80127e8 <USBD_LL_Init+0xbc>)
 8012774:	2200      	movs	r2, #0
 8012776:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012778:	481b      	ldr	r0, [pc, #108]	; (80127e8 <USBD_LL_Init+0xbc>)
 801277a:	f7f3 fa49 	bl	8005c10 <HAL_PCD_Init>
 801277e:	4603      	mov	r3, r0
 8012780:	2b00      	cmp	r3, #0
 8012782:	d001      	beq.n	8012788 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8012784:	f7f1 fba8 	bl	8003ed8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801278e:	2318      	movs	r3, #24
 8012790:	2200      	movs	r2, #0
 8012792:	2100      	movs	r1, #0
 8012794:	f7f4 ff03 	bl	800759e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801279e:	2358      	movs	r3, #88	; 0x58
 80127a0:	2200      	movs	r2, #0
 80127a2:	2180      	movs	r1, #128	; 0x80
 80127a4:	f7f4 fefb 	bl	800759e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80127ae:	23c0      	movs	r3, #192	; 0xc0
 80127b0:	2200      	movs	r2, #0
 80127b2:	2181      	movs	r1, #129	; 0x81
 80127b4:	f7f4 fef3 	bl	800759e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80127be:	f44f 7388 	mov.w	r3, #272	; 0x110
 80127c2:	2200      	movs	r2, #0
 80127c4:	2101      	movs	r1, #1
 80127c6:	f7f4 feea 	bl	800759e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80127d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127d4:	2200      	movs	r2, #0
 80127d6:	2182      	movs	r1, #130	; 0x82
 80127d8:	f7f4 fee1 	bl	800759e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80127dc:	2300      	movs	r3, #0
}
 80127de:	4618      	mov	r0, r3
 80127e0:	3708      	adds	r7, #8
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd80      	pop	{r7, pc}
 80127e6:	bf00      	nop
 80127e8:	20002cf4 	.word	0x20002cf4
 80127ec:	40006800 	.word	0x40006800

080127f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b084      	sub	sp, #16
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127f8:	2300      	movs	r3, #0
 80127fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127fc:	2300      	movs	r3, #0
 80127fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012806:	4618      	mov	r0, r3
 8012808:	f7f3 fad0 	bl	8005dac <HAL_PCD_Start>
 801280c:	4603      	mov	r3, r0
 801280e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012810:	7bfb      	ldrb	r3, [r7, #15]
 8012812:	4618      	mov	r0, r3
 8012814:	f000 f97e 	bl	8012b14 <USBD_Get_USB_Status>
 8012818:	4603      	mov	r3, r0
 801281a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801281c:	7bbb      	ldrb	r3, [r7, #14]
}
 801281e:	4618      	mov	r0, r3
 8012820:	3710      	adds	r7, #16
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}

08012826 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012826:	b580      	push	{r7, lr}
 8012828:	b084      	sub	sp, #16
 801282a:	af00      	add	r7, sp, #0
 801282c:	6078      	str	r0, [r7, #4]
 801282e:	4608      	mov	r0, r1
 8012830:	4611      	mov	r1, r2
 8012832:	461a      	mov	r2, r3
 8012834:	4603      	mov	r3, r0
 8012836:	70fb      	strb	r3, [r7, #3]
 8012838:	460b      	mov	r3, r1
 801283a:	70bb      	strb	r3, [r7, #2]
 801283c:	4613      	mov	r3, r2
 801283e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012840:	2300      	movs	r3, #0
 8012842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012844:	2300      	movs	r3, #0
 8012846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801284e:	78bb      	ldrb	r3, [r7, #2]
 8012850:	883a      	ldrh	r2, [r7, #0]
 8012852:	78f9      	ldrb	r1, [r7, #3]
 8012854:	f7f3 fc17 	bl	8006086 <HAL_PCD_EP_Open>
 8012858:	4603      	mov	r3, r0
 801285a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801285c:	7bfb      	ldrb	r3, [r7, #15]
 801285e:	4618      	mov	r0, r3
 8012860:	f000 f958 	bl	8012b14 <USBD_Get_USB_Status>
 8012864:	4603      	mov	r3, r0
 8012866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012868:	7bbb      	ldrb	r3, [r7, #14]
}
 801286a:	4618      	mov	r0, r3
 801286c:	3710      	adds	r7, #16
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}

08012872 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012872:	b580      	push	{r7, lr}
 8012874:	b084      	sub	sp, #16
 8012876:	af00      	add	r7, sp, #0
 8012878:	6078      	str	r0, [r7, #4]
 801287a:	460b      	mov	r3, r1
 801287c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801287e:	2300      	movs	r3, #0
 8012880:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012882:	2300      	movs	r3, #0
 8012884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801288c:	78fa      	ldrb	r2, [r7, #3]
 801288e:	4611      	mov	r1, r2
 8012890:	4618      	mov	r0, r3
 8012892:	f7f3 fc55 	bl	8006140 <HAL_PCD_EP_Close>
 8012896:	4603      	mov	r3, r0
 8012898:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801289a:	7bfb      	ldrb	r3, [r7, #15]
 801289c:	4618      	mov	r0, r3
 801289e:	f000 f939 	bl	8012b14 <USBD_Get_USB_Status>
 80128a2:	4603      	mov	r3, r0
 80128a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3710      	adds	r7, #16
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}

080128b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b084      	sub	sp, #16
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
 80128b8:	460b      	mov	r3, r1
 80128ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128bc:	2300      	movs	r3, #0
 80128be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128c0:	2300      	movs	r3, #0
 80128c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80128ca:	78fa      	ldrb	r2, [r7, #3]
 80128cc:	4611      	mov	r1, r2
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7f3 fcfe 	bl	80062d0 <HAL_PCD_EP_SetStall>
 80128d4:	4603      	mov	r3, r0
 80128d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128d8:	7bfb      	ldrb	r3, [r7, #15]
 80128da:	4618      	mov	r0, r3
 80128dc:	f000 f91a 	bl	8012b14 <USBD_Get_USB_Status>
 80128e0:	4603      	mov	r3, r0
 80128e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3710      	adds	r7, #16
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}

080128ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80128ee:	b580      	push	{r7, lr}
 80128f0:	b084      	sub	sp, #16
 80128f2:	af00      	add	r7, sp, #0
 80128f4:	6078      	str	r0, [r7, #4]
 80128f6:	460b      	mov	r3, r1
 80128f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128fa:	2300      	movs	r3, #0
 80128fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128fe:	2300      	movs	r3, #0
 8012900:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012908:	78fa      	ldrb	r2, [r7, #3]
 801290a:	4611      	mov	r1, r2
 801290c:	4618      	mov	r0, r3
 801290e:	f7f3 fd31 	bl	8006374 <HAL_PCD_EP_ClrStall>
 8012912:	4603      	mov	r3, r0
 8012914:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012916:	7bfb      	ldrb	r3, [r7, #15]
 8012918:	4618      	mov	r0, r3
 801291a:	f000 f8fb 	bl	8012b14 <USBD_Get_USB_Status>
 801291e:	4603      	mov	r3, r0
 8012920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012922:	7bbb      	ldrb	r3, [r7, #14]
}
 8012924:	4618      	mov	r0, r3
 8012926:	3710      	adds	r7, #16
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801292c:	b480      	push	{r7}
 801292e:	b085      	sub	sp, #20
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
 8012934:	460b      	mov	r3, r1
 8012936:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801293e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012944:	2b00      	cmp	r3, #0
 8012946:	da0b      	bge.n	8012960 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012948:	78fb      	ldrb	r3, [r7, #3]
 801294a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801294e:	68f9      	ldr	r1, [r7, #12]
 8012950:	4613      	mov	r3, r2
 8012952:	009b      	lsls	r3, r3, #2
 8012954:	4413      	add	r3, r2
 8012956:	00db      	lsls	r3, r3, #3
 8012958:	440b      	add	r3, r1
 801295a:	3312      	adds	r3, #18
 801295c:	781b      	ldrb	r3, [r3, #0]
 801295e:	e00b      	b.n	8012978 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012960:	78fb      	ldrb	r3, [r7, #3]
 8012962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012966:	68f9      	ldr	r1, [r7, #12]
 8012968:	4613      	mov	r3, r2
 801296a:	009b      	lsls	r3, r3, #2
 801296c:	4413      	add	r3, r2
 801296e:	00db      	lsls	r3, r3, #3
 8012970:	440b      	add	r3, r1
 8012972:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8012976:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012978:	4618      	mov	r0, r3
 801297a:	3714      	adds	r7, #20
 801297c:	46bd      	mov	sp, r7
 801297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012982:	4770      	bx	lr

08012984 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b084      	sub	sp, #16
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	460b      	mov	r3, r1
 801298e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012990:	2300      	movs	r3, #0
 8012992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012994:	2300      	movs	r3, #0
 8012996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801299e:	78fa      	ldrb	r2, [r7, #3]
 80129a0:	4611      	mov	r1, r2
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7f3 fb4b 	bl	800603e <HAL_PCD_SetAddress>
 80129a8:	4603      	mov	r3, r0
 80129aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129ac:	7bfb      	ldrb	r3, [r7, #15]
 80129ae:	4618      	mov	r0, r3
 80129b0:	f000 f8b0 	bl	8012b14 <USBD_Get_USB_Status>
 80129b4:	4603      	mov	r3, r0
 80129b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80129b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3710      	adds	r7, #16
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}

080129c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80129c2:	b580      	push	{r7, lr}
 80129c4:	b086      	sub	sp, #24
 80129c6:	af00      	add	r7, sp, #0
 80129c8:	60f8      	str	r0, [r7, #12]
 80129ca:	607a      	str	r2, [r7, #4]
 80129cc:	603b      	str	r3, [r7, #0]
 80129ce:	460b      	mov	r3, r1
 80129d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129d2:	2300      	movs	r3, #0
 80129d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129d6:	2300      	movs	r3, #0
 80129d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80129e0:	7af9      	ldrb	r1, [r7, #11]
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	687a      	ldr	r2, [r7, #4]
 80129e6:	f7f3 fc3c 	bl	8006262 <HAL_PCD_EP_Transmit>
 80129ea:	4603      	mov	r3, r0
 80129ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129ee:	7dfb      	ldrb	r3, [r7, #23]
 80129f0:	4618      	mov	r0, r3
 80129f2:	f000 f88f 	bl	8012b14 <USBD_Get_USB_Status>
 80129f6:	4603      	mov	r3, r0
 80129f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80129fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	3718      	adds	r7, #24
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}

08012a04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b086      	sub	sp, #24
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	60f8      	str	r0, [r7, #12]
 8012a0c:	607a      	str	r2, [r7, #4]
 8012a0e:	603b      	str	r3, [r7, #0]
 8012a10:	460b      	mov	r3, r1
 8012a12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a14:	2300      	movs	r3, #0
 8012a16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012a22:	7af9      	ldrb	r1, [r7, #11]
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	687a      	ldr	r2, [r7, #4]
 8012a28:	f7f3 fbd2 	bl	80061d0 <HAL_PCD_EP_Receive>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a30:	7dfb      	ldrb	r3, [r7, #23]
 8012a32:	4618      	mov	r0, r3
 8012a34:	f000 f86e 	bl	8012b14 <USBD_Get_USB_Status>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012a3c:	7dbb      	ldrb	r3, [r7, #22]
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3718      	adds	r7, #24
 8012a42:	46bd      	mov	sp, r7
 8012a44:	bd80      	pop	{r7, pc}

08012a46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012a46:	b580      	push	{r7, lr}
 8012a48:	b082      	sub	sp, #8
 8012a4a:	af00      	add	r7, sp, #0
 8012a4c:	6078      	str	r0, [r7, #4]
 8012a4e:	460b      	mov	r3, r1
 8012a50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012a58:	78fa      	ldrb	r2, [r7, #3]
 8012a5a:	4611      	mov	r1, r2
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7f3 fbe8 	bl	8006232 <HAL_PCD_EP_GetRxCount>
 8012a62:	4603      	mov	r3, r0
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	3708      	adds	r7, #8
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}

08012a6c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b082      	sub	sp, #8
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	460b      	mov	r3, r1
 8012a76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8012a78:	78fb      	ldrb	r3, [r7, #3]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d002      	beq.n	8012a84 <HAL_PCDEx_LPM_Callback+0x18>
 8012a7e:	2b01      	cmp	r3, #1
 8012a80:	d013      	beq.n	8012aaa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8012a82:	e023      	b.n	8012acc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	7a5b      	ldrb	r3, [r3, #9]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d007      	beq.n	8012a9c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012a8c:	f000 f83c 	bl	8012b08 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012a90:	4b10      	ldr	r3, [pc, #64]	; (8012ad4 <HAL_PCDEx_LPM_Callback+0x68>)
 8012a92:	691b      	ldr	r3, [r3, #16]
 8012a94:	4a0f      	ldr	r2, [pc, #60]	; (8012ad4 <HAL_PCDEx_LPM_Callback+0x68>)
 8012a96:	f023 0306 	bic.w	r3, r3, #6
 8012a9a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f7fb f935 	bl	800dd12 <USBD_LL_Resume>
    break;
 8012aa8:	e010      	b.n	8012acc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7fb f912 	bl	800dcda <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	7a5b      	ldrb	r3, [r3, #9]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d005      	beq.n	8012aca <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012abe:	4b05      	ldr	r3, [pc, #20]	; (8012ad4 <HAL_PCDEx_LPM_Callback+0x68>)
 8012ac0:	691b      	ldr	r3, [r3, #16]
 8012ac2:	4a04      	ldr	r2, [pc, #16]	; (8012ad4 <HAL_PCDEx_LPM_Callback+0x68>)
 8012ac4:	f043 0306 	orr.w	r3, r3, #6
 8012ac8:	6113      	str	r3, [r2, #16]
    break;
 8012aca:	bf00      	nop
}
 8012acc:	bf00      	nop
 8012ace:	3708      	adds	r7, #8
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}
 8012ad4:	e000ed00 	.word	0xe000ed00

08012ad8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b083      	sub	sp, #12
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012ae0:	4b03      	ldr	r3, [pc, #12]	; (8012af0 <USBD_static_malloc+0x18>)
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	370c      	adds	r7, #12
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aec:	4770      	bx	lr
 8012aee:	bf00      	nop
 8012af0:	20002fd0 	.word	0x20002fd0

08012af4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012af4:	b480      	push	{r7}
 8012af6:	b083      	sub	sp, #12
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8012afc:	bf00      	nop
 8012afe:	370c      	adds	r7, #12
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr

08012b08 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012b0c:	f7f1 f90c 	bl	8003d28 <SystemClock_Config>
}
 8012b10:	bf00      	nop
 8012b12:	bd80      	pop	{r7, pc}

08012b14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012b14:	b480      	push	{r7}
 8012b16:	b085      	sub	sp, #20
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012b22:	79fb      	ldrb	r3, [r7, #7]
 8012b24:	2b03      	cmp	r3, #3
 8012b26:	d817      	bhi.n	8012b58 <USBD_Get_USB_Status+0x44>
 8012b28:	a201      	add	r2, pc, #4	; (adr r2, 8012b30 <USBD_Get_USB_Status+0x1c>)
 8012b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b2e:	bf00      	nop
 8012b30:	08012b41 	.word	0x08012b41
 8012b34:	08012b47 	.word	0x08012b47
 8012b38:	08012b4d 	.word	0x08012b4d
 8012b3c:	08012b53 	.word	0x08012b53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012b40:	2300      	movs	r3, #0
 8012b42:	73fb      	strb	r3, [r7, #15]
    break;
 8012b44:	e00b      	b.n	8012b5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012b46:	2303      	movs	r3, #3
 8012b48:	73fb      	strb	r3, [r7, #15]
    break;
 8012b4a:	e008      	b.n	8012b5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8012b50:	e005      	b.n	8012b5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012b52:	2303      	movs	r3, #3
 8012b54:	73fb      	strb	r3, [r7, #15]
    break;
 8012b56:	e002      	b.n	8012b5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012b58:	2303      	movs	r3, #3
 8012b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8012b5c:	bf00      	nop
  }
  return usb_status;
 8012b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3714      	adds	r7, #20
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr

08012b6c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8012b70:	4b05      	ldr	r3, [pc, #20]	; (8012b88 <UTIL_LPM_Init+0x1c>)
 8012b72:	2200      	movs	r2, #0
 8012b74:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8012b76:	4b05      	ldr	r3, [pc, #20]	; (8012b8c <UTIL_LPM_Init+0x20>)
 8012b78:	2200      	movs	r2, #0
 8012b7a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012b7c:	bf00      	nop
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b84:	4770      	bx	lr
 8012b86:	bf00      	nop
 8012b88:	200031f0 	.word	0x200031f0
 8012b8c:	200031f4 	.word	0x200031f4

08012b90 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8012b90:	b480      	push	{r7}
 8012b92:	b087      	sub	sp, #28
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
 8012b98:	460b      	mov	r3, r1
 8012b9a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8012ba0:	613b      	str	r3, [r7, #16]
  return(result);
 8012ba2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8012ba4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012ba6:	b672      	cpsid	i
}
 8012ba8:	bf00      	nop
  
  switch(state)
 8012baa:	78fb      	ldrb	r3, [r7, #3]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d008      	beq.n	8012bc2 <UTIL_LPM_SetOffMode+0x32>
 8012bb0:	2b01      	cmp	r3, #1
 8012bb2:	d10e      	bne.n	8012bd2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8012bb4:	4b0d      	ldr	r3, [pc, #52]	; (8012bec <UTIL_LPM_SetOffMode+0x5c>)
 8012bb6:	681a      	ldr	r2, [r3, #0]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	4313      	orrs	r3, r2
 8012bbc:	4a0b      	ldr	r2, [pc, #44]	; (8012bec <UTIL_LPM_SetOffMode+0x5c>)
 8012bbe:	6013      	str	r3, [r2, #0]
      break;
 8012bc0:	e008      	b.n	8012bd4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	43da      	mvns	r2, r3
 8012bc6:	4b09      	ldr	r3, [pc, #36]	; (8012bec <UTIL_LPM_SetOffMode+0x5c>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	4013      	ands	r3, r2
 8012bcc:	4a07      	ldr	r2, [pc, #28]	; (8012bec <UTIL_LPM_SetOffMode+0x5c>)
 8012bce:	6013      	str	r3, [r2, #0]
      break;
 8012bd0:	e000      	b.n	8012bd4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8012bd2:	bf00      	nop
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	f383 8810 	msr	PRIMASK, r3
}
 8012bde:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012be0:	bf00      	nop
 8012be2:	371c      	adds	r7, #28
 8012be4:	46bd      	mov	sp, r7
 8012be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bea:	4770      	bx	lr
 8012bec:	200031f4 	.word	0x200031f4

08012bf0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b090      	sub	sp, #64	; 0x40
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8012bf8:	4b73      	ldr	r3, [pc, #460]	; (8012dc8 <UTIL_SEQ_Run+0x1d8>)
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8012bfe:	4b72      	ldr	r3, [pc, #456]	; (8012dc8 <UTIL_SEQ_Run+0x1d8>)
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	4013      	ands	r3, r2
 8012c06:	4a70      	ldr	r2, [pc, #448]	; (8012dc8 <UTIL_SEQ_Run+0x1d8>)
 8012c08:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8012c0a:	4b70      	ldr	r3, [pc, #448]	; (8012dcc <UTIL_SEQ_Run+0x1dc>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8012c10:	4b6f      	ldr	r3, [pc, #444]	; (8012dd0 <UTIL_SEQ_Run+0x1e0>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8012c16:	4b6f      	ldr	r3, [pc, #444]	; (8012dd4 <UTIL_SEQ_Run+0x1e4>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8012c1c:	4b6e      	ldr	r3, [pc, #440]	; (8012dd8 <UTIL_SEQ_Run+0x1e8>)
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012c22:	e08d      	b.n	8012d40 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8012c24:	2300      	movs	r3, #0
 8012c26:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8012c28:	e002      	b.n	8012c30 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8012c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8012c30:	4a6a      	ldr	r2, [pc, #424]	; (8012ddc <UTIL_SEQ_Run+0x1ec>)
 8012c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c34:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c3a:	401a      	ands	r2, r3
 8012c3c:	4b62      	ldr	r3, [pc, #392]	; (8012dc8 <UTIL_SEQ_Run+0x1d8>)
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	4013      	ands	r3, r2
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d0f1      	beq.n	8012c2a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8012c46:	4a65      	ldr	r2, [pc, #404]	; (8012ddc <UTIL_SEQ_Run+0x1ec>)
 8012c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c4a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c50:	401a      	ands	r2, r3
 8012c52:	4b5d      	ldr	r3, [pc, #372]	; (8012dc8 <UTIL_SEQ_Run+0x1d8>)
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	4013      	ands	r3, r2
 8012c58:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8012c5a:	4a60      	ldr	r2, [pc, #384]	; (8012ddc <UTIL_SEQ_Run+0x1ec>)
 8012c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c5e:	00db      	lsls	r3, r3, #3
 8012c60:	4413      	add	r3, r2
 8012c62:	685a      	ldr	r2, [r3, #4]
 8012c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c66:	4013      	ands	r3, r2
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d106      	bne.n	8012c7a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8012c6c:	4a5b      	ldr	r2, [pc, #364]	; (8012ddc <UTIL_SEQ_Run+0x1ec>)
 8012c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c70:	00db      	lsls	r3, r3, #3
 8012c72:	4413      	add	r3, r2
 8012c74:	f04f 32ff 	mov.w	r2, #4294967295
 8012c78:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8012c7a:	4a58      	ldr	r2, [pc, #352]	; (8012ddc <UTIL_SEQ_Run+0x1ec>)
 8012c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c7e:	00db      	lsls	r3, r3, #3
 8012c80:	4413      	add	r3, r2
 8012c82:	685a      	ldr	r2, [r3, #4]
 8012c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c86:	4013      	ands	r3, r2
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f000 f9b3 	bl	8012ff4 <SEQ_BitPosition>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	461a      	mov	r2, r3
 8012c92:	4b53      	ldr	r3, [pc, #332]	; (8012de0 <UTIL_SEQ_Run+0x1f0>)
 8012c94:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8012c96:	4a51      	ldr	r2, [pc, #324]	; (8012ddc <UTIL_SEQ_Run+0x1ec>)
 8012c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c9a:	00db      	lsls	r3, r3, #3
 8012c9c:	4413      	add	r3, r2
 8012c9e:	685a      	ldr	r2, [r3, #4]
 8012ca0:	4b4f      	ldr	r3, [pc, #316]	; (8012de0 <UTIL_SEQ_Run+0x1f0>)
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	2101      	movs	r1, #1
 8012ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8012caa:	43db      	mvns	r3, r3
 8012cac:	401a      	ands	r2, r3
 8012cae:	494b      	ldr	r1, [pc, #300]	; (8012ddc <UTIL_SEQ_Run+0x1ec>)
 8012cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cb2:	00db      	lsls	r3, r3, #3
 8012cb4:	440b      	add	r3, r1
 8012cb6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8012cbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8012cbe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012cc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8012cc2:	b672      	cpsid	i
}
 8012cc4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8012cc6:	4b46      	ldr	r3, [pc, #280]	; (8012de0 <UTIL_SEQ_Run+0x1f0>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	2201      	movs	r2, #1
 8012ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8012cd0:	43da      	mvns	r2, r3
 8012cd2:	4b3e      	ldr	r3, [pc, #248]	; (8012dcc <UTIL_SEQ_Run+0x1dc>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	4013      	ands	r3, r2
 8012cd8:	4a3c      	ldr	r2, [pc, #240]	; (8012dcc <UTIL_SEQ_Run+0x1dc>)
 8012cda:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8012cdc:	2302      	movs	r3, #2
 8012cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012ce0:	e013      	b.n	8012d0a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8012ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ce4:	3b01      	subs	r3, #1
 8012ce6:	4a3d      	ldr	r2, [pc, #244]	; (8012ddc <UTIL_SEQ_Run+0x1ec>)
 8012ce8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012cec:	4b3c      	ldr	r3, [pc, #240]	; (8012de0 <UTIL_SEQ_Run+0x1f0>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	2201      	movs	r2, #1
 8012cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8012cf6:	43da      	mvns	r2, r3
 8012cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cfa:	3b01      	subs	r3, #1
 8012cfc:	400a      	ands	r2, r1
 8012cfe:	4937      	ldr	r1, [pc, #220]	; (8012ddc <UTIL_SEQ_Run+0x1ec>)
 8012d00:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8012d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d06:	3b01      	subs	r3, #1
 8012d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d1e8      	bne.n	8012ce2 <UTIL_SEQ_Run+0xf2>
 8012d10:	6a3b      	ldr	r3, [r7, #32]
 8012d12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	f383 8810 	msr	PRIMASK, r3
}
 8012d1a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8012d1c:	4b30      	ldr	r3, [pc, #192]	; (8012de0 <UTIL_SEQ_Run+0x1f0>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	4a30      	ldr	r2, [pc, #192]	; (8012de4 <UTIL_SEQ_Run+0x1f4>)
 8012d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d26:	4798      	blx	r3

    local_taskset = TaskSet;
 8012d28:	4b28      	ldr	r3, [pc, #160]	; (8012dcc <UTIL_SEQ_Run+0x1dc>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8012d2e:	4b28      	ldr	r3, [pc, #160]	; (8012dd0 <UTIL_SEQ_Run+0x1e0>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8012d34:	4b27      	ldr	r3, [pc, #156]	; (8012dd4 <UTIL_SEQ_Run+0x1e4>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8012d3a:	4b27      	ldr	r3, [pc, #156]	; (8012dd8 <UTIL_SEQ_Run+0x1e8>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d44:	401a      	ands	r2, r3
 8012d46:	4b20      	ldr	r3, [pc, #128]	; (8012dc8 <UTIL_SEQ_Run+0x1d8>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	4013      	ands	r3, r2
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d005      	beq.n	8012d5c <UTIL_SEQ_Run+0x16c>
 8012d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d54:	4013      	ands	r3, r2
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	f43f af64 	beq.w	8012c24 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8012d5c:	4b20      	ldr	r3, [pc, #128]	; (8012de0 <UTIL_SEQ_Run+0x1f0>)
 8012d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8012d62:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8012d64:	f000 f938 	bl	8012fd8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d68:	f3ef 8310 	mrs	r3, PRIMASK
 8012d6c:	613b      	str	r3, [r7, #16]
  return(result);
 8012d6e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8012d70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8012d72:	b672      	cpsid	i
}
 8012d74:	bf00      	nop
  local_taskset = TaskSet;
 8012d76:	4b15      	ldr	r3, [pc, #84]	; (8012dcc <UTIL_SEQ_Run+0x1dc>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8012d7c:	4b14      	ldr	r3, [pc, #80]	; (8012dd0 <UTIL_SEQ_Run+0x1e0>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8012d82:	4b14      	ldr	r3, [pc, #80]	; (8012dd4 <UTIL_SEQ_Run+0x1e4>)
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8012d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d8c:	401a      	ands	r2, r3
 8012d8e:	4b0e      	ldr	r3, [pc, #56]	; (8012dc8 <UTIL_SEQ_Run+0x1d8>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	4013      	ands	r3, r2
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d107      	bne.n	8012da8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8012d98:	4b0f      	ldr	r3, [pc, #60]	; (8012dd8 <UTIL_SEQ_Run+0x1e8>)
 8012d9a:	681a      	ldr	r2, [r3, #0]
 8012d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d9e:	4013      	ands	r3, r2
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d101      	bne.n	8012da8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8012da4:	f7ef ff12 	bl	8002bcc <UTIL_SEQ_Idle>
 8012da8:	69fb      	ldr	r3, [r7, #28]
 8012daa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	f383 8810 	msr	PRIMASK, r3
}
 8012db2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8012db4:	f000 f917 	bl	8012fe6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8012db8:	4a03      	ldr	r2, [pc, #12]	; (8012dc8 <UTIL_SEQ_Run+0x1d8>)
 8012dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dbc:	6013      	str	r3, [r2, #0]

  return;
 8012dbe:	bf00      	nop
}
 8012dc0:	3740      	adds	r7, #64	; 0x40
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}
 8012dc6:	bf00      	nop
 8012dc8:	2000017c 	.word	0x2000017c
 8012dcc:	200031f8 	.word	0x200031f8
 8012dd0:	200031fc 	.word	0x200031fc
 8012dd4:	20000178 	.word	0x20000178
 8012dd8:	20003200 	.word	0x20003200
 8012ddc:	20003288 	.word	0x20003288
 8012de0:	20003204 	.word	0x20003204
 8012de4:	20003208 	.word	0x20003208

08012de8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b088      	sub	sp, #32
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	60f8      	str	r0, [r7, #12]
 8012df0:	60b9      	str	r1, [r7, #8]
 8012df2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012df4:	f3ef 8310 	mrs	r3, PRIMASK
 8012df8:	617b      	str	r3, [r7, #20]
  return(result);
 8012dfa:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8012dfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8012dfe:	b672      	cpsid	i
}
 8012e00:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8012e02:	68f8      	ldr	r0, [r7, #12]
 8012e04:	f000 f8f6 	bl	8012ff4 <SEQ_BitPosition>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	4619      	mov	r1, r3
 8012e0c:	4a06      	ldr	r2, [pc, #24]	; (8012e28 <UTIL_SEQ_RegTask+0x40>)
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e18:	69bb      	ldr	r3, [r7, #24]
 8012e1a:	f383 8810 	msr	PRIMASK, r3
}
 8012e1e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8012e20:	bf00      	nop
}
 8012e22:	3720      	adds	r7, #32
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	20003208 	.word	0x20003208

08012e2c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8012e2c:	b480      	push	{r7}
 8012e2e:	b087      	sub	sp, #28
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
 8012e34:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e36:	f3ef 8310 	mrs	r3, PRIMASK
 8012e3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8012e3c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012e3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012e40:	b672      	cpsid	i
}
 8012e42:	bf00      	nop

  TaskSet |= TaskId_bm;
 8012e44:	4b0d      	ldr	r3, [pc, #52]	; (8012e7c <UTIL_SEQ_SetTask+0x50>)
 8012e46:	681a      	ldr	r2, [r3, #0]
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	4313      	orrs	r3, r2
 8012e4c:	4a0b      	ldr	r2, [pc, #44]	; (8012e7c <UTIL_SEQ_SetTask+0x50>)
 8012e4e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012e50:	4a0b      	ldr	r2, [pc, #44]	; (8012e80 <UTIL_SEQ_SetTask+0x54>)
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	431a      	orrs	r2, r3
 8012e5c:	4908      	ldr	r1, [pc, #32]	; (8012e80 <UTIL_SEQ_SetTask+0x54>)
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	f383 8810 	msr	PRIMASK, r3
}
 8012e6e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012e70:	bf00      	nop
}
 8012e72:	371c      	adds	r7, #28
 8012e74:	46bd      	mov	sp, r7
 8012e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7a:	4770      	bx	lr
 8012e7c:	200031f8 	.word	0x200031f8
 8012e80:	20003288 	.word	0x20003288

08012e84 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8012e84:	b480      	push	{r7}
 8012e86:	b087      	sub	sp, #28
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8012e90:	60fb      	str	r3, [r7, #12]
  return(result);
 8012e92:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012e94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012e96:	b672      	cpsid	i
}
 8012e98:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	43da      	mvns	r2, r3
 8012e9e:	4b08      	ldr	r3, [pc, #32]	; (8012ec0 <UTIL_SEQ_PauseTask+0x3c>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	4013      	ands	r3, r2
 8012ea4:	4a06      	ldr	r2, [pc, #24]	; (8012ec0 <UTIL_SEQ_PauseTask+0x3c>)
 8012ea6:	6013      	str	r3, [r2, #0]
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012eac:	693b      	ldr	r3, [r7, #16]
 8012eae:	f383 8810 	msr	PRIMASK, r3
}
 8012eb2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012eb4:	bf00      	nop
}
 8012eb6:	371c      	adds	r7, #28
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebe:	4770      	bx	lr
 8012ec0:	20000178 	.word	0x20000178

08012ec4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b087      	sub	sp, #28
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8012ed0:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ed2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012ed4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012ed6:	b672      	cpsid	i
}
 8012ed8:	bf00      	nop

  TaskMask |= TaskId_bm;
 8012eda:	4b09      	ldr	r3, [pc, #36]	; (8012f00 <UTIL_SEQ_ResumeTask+0x3c>)
 8012edc:	681a      	ldr	r2, [r3, #0]
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	4313      	orrs	r3, r2
 8012ee2:	4a07      	ldr	r2, [pc, #28]	; (8012f00 <UTIL_SEQ_ResumeTask+0x3c>)
 8012ee4:	6013      	str	r3, [r2, #0]
 8012ee6:	697b      	ldr	r3, [r7, #20]
 8012ee8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	f383 8810 	msr	PRIMASK, r3
}
 8012ef0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012ef2:	bf00      	nop
}
 8012ef4:	371c      	adds	r7, #28
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efc:	4770      	bx	lr
 8012efe:	bf00      	nop
 8012f00:	20000178 	.word	0x20000178

08012f04 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8012f04:	b480      	push	{r7}
 8012f06:	b087      	sub	sp, #28
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8012f10:	60fb      	str	r3, [r7, #12]
  return(result);
 8012f12:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012f14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012f16:	b672      	cpsid	i
}
 8012f18:	bf00      	nop

  EvtSet |= EvtId_bm;
 8012f1a:	4b09      	ldr	r3, [pc, #36]	; (8012f40 <UTIL_SEQ_SetEvt+0x3c>)
 8012f1c:	681a      	ldr	r2, [r3, #0]
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	4313      	orrs	r3, r2
 8012f22:	4a07      	ldr	r2, [pc, #28]	; (8012f40 <UTIL_SEQ_SetEvt+0x3c>)
 8012f24:	6013      	str	r3, [r2, #0]
 8012f26:	697b      	ldr	r3, [r7, #20]
 8012f28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	f383 8810 	msr	PRIMASK, r3
}
 8012f30:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012f32:	bf00      	nop
}
 8012f34:	371c      	adds	r7, #28
 8012f36:	46bd      	mov	sp, r7
 8012f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3c:	4770      	bx	lr
 8012f3e:	bf00      	nop
 8012f40:	200031fc 	.word	0x200031fc

08012f44 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b088      	sub	sp, #32
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8012f4c:	4b1f      	ldr	r3, [pc, #124]	; (8012fcc <UTIL_SEQ_WaitEvt+0x88>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8012f52:	4b1e      	ldr	r3, [pc, #120]	; (8012fcc <UTIL_SEQ_WaitEvt+0x88>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f5a:	d102      	bne.n	8012f62 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	61fb      	str	r3, [r7, #28]
 8012f60:	e005      	b.n	8012f6e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8012f62:	4b1a      	ldr	r3, [pc, #104]	; (8012fcc <UTIL_SEQ_WaitEvt+0x88>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	2201      	movs	r2, #1
 8012f68:	fa02 f303 	lsl.w	r3, r2, r3
 8012f6c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8012f6e:	4b18      	ldr	r3, [pc, #96]	; (8012fd0 <UTIL_SEQ_WaitEvt+0x8c>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8012f74:	4a16      	ldr	r2, [pc, #88]	; (8012fd0 <UTIL_SEQ_WaitEvt+0x8c>)
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8012f7a:	e003      	b.n	8012f84 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8012f7c:	6879      	ldr	r1, [r7, #4]
 8012f7e:	69f8      	ldr	r0, [r7, #28]
 8012f80:	f7ef fe2b 	bl	8002bda <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8012f84:	4b13      	ldr	r3, [pc, #76]	; (8012fd4 <UTIL_SEQ_WaitEvt+0x90>)
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	4013      	ands	r3, r2
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d0f5      	beq.n	8012f7c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8012f90:	4a0e      	ldr	r2, [pc, #56]	; (8012fcc <UTIL_SEQ_WaitEvt+0x88>)
 8012f92:	69bb      	ldr	r3, [r7, #24]
 8012f94:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f96:	f3ef 8310 	mrs	r3, PRIMASK
 8012f9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8012f9c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012f9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8012fa0:	b672      	cpsid	i
}
 8012fa2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	43da      	mvns	r2, r3
 8012fa8:	4b0a      	ldr	r3, [pc, #40]	; (8012fd4 <UTIL_SEQ_WaitEvt+0x90>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	4013      	ands	r3, r2
 8012fae:	4a09      	ldr	r2, [pc, #36]	; (8012fd4 <UTIL_SEQ_WaitEvt+0x90>)
 8012fb0:	6013      	str	r3, [r2, #0]
 8012fb2:	693b      	ldr	r3, [r7, #16]
 8012fb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	f383 8810 	msr	PRIMASK, r3
}
 8012fbc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8012fbe:	4a04      	ldr	r2, [pc, #16]	; (8012fd0 <UTIL_SEQ_WaitEvt+0x8c>)
 8012fc0:	697b      	ldr	r3, [r7, #20]
 8012fc2:	6013      	str	r3, [r2, #0]
  return;
 8012fc4:	bf00      	nop
}
 8012fc6:	3720      	adds	r7, #32
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}
 8012fcc:	20003204 	.word	0x20003204
 8012fd0:	20003200 	.word	0x20003200
 8012fd4:	200031fc 	.word	0x200031fc

08012fd8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8012fd8:	b480      	push	{r7}
 8012fda:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8012fdc:	bf00      	nop
}
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe4:	4770      	bx	lr

08012fe6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8012fe6:	b480      	push	{r7}
 8012fe8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8012fea:	bf00      	nop
}
 8012fec:	46bd      	mov	sp, r7
 8012fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff2:	4770      	bx	lr

08012ff4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b085      	sub	sp, #20
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8013004:	68bb      	ldr	r3, [r7, #8]
 8013006:	0c1b      	lsrs	r3, r3, #16
 8013008:	041b      	lsls	r3, r3, #16
 801300a:	2b00      	cmp	r3, #0
 801300c:	d104      	bne.n	8013018 <SEQ_BitPosition+0x24>
 801300e:	2310      	movs	r3, #16
 8013010:	73fb      	strb	r3, [r7, #15]
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	041b      	lsls	r3, r3, #16
 8013016:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801301e:	2b00      	cmp	r3, #0
 8013020:	d105      	bne.n	801302e <SEQ_BitPosition+0x3a>
 8013022:	7bfb      	ldrb	r3, [r7, #15]
 8013024:	3308      	adds	r3, #8
 8013026:	73fb      	strb	r3, [r7, #15]
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	021b      	lsls	r3, r3, #8
 801302c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013034:	2b00      	cmp	r3, #0
 8013036:	d105      	bne.n	8013044 <SEQ_BitPosition+0x50>
 8013038:	7bfb      	ldrb	r3, [r7, #15]
 801303a:	3304      	adds	r3, #4
 801303c:	73fb      	strb	r3, [r7, #15]
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	011b      	lsls	r3, r3, #4
 8013042:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	0f1b      	lsrs	r3, r3, #28
 8013048:	4a07      	ldr	r2, [pc, #28]	; (8013068 <SEQ_BitPosition+0x74>)
 801304a:	5cd2      	ldrb	r2, [r2, r3]
 801304c:	7bfb      	ldrb	r3, [r7, #15]
 801304e:	4413      	add	r3, r2
 8013050:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8013052:	7bfb      	ldrb	r3, [r7, #15]
 8013054:	f1c3 031f 	rsb	r3, r3, #31
 8013058:	b2db      	uxtb	r3, r3
}
 801305a:	4618      	mov	r0, r3
 801305c:	3714      	adds	r7, #20
 801305e:	46bd      	mov	sp, r7
 8013060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013064:	4770      	bx	lr
 8013066:	bf00      	nop
 8013068:	080144d0 	.word	0x080144d0

0801306c <memset>:
 801306c:	4402      	add	r2, r0
 801306e:	4603      	mov	r3, r0
 8013070:	4293      	cmp	r3, r2
 8013072:	d100      	bne.n	8013076 <memset+0xa>
 8013074:	4770      	bx	lr
 8013076:	f803 1b01 	strb.w	r1, [r3], #1
 801307a:	e7f9      	b.n	8013070 <memset+0x4>

0801307c <__libc_init_array>:
 801307c:	b570      	push	{r4, r5, r6, lr}
 801307e:	4d0d      	ldr	r5, [pc, #52]	; (80130b4 <__libc_init_array+0x38>)
 8013080:	4c0d      	ldr	r4, [pc, #52]	; (80130b8 <__libc_init_array+0x3c>)
 8013082:	1b64      	subs	r4, r4, r5
 8013084:	10a4      	asrs	r4, r4, #2
 8013086:	2600      	movs	r6, #0
 8013088:	42a6      	cmp	r6, r4
 801308a:	d109      	bne.n	80130a0 <__libc_init_array+0x24>
 801308c:	4d0b      	ldr	r5, [pc, #44]	; (80130bc <__libc_init_array+0x40>)
 801308e:	4c0c      	ldr	r4, [pc, #48]	; (80130c0 <__libc_init_array+0x44>)
 8013090:	f001 f8ba 	bl	8014208 <_init>
 8013094:	1b64      	subs	r4, r4, r5
 8013096:	10a4      	asrs	r4, r4, #2
 8013098:	2600      	movs	r6, #0
 801309a:	42a6      	cmp	r6, r4
 801309c:	d105      	bne.n	80130aa <__libc_init_array+0x2e>
 801309e:	bd70      	pop	{r4, r5, r6, pc}
 80130a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80130a4:	4798      	blx	r3
 80130a6:	3601      	adds	r6, #1
 80130a8:	e7ee      	b.n	8013088 <__libc_init_array+0xc>
 80130aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80130ae:	4798      	blx	r3
 80130b0:	3601      	adds	r6, #1
 80130b2:	e7f2      	b.n	801309a <__libc_init_array+0x1e>
 80130b4:	080146b8 	.word	0x080146b8
 80130b8:	080146b8 	.word	0x080146b8
 80130bc:	080146b8 	.word	0x080146b8
 80130c0:	080146bc 	.word	0x080146bc

080130c4 <memcpy>:
 80130c4:	440a      	add	r2, r1
 80130c6:	4291      	cmp	r1, r2
 80130c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80130cc:	d100      	bne.n	80130d0 <memcpy+0xc>
 80130ce:	4770      	bx	lr
 80130d0:	b510      	push	{r4, lr}
 80130d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80130da:	4291      	cmp	r1, r2
 80130dc:	d1f9      	bne.n	80130d2 <memcpy+0xe>
 80130de:	bd10      	pop	{r4, pc}

080130e0 <cos>:
 80130e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80130e2:	ec53 2b10 	vmov	r2, r3, d0
 80130e6:	4826      	ldr	r0, [pc, #152]	; (8013180 <cos+0xa0>)
 80130e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80130ec:	4281      	cmp	r1, r0
 80130ee:	dc06      	bgt.n	80130fe <cos+0x1e>
 80130f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8013178 <cos+0x98>
 80130f4:	b005      	add	sp, #20
 80130f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80130fa:	f000 b89d 	b.w	8013238 <__kernel_cos>
 80130fe:	4821      	ldr	r0, [pc, #132]	; (8013184 <cos+0xa4>)
 8013100:	4281      	cmp	r1, r0
 8013102:	dd09      	ble.n	8013118 <cos+0x38>
 8013104:	ee10 0a10 	vmov	r0, s0
 8013108:	4619      	mov	r1, r3
 801310a:	f7ed f845 	bl	8000198 <__aeabi_dsub>
 801310e:	ec41 0b10 	vmov	d0, r0, r1
 8013112:	b005      	add	sp, #20
 8013114:	f85d fb04 	ldr.w	pc, [sp], #4
 8013118:	4668      	mov	r0, sp
 801311a:	f000 fa15 	bl	8013548 <__ieee754_rem_pio2>
 801311e:	f000 0003 	and.w	r0, r0, #3
 8013122:	2801      	cmp	r0, #1
 8013124:	d00b      	beq.n	801313e <cos+0x5e>
 8013126:	2802      	cmp	r0, #2
 8013128:	d016      	beq.n	8013158 <cos+0x78>
 801312a:	b9e0      	cbnz	r0, 8013166 <cos+0x86>
 801312c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013130:	ed9d 0b00 	vldr	d0, [sp]
 8013134:	f000 f880 	bl	8013238 <__kernel_cos>
 8013138:	ec51 0b10 	vmov	r0, r1, d0
 801313c:	e7e7      	b.n	801310e <cos+0x2e>
 801313e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013142:	ed9d 0b00 	vldr	d0, [sp]
 8013146:	f000 f93f 	bl	80133c8 <__kernel_sin>
 801314a:	ec53 2b10 	vmov	r2, r3, d0
 801314e:	ee10 0a10 	vmov	r0, s0
 8013152:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013156:	e7da      	b.n	801310e <cos+0x2e>
 8013158:	ed9d 1b02 	vldr	d1, [sp, #8]
 801315c:	ed9d 0b00 	vldr	d0, [sp]
 8013160:	f000 f86a 	bl	8013238 <__kernel_cos>
 8013164:	e7f1      	b.n	801314a <cos+0x6a>
 8013166:	ed9d 1b02 	vldr	d1, [sp, #8]
 801316a:	ed9d 0b00 	vldr	d0, [sp]
 801316e:	2001      	movs	r0, #1
 8013170:	f000 f92a 	bl	80133c8 <__kernel_sin>
 8013174:	e7e0      	b.n	8013138 <cos+0x58>
 8013176:	bf00      	nop
	...
 8013180:	3fe921fb 	.word	0x3fe921fb
 8013184:	7fefffff 	.word	0x7fefffff

08013188 <sin>:
 8013188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801318a:	ec53 2b10 	vmov	r2, r3, d0
 801318e:	4828      	ldr	r0, [pc, #160]	; (8013230 <sin+0xa8>)
 8013190:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013194:	4281      	cmp	r1, r0
 8013196:	dc07      	bgt.n	80131a8 <sin+0x20>
 8013198:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8013228 <sin+0xa0>
 801319c:	2000      	movs	r0, #0
 801319e:	b005      	add	sp, #20
 80131a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80131a4:	f000 b910 	b.w	80133c8 <__kernel_sin>
 80131a8:	4822      	ldr	r0, [pc, #136]	; (8013234 <sin+0xac>)
 80131aa:	4281      	cmp	r1, r0
 80131ac:	dd09      	ble.n	80131c2 <sin+0x3a>
 80131ae:	ee10 0a10 	vmov	r0, s0
 80131b2:	4619      	mov	r1, r3
 80131b4:	f7ec fff0 	bl	8000198 <__aeabi_dsub>
 80131b8:	ec41 0b10 	vmov	d0, r0, r1
 80131bc:	b005      	add	sp, #20
 80131be:	f85d fb04 	ldr.w	pc, [sp], #4
 80131c2:	4668      	mov	r0, sp
 80131c4:	f000 f9c0 	bl	8013548 <__ieee754_rem_pio2>
 80131c8:	f000 0003 	and.w	r0, r0, #3
 80131cc:	2801      	cmp	r0, #1
 80131ce:	d00c      	beq.n	80131ea <sin+0x62>
 80131d0:	2802      	cmp	r0, #2
 80131d2:	d011      	beq.n	80131f8 <sin+0x70>
 80131d4:	b9f0      	cbnz	r0, 8013214 <sin+0x8c>
 80131d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80131da:	ed9d 0b00 	vldr	d0, [sp]
 80131de:	2001      	movs	r0, #1
 80131e0:	f000 f8f2 	bl	80133c8 <__kernel_sin>
 80131e4:	ec51 0b10 	vmov	r0, r1, d0
 80131e8:	e7e6      	b.n	80131b8 <sin+0x30>
 80131ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80131ee:	ed9d 0b00 	vldr	d0, [sp]
 80131f2:	f000 f821 	bl	8013238 <__kernel_cos>
 80131f6:	e7f5      	b.n	80131e4 <sin+0x5c>
 80131f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80131fc:	ed9d 0b00 	vldr	d0, [sp]
 8013200:	2001      	movs	r0, #1
 8013202:	f000 f8e1 	bl	80133c8 <__kernel_sin>
 8013206:	ec53 2b10 	vmov	r2, r3, d0
 801320a:	ee10 0a10 	vmov	r0, s0
 801320e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013212:	e7d1      	b.n	80131b8 <sin+0x30>
 8013214:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013218:	ed9d 0b00 	vldr	d0, [sp]
 801321c:	f000 f80c 	bl	8013238 <__kernel_cos>
 8013220:	e7f1      	b.n	8013206 <sin+0x7e>
 8013222:	bf00      	nop
 8013224:	f3af 8000 	nop.w
	...
 8013230:	3fe921fb 	.word	0x3fe921fb
 8013234:	7fefffff 	.word	0x7fefffff

08013238 <__kernel_cos>:
 8013238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801323c:	ec57 6b10 	vmov	r6, r7, d0
 8013240:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013244:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013248:	ed8d 1b00 	vstr	d1, [sp]
 801324c:	da07      	bge.n	801325e <__kernel_cos+0x26>
 801324e:	ee10 0a10 	vmov	r0, s0
 8013252:	4639      	mov	r1, r7
 8013254:	f7ed fbf2 	bl	8000a3c <__aeabi_d2iz>
 8013258:	2800      	cmp	r0, #0
 801325a:	f000 8088 	beq.w	801336e <__kernel_cos+0x136>
 801325e:	4632      	mov	r2, r6
 8013260:	463b      	mov	r3, r7
 8013262:	4630      	mov	r0, r6
 8013264:	4639      	mov	r1, r7
 8013266:	f7ed f94f 	bl	8000508 <__aeabi_dmul>
 801326a:	4b51      	ldr	r3, [pc, #324]	; (80133b0 <__kernel_cos+0x178>)
 801326c:	2200      	movs	r2, #0
 801326e:	4604      	mov	r4, r0
 8013270:	460d      	mov	r5, r1
 8013272:	f7ed f949 	bl	8000508 <__aeabi_dmul>
 8013276:	a340      	add	r3, pc, #256	; (adr r3, 8013378 <__kernel_cos+0x140>)
 8013278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801327c:	4682      	mov	sl, r0
 801327e:	468b      	mov	fp, r1
 8013280:	4620      	mov	r0, r4
 8013282:	4629      	mov	r1, r5
 8013284:	f7ed f940 	bl	8000508 <__aeabi_dmul>
 8013288:	a33d      	add	r3, pc, #244	; (adr r3, 8013380 <__kernel_cos+0x148>)
 801328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328e:	f7ec ff85 	bl	800019c <__adddf3>
 8013292:	4622      	mov	r2, r4
 8013294:	462b      	mov	r3, r5
 8013296:	f7ed f937 	bl	8000508 <__aeabi_dmul>
 801329a:	a33b      	add	r3, pc, #236	; (adr r3, 8013388 <__kernel_cos+0x150>)
 801329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a0:	f7ec ff7a 	bl	8000198 <__aeabi_dsub>
 80132a4:	4622      	mov	r2, r4
 80132a6:	462b      	mov	r3, r5
 80132a8:	f7ed f92e 	bl	8000508 <__aeabi_dmul>
 80132ac:	a338      	add	r3, pc, #224	; (adr r3, 8013390 <__kernel_cos+0x158>)
 80132ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b2:	f7ec ff73 	bl	800019c <__adddf3>
 80132b6:	4622      	mov	r2, r4
 80132b8:	462b      	mov	r3, r5
 80132ba:	f7ed f925 	bl	8000508 <__aeabi_dmul>
 80132be:	a336      	add	r3, pc, #216	; (adr r3, 8013398 <__kernel_cos+0x160>)
 80132c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c4:	f7ec ff68 	bl	8000198 <__aeabi_dsub>
 80132c8:	4622      	mov	r2, r4
 80132ca:	462b      	mov	r3, r5
 80132cc:	f7ed f91c 	bl	8000508 <__aeabi_dmul>
 80132d0:	a333      	add	r3, pc, #204	; (adr r3, 80133a0 <__kernel_cos+0x168>)
 80132d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d6:	f7ec ff61 	bl	800019c <__adddf3>
 80132da:	4622      	mov	r2, r4
 80132dc:	462b      	mov	r3, r5
 80132de:	f7ed f913 	bl	8000508 <__aeabi_dmul>
 80132e2:	4622      	mov	r2, r4
 80132e4:	462b      	mov	r3, r5
 80132e6:	f7ed f90f 	bl	8000508 <__aeabi_dmul>
 80132ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132ee:	4604      	mov	r4, r0
 80132f0:	460d      	mov	r5, r1
 80132f2:	4630      	mov	r0, r6
 80132f4:	4639      	mov	r1, r7
 80132f6:	f7ed f907 	bl	8000508 <__aeabi_dmul>
 80132fa:	460b      	mov	r3, r1
 80132fc:	4602      	mov	r2, r0
 80132fe:	4629      	mov	r1, r5
 8013300:	4620      	mov	r0, r4
 8013302:	f7ec ff49 	bl	8000198 <__aeabi_dsub>
 8013306:	4b2b      	ldr	r3, [pc, #172]	; (80133b4 <__kernel_cos+0x17c>)
 8013308:	4598      	cmp	r8, r3
 801330a:	4606      	mov	r6, r0
 801330c:	460f      	mov	r7, r1
 801330e:	dc10      	bgt.n	8013332 <__kernel_cos+0xfa>
 8013310:	4602      	mov	r2, r0
 8013312:	460b      	mov	r3, r1
 8013314:	4650      	mov	r0, sl
 8013316:	4659      	mov	r1, fp
 8013318:	f7ec ff3e 	bl	8000198 <__aeabi_dsub>
 801331c:	460b      	mov	r3, r1
 801331e:	4926      	ldr	r1, [pc, #152]	; (80133b8 <__kernel_cos+0x180>)
 8013320:	4602      	mov	r2, r0
 8013322:	2000      	movs	r0, #0
 8013324:	f7ec ff38 	bl	8000198 <__aeabi_dsub>
 8013328:	ec41 0b10 	vmov	d0, r0, r1
 801332c:	b003      	add	sp, #12
 801332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013332:	4b22      	ldr	r3, [pc, #136]	; (80133bc <__kernel_cos+0x184>)
 8013334:	4920      	ldr	r1, [pc, #128]	; (80133b8 <__kernel_cos+0x180>)
 8013336:	4598      	cmp	r8, r3
 8013338:	bfcc      	ite	gt
 801333a:	4d21      	ldrgt	r5, [pc, #132]	; (80133c0 <__kernel_cos+0x188>)
 801333c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8013340:	2400      	movs	r4, #0
 8013342:	4622      	mov	r2, r4
 8013344:	462b      	mov	r3, r5
 8013346:	2000      	movs	r0, #0
 8013348:	f7ec ff26 	bl	8000198 <__aeabi_dsub>
 801334c:	4622      	mov	r2, r4
 801334e:	4680      	mov	r8, r0
 8013350:	4689      	mov	r9, r1
 8013352:	462b      	mov	r3, r5
 8013354:	4650      	mov	r0, sl
 8013356:	4659      	mov	r1, fp
 8013358:	f7ec ff1e 	bl	8000198 <__aeabi_dsub>
 801335c:	4632      	mov	r2, r6
 801335e:	463b      	mov	r3, r7
 8013360:	f7ec ff1a 	bl	8000198 <__aeabi_dsub>
 8013364:	4602      	mov	r2, r0
 8013366:	460b      	mov	r3, r1
 8013368:	4640      	mov	r0, r8
 801336a:	4649      	mov	r1, r9
 801336c:	e7da      	b.n	8013324 <__kernel_cos+0xec>
 801336e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80133a8 <__kernel_cos+0x170>
 8013372:	e7db      	b.n	801332c <__kernel_cos+0xf4>
 8013374:	f3af 8000 	nop.w
 8013378:	be8838d4 	.word	0xbe8838d4
 801337c:	bda8fae9 	.word	0xbda8fae9
 8013380:	bdb4b1c4 	.word	0xbdb4b1c4
 8013384:	3e21ee9e 	.word	0x3e21ee9e
 8013388:	809c52ad 	.word	0x809c52ad
 801338c:	3e927e4f 	.word	0x3e927e4f
 8013390:	19cb1590 	.word	0x19cb1590
 8013394:	3efa01a0 	.word	0x3efa01a0
 8013398:	16c15177 	.word	0x16c15177
 801339c:	3f56c16c 	.word	0x3f56c16c
 80133a0:	5555554c 	.word	0x5555554c
 80133a4:	3fa55555 	.word	0x3fa55555
 80133a8:	00000000 	.word	0x00000000
 80133ac:	3ff00000 	.word	0x3ff00000
 80133b0:	3fe00000 	.word	0x3fe00000
 80133b4:	3fd33332 	.word	0x3fd33332
 80133b8:	3ff00000 	.word	0x3ff00000
 80133bc:	3fe90000 	.word	0x3fe90000
 80133c0:	3fd20000 	.word	0x3fd20000
 80133c4:	00000000 	.word	0x00000000

080133c8 <__kernel_sin>:
 80133c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133cc:	ed2d 8b04 	vpush	{d8-d9}
 80133d0:	eeb0 8a41 	vmov.f32	s16, s2
 80133d4:	eef0 8a61 	vmov.f32	s17, s3
 80133d8:	ec55 4b10 	vmov	r4, r5, d0
 80133dc:	b083      	sub	sp, #12
 80133de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80133e2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80133e6:	9001      	str	r0, [sp, #4]
 80133e8:	da06      	bge.n	80133f8 <__kernel_sin+0x30>
 80133ea:	ee10 0a10 	vmov	r0, s0
 80133ee:	4629      	mov	r1, r5
 80133f0:	f7ed fb24 	bl	8000a3c <__aeabi_d2iz>
 80133f4:	2800      	cmp	r0, #0
 80133f6:	d051      	beq.n	801349c <__kernel_sin+0xd4>
 80133f8:	4622      	mov	r2, r4
 80133fa:	462b      	mov	r3, r5
 80133fc:	4620      	mov	r0, r4
 80133fe:	4629      	mov	r1, r5
 8013400:	f7ed f882 	bl	8000508 <__aeabi_dmul>
 8013404:	4682      	mov	sl, r0
 8013406:	468b      	mov	fp, r1
 8013408:	4602      	mov	r2, r0
 801340a:	460b      	mov	r3, r1
 801340c:	4620      	mov	r0, r4
 801340e:	4629      	mov	r1, r5
 8013410:	f7ed f87a 	bl	8000508 <__aeabi_dmul>
 8013414:	a341      	add	r3, pc, #260	; (adr r3, 801351c <__kernel_sin+0x154>)
 8013416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801341a:	4680      	mov	r8, r0
 801341c:	4689      	mov	r9, r1
 801341e:	4650      	mov	r0, sl
 8013420:	4659      	mov	r1, fp
 8013422:	f7ed f871 	bl	8000508 <__aeabi_dmul>
 8013426:	a33f      	add	r3, pc, #252	; (adr r3, 8013524 <__kernel_sin+0x15c>)
 8013428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801342c:	f7ec feb4 	bl	8000198 <__aeabi_dsub>
 8013430:	4652      	mov	r2, sl
 8013432:	465b      	mov	r3, fp
 8013434:	f7ed f868 	bl	8000508 <__aeabi_dmul>
 8013438:	a33c      	add	r3, pc, #240	; (adr r3, 801352c <__kernel_sin+0x164>)
 801343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801343e:	f7ec fead 	bl	800019c <__adddf3>
 8013442:	4652      	mov	r2, sl
 8013444:	465b      	mov	r3, fp
 8013446:	f7ed f85f 	bl	8000508 <__aeabi_dmul>
 801344a:	a33a      	add	r3, pc, #232	; (adr r3, 8013534 <__kernel_sin+0x16c>)
 801344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013450:	f7ec fea2 	bl	8000198 <__aeabi_dsub>
 8013454:	4652      	mov	r2, sl
 8013456:	465b      	mov	r3, fp
 8013458:	f7ed f856 	bl	8000508 <__aeabi_dmul>
 801345c:	a337      	add	r3, pc, #220	; (adr r3, 801353c <__kernel_sin+0x174>)
 801345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013462:	f7ec fe9b 	bl	800019c <__adddf3>
 8013466:	9b01      	ldr	r3, [sp, #4]
 8013468:	4606      	mov	r6, r0
 801346a:	460f      	mov	r7, r1
 801346c:	b9eb      	cbnz	r3, 80134aa <__kernel_sin+0xe2>
 801346e:	4602      	mov	r2, r0
 8013470:	460b      	mov	r3, r1
 8013472:	4650      	mov	r0, sl
 8013474:	4659      	mov	r1, fp
 8013476:	f7ed f847 	bl	8000508 <__aeabi_dmul>
 801347a:	a325      	add	r3, pc, #148	; (adr r3, 8013510 <__kernel_sin+0x148>)
 801347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013480:	f7ec fe8a 	bl	8000198 <__aeabi_dsub>
 8013484:	4642      	mov	r2, r8
 8013486:	464b      	mov	r3, r9
 8013488:	f7ed f83e 	bl	8000508 <__aeabi_dmul>
 801348c:	4602      	mov	r2, r0
 801348e:	460b      	mov	r3, r1
 8013490:	4620      	mov	r0, r4
 8013492:	4629      	mov	r1, r5
 8013494:	f7ec fe82 	bl	800019c <__adddf3>
 8013498:	4604      	mov	r4, r0
 801349a:	460d      	mov	r5, r1
 801349c:	ec45 4b10 	vmov	d0, r4, r5
 80134a0:	b003      	add	sp, #12
 80134a2:	ecbd 8b04 	vpop	{d8-d9}
 80134a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134aa:	4b1b      	ldr	r3, [pc, #108]	; (8013518 <__kernel_sin+0x150>)
 80134ac:	ec51 0b18 	vmov	r0, r1, d8
 80134b0:	2200      	movs	r2, #0
 80134b2:	f7ed f829 	bl	8000508 <__aeabi_dmul>
 80134b6:	4632      	mov	r2, r6
 80134b8:	ec41 0b19 	vmov	d9, r0, r1
 80134bc:	463b      	mov	r3, r7
 80134be:	4640      	mov	r0, r8
 80134c0:	4649      	mov	r1, r9
 80134c2:	f7ed f821 	bl	8000508 <__aeabi_dmul>
 80134c6:	4602      	mov	r2, r0
 80134c8:	460b      	mov	r3, r1
 80134ca:	ec51 0b19 	vmov	r0, r1, d9
 80134ce:	f7ec fe63 	bl	8000198 <__aeabi_dsub>
 80134d2:	4652      	mov	r2, sl
 80134d4:	465b      	mov	r3, fp
 80134d6:	f7ed f817 	bl	8000508 <__aeabi_dmul>
 80134da:	ec53 2b18 	vmov	r2, r3, d8
 80134de:	f7ec fe5b 	bl	8000198 <__aeabi_dsub>
 80134e2:	a30b      	add	r3, pc, #44	; (adr r3, 8013510 <__kernel_sin+0x148>)
 80134e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e8:	4606      	mov	r6, r0
 80134ea:	460f      	mov	r7, r1
 80134ec:	4640      	mov	r0, r8
 80134ee:	4649      	mov	r1, r9
 80134f0:	f7ed f80a 	bl	8000508 <__aeabi_dmul>
 80134f4:	4602      	mov	r2, r0
 80134f6:	460b      	mov	r3, r1
 80134f8:	4630      	mov	r0, r6
 80134fa:	4639      	mov	r1, r7
 80134fc:	f7ec fe4e 	bl	800019c <__adddf3>
 8013500:	4602      	mov	r2, r0
 8013502:	460b      	mov	r3, r1
 8013504:	4620      	mov	r0, r4
 8013506:	4629      	mov	r1, r5
 8013508:	f7ec fe46 	bl	8000198 <__aeabi_dsub>
 801350c:	e7c4      	b.n	8013498 <__kernel_sin+0xd0>
 801350e:	bf00      	nop
 8013510:	55555549 	.word	0x55555549
 8013514:	3fc55555 	.word	0x3fc55555
 8013518:	3fe00000 	.word	0x3fe00000
 801351c:	5acfd57c 	.word	0x5acfd57c
 8013520:	3de5d93a 	.word	0x3de5d93a
 8013524:	8a2b9ceb 	.word	0x8a2b9ceb
 8013528:	3e5ae5e6 	.word	0x3e5ae5e6
 801352c:	57b1fe7d 	.word	0x57b1fe7d
 8013530:	3ec71de3 	.word	0x3ec71de3
 8013534:	19c161d5 	.word	0x19c161d5
 8013538:	3f2a01a0 	.word	0x3f2a01a0
 801353c:	1110f8a6 	.word	0x1110f8a6
 8013540:	3f811111 	.word	0x3f811111
 8013544:	00000000 	.word	0x00000000

08013548 <__ieee754_rem_pio2>:
 8013548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801354c:	ed2d 8b02 	vpush	{d8}
 8013550:	ec55 4b10 	vmov	r4, r5, d0
 8013554:	4bca      	ldr	r3, [pc, #808]	; (8013880 <__ieee754_rem_pio2+0x338>)
 8013556:	b08b      	sub	sp, #44	; 0x2c
 8013558:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801355c:	4598      	cmp	r8, r3
 801355e:	4682      	mov	sl, r0
 8013560:	9502      	str	r5, [sp, #8]
 8013562:	dc08      	bgt.n	8013576 <__ieee754_rem_pio2+0x2e>
 8013564:	2200      	movs	r2, #0
 8013566:	2300      	movs	r3, #0
 8013568:	ed80 0b00 	vstr	d0, [r0]
 801356c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013570:	f04f 0b00 	mov.w	fp, #0
 8013574:	e028      	b.n	80135c8 <__ieee754_rem_pio2+0x80>
 8013576:	4bc3      	ldr	r3, [pc, #780]	; (8013884 <__ieee754_rem_pio2+0x33c>)
 8013578:	4598      	cmp	r8, r3
 801357a:	dc78      	bgt.n	801366e <__ieee754_rem_pio2+0x126>
 801357c:	9b02      	ldr	r3, [sp, #8]
 801357e:	4ec2      	ldr	r6, [pc, #776]	; (8013888 <__ieee754_rem_pio2+0x340>)
 8013580:	2b00      	cmp	r3, #0
 8013582:	ee10 0a10 	vmov	r0, s0
 8013586:	a3b0      	add	r3, pc, #704	; (adr r3, 8013848 <__ieee754_rem_pio2+0x300>)
 8013588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358c:	4629      	mov	r1, r5
 801358e:	dd39      	ble.n	8013604 <__ieee754_rem_pio2+0xbc>
 8013590:	f7ec fe02 	bl	8000198 <__aeabi_dsub>
 8013594:	45b0      	cmp	r8, r6
 8013596:	4604      	mov	r4, r0
 8013598:	460d      	mov	r5, r1
 801359a:	d01b      	beq.n	80135d4 <__ieee754_rem_pio2+0x8c>
 801359c:	a3ac      	add	r3, pc, #688	; (adr r3, 8013850 <__ieee754_rem_pio2+0x308>)
 801359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a2:	f7ec fdf9 	bl	8000198 <__aeabi_dsub>
 80135a6:	4602      	mov	r2, r0
 80135a8:	460b      	mov	r3, r1
 80135aa:	e9ca 2300 	strd	r2, r3, [sl]
 80135ae:	4620      	mov	r0, r4
 80135b0:	4629      	mov	r1, r5
 80135b2:	f7ec fdf1 	bl	8000198 <__aeabi_dsub>
 80135b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8013850 <__ieee754_rem_pio2+0x308>)
 80135b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135bc:	f7ec fdec 	bl	8000198 <__aeabi_dsub>
 80135c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80135c4:	f04f 0b01 	mov.w	fp, #1
 80135c8:	4658      	mov	r0, fp
 80135ca:	b00b      	add	sp, #44	; 0x2c
 80135cc:	ecbd 8b02 	vpop	{d8}
 80135d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135d4:	a3a0      	add	r3, pc, #640	; (adr r3, 8013858 <__ieee754_rem_pio2+0x310>)
 80135d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135da:	f7ec fddd 	bl	8000198 <__aeabi_dsub>
 80135de:	a3a0      	add	r3, pc, #640	; (adr r3, 8013860 <__ieee754_rem_pio2+0x318>)
 80135e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e4:	4604      	mov	r4, r0
 80135e6:	460d      	mov	r5, r1
 80135e8:	f7ec fdd6 	bl	8000198 <__aeabi_dsub>
 80135ec:	4602      	mov	r2, r0
 80135ee:	460b      	mov	r3, r1
 80135f0:	e9ca 2300 	strd	r2, r3, [sl]
 80135f4:	4620      	mov	r0, r4
 80135f6:	4629      	mov	r1, r5
 80135f8:	f7ec fdce 	bl	8000198 <__aeabi_dsub>
 80135fc:	a398      	add	r3, pc, #608	; (adr r3, 8013860 <__ieee754_rem_pio2+0x318>)
 80135fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013602:	e7db      	b.n	80135bc <__ieee754_rem_pio2+0x74>
 8013604:	f7ec fdca 	bl	800019c <__adddf3>
 8013608:	45b0      	cmp	r8, r6
 801360a:	4604      	mov	r4, r0
 801360c:	460d      	mov	r5, r1
 801360e:	d016      	beq.n	801363e <__ieee754_rem_pio2+0xf6>
 8013610:	a38f      	add	r3, pc, #572	; (adr r3, 8013850 <__ieee754_rem_pio2+0x308>)
 8013612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013616:	f7ec fdc1 	bl	800019c <__adddf3>
 801361a:	4602      	mov	r2, r0
 801361c:	460b      	mov	r3, r1
 801361e:	e9ca 2300 	strd	r2, r3, [sl]
 8013622:	4620      	mov	r0, r4
 8013624:	4629      	mov	r1, r5
 8013626:	f7ec fdb7 	bl	8000198 <__aeabi_dsub>
 801362a:	a389      	add	r3, pc, #548	; (adr r3, 8013850 <__ieee754_rem_pio2+0x308>)
 801362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013630:	f7ec fdb4 	bl	800019c <__adddf3>
 8013634:	f04f 3bff 	mov.w	fp, #4294967295
 8013638:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801363c:	e7c4      	b.n	80135c8 <__ieee754_rem_pio2+0x80>
 801363e:	a386      	add	r3, pc, #536	; (adr r3, 8013858 <__ieee754_rem_pio2+0x310>)
 8013640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013644:	f7ec fdaa 	bl	800019c <__adddf3>
 8013648:	a385      	add	r3, pc, #532	; (adr r3, 8013860 <__ieee754_rem_pio2+0x318>)
 801364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364e:	4604      	mov	r4, r0
 8013650:	460d      	mov	r5, r1
 8013652:	f7ec fda3 	bl	800019c <__adddf3>
 8013656:	4602      	mov	r2, r0
 8013658:	460b      	mov	r3, r1
 801365a:	e9ca 2300 	strd	r2, r3, [sl]
 801365e:	4620      	mov	r0, r4
 8013660:	4629      	mov	r1, r5
 8013662:	f7ec fd99 	bl	8000198 <__aeabi_dsub>
 8013666:	a37e      	add	r3, pc, #504	; (adr r3, 8013860 <__ieee754_rem_pio2+0x318>)
 8013668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801366c:	e7e0      	b.n	8013630 <__ieee754_rem_pio2+0xe8>
 801366e:	4b87      	ldr	r3, [pc, #540]	; (801388c <__ieee754_rem_pio2+0x344>)
 8013670:	4598      	cmp	r8, r3
 8013672:	f300 80d8 	bgt.w	8013826 <__ieee754_rem_pio2+0x2de>
 8013676:	f000 f96d 	bl	8013954 <fabs>
 801367a:	ec55 4b10 	vmov	r4, r5, d0
 801367e:	ee10 0a10 	vmov	r0, s0
 8013682:	a379      	add	r3, pc, #484	; (adr r3, 8013868 <__ieee754_rem_pio2+0x320>)
 8013684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013688:	4629      	mov	r1, r5
 801368a:	f7ec ff3d 	bl	8000508 <__aeabi_dmul>
 801368e:	4b80      	ldr	r3, [pc, #512]	; (8013890 <__ieee754_rem_pio2+0x348>)
 8013690:	2200      	movs	r2, #0
 8013692:	f7ec fd83 	bl	800019c <__adddf3>
 8013696:	f7ed f9d1 	bl	8000a3c <__aeabi_d2iz>
 801369a:	4683      	mov	fp, r0
 801369c:	f7ec feca 	bl	8000434 <__aeabi_i2d>
 80136a0:	4602      	mov	r2, r0
 80136a2:	460b      	mov	r3, r1
 80136a4:	ec43 2b18 	vmov	d8, r2, r3
 80136a8:	a367      	add	r3, pc, #412	; (adr r3, 8013848 <__ieee754_rem_pio2+0x300>)
 80136aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ae:	f7ec ff2b 	bl	8000508 <__aeabi_dmul>
 80136b2:	4602      	mov	r2, r0
 80136b4:	460b      	mov	r3, r1
 80136b6:	4620      	mov	r0, r4
 80136b8:	4629      	mov	r1, r5
 80136ba:	f7ec fd6d 	bl	8000198 <__aeabi_dsub>
 80136be:	a364      	add	r3, pc, #400	; (adr r3, 8013850 <__ieee754_rem_pio2+0x308>)
 80136c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c4:	4606      	mov	r6, r0
 80136c6:	460f      	mov	r7, r1
 80136c8:	ec51 0b18 	vmov	r0, r1, d8
 80136cc:	f7ec ff1c 	bl	8000508 <__aeabi_dmul>
 80136d0:	f1bb 0f1f 	cmp.w	fp, #31
 80136d4:	4604      	mov	r4, r0
 80136d6:	460d      	mov	r5, r1
 80136d8:	dc0d      	bgt.n	80136f6 <__ieee754_rem_pio2+0x1ae>
 80136da:	4b6e      	ldr	r3, [pc, #440]	; (8013894 <__ieee754_rem_pio2+0x34c>)
 80136dc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80136e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136e4:	4543      	cmp	r3, r8
 80136e6:	d006      	beq.n	80136f6 <__ieee754_rem_pio2+0x1ae>
 80136e8:	4622      	mov	r2, r4
 80136ea:	462b      	mov	r3, r5
 80136ec:	4630      	mov	r0, r6
 80136ee:	4639      	mov	r1, r7
 80136f0:	f7ec fd52 	bl	8000198 <__aeabi_dsub>
 80136f4:	e00e      	b.n	8013714 <__ieee754_rem_pio2+0x1cc>
 80136f6:	462b      	mov	r3, r5
 80136f8:	4622      	mov	r2, r4
 80136fa:	4630      	mov	r0, r6
 80136fc:	4639      	mov	r1, r7
 80136fe:	f7ec fd4b 	bl	8000198 <__aeabi_dsub>
 8013702:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013706:	9303      	str	r3, [sp, #12]
 8013708:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801370c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8013710:	2b10      	cmp	r3, #16
 8013712:	dc02      	bgt.n	801371a <__ieee754_rem_pio2+0x1d2>
 8013714:	e9ca 0100 	strd	r0, r1, [sl]
 8013718:	e039      	b.n	801378e <__ieee754_rem_pio2+0x246>
 801371a:	a34f      	add	r3, pc, #316	; (adr r3, 8013858 <__ieee754_rem_pio2+0x310>)
 801371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013720:	ec51 0b18 	vmov	r0, r1, d8
 8013724:	f7ec fef0 	bl	8000508 <__aeabi_dmul>
 8013728:	4604      	mov	r4, r0
 801372a:	460d      	mov	r5, r1
 801372c:	4602      	mov	r2, r0
 801372e:	460b      	mov	r3, r1
 8013730:	4630      	mov	r0, r6
 8013732:	4639      	mov	r1, r7
 8013734:	f7ec fd30 	bl	8000198 <__aeabi_dsub>
 8013738:	4602      	mov	r2, r0
 801373a:	460b      	mov	r3, r1
 801373c:	4680      	mov	r8, r0
 801373e:	4689      	mov	r9, r1
 8013740:	4630      	mov	r0, r6
 8013742:	4639      	mov	r1, r7
 8013744:	f7ec fd28 	bl	8000198 <__aeabi_dsub>
 8013748:	4622      	mov	r2, r4
 801374a:	462b      	mov	r3, r5
 801374c:	f7ec fd24 	bl	8000198 <__aeabi_dsub>
 8013750:	a343      	add	r3, pc, #268	; (adr r3, 8013860 <__ieee754_rem_pio2+0x318>)
 8013752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013756:	4604      	mov	r4, r0
 8013758:	460d      	mov	r5, r1
 801375a:	ec51 0b18 	vmov	r0, r1, d8
 801375e:	f7ec fed3 	bl	8000508 <__aeabi_dmul>
 8013762:	4622      	mov	r2, r4
 8013764:	462b      	mov	r3, r5
 8013766:	f7ec fd17 	bl	8000198 <__aeabi_dsub>
 801376a:	4602      	mov	r2, r0
 801376c:	460b      	mov	r3, r1
 801376e:	4604      	mov	r4, r0
 8013770:	460d      	mov	r5, r1
 8013772:	4640      	mov	r0, r8
 8013774:	4649      	mov	r1, r9
 8013776:	f7ec fd0f 	bl	8000198 <__aeabi_dsub>
 801377a:	9a03      	ldr	r2, [sp, #12]
 801377c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013780:	1ad3      	subs	r3, r2, r3
 8013782:	2b31      	cmp	r3, #49	; 0x31
 8013784:	dc24      	bgt.n	80137d0 <__ieee754_rem_pio2+0x288>
 8013786:	e9ca 0100 	strd	r0, r1, [sl]
 801378a:	4646      	mov	r6, r8
 801378c:	464f      	mov	r7, r9
 801378e:	e9da 8900 	ldrd	r8, r9, [sl]
 8013792:	4630      	mov	r0, r6
 8013794:	4642      	mov	r2, r8
 8013796:	464b      	mov	r3, r9
 8013798:	4639      	mov	r1, r7
 801379a:	f7ec fcfd 	bl	8000198 <__aeabi_dsub>
 801379e:	462b      	mov	r3, r5
 80137a0:	4622      	mov	r2, r4
 80137a2:	f7ec fcf9 	bl	8000198 <__aeabi_dsub>
 80137a6:	9b02      	ldr	r3, [sp, #8]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80137ae:	f6bf af0b 	bge.w	80135c8 <__ieee754_rem_pio2+0x80>
 80137b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80137b6:	f8ca 3004 	str.w	r3, [sl, #4]
 80137ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80137be:	f8ca 8000 	str.w	r8, [sl]
 80137c2:	f8ca 0008 	str.w	r0, [sl, #8]
 80137c6:	f8ca 300c 	str.w	r3, [sl, #12]
 80137ca:	f1cb 0b00 	rsb	fp, fp, #0
 80137ce:	e6fb      	b.n	80135c8 <__ieee754_rem_pio2+0x80>
 80137d0:	a327      	add	r3, pc, #156	; (adr r3, 8013870 <__ieee754_rem_pio2+0x328>)
 80137d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137d6:	ec51 0b18 	vmov	r0, r1, d8
 80137da:	f7ec fe95 	bl	8000508 <__aeabi_dmul>
 80137de:	4604      	mov	r4, r0
 80137e0:	460d      	mov	r5, r1
 80137e2:	4602      	mov	r2, r0
 80137e4:	460b      	mov	r3, r1
 80137e6:	4640      	mov	r0, r8
 80137e8:	4649      	mov	r1, r9
 80137ea:	f7ec fcd5 	bl	8000198 <__aeabi_dsub>
 80137ee:	4602      	mov	r2, r0
 80137f0:	460b      	mov	r3, r1
 80137f2:	4606      	mov	r6, r0
 80137f4:	460f      	mov	r7, r1
 80137f6:	4640      	mov	r0, r8
 80137f8:	4649      	mov	r1, r9
 80137fa:	f7ec fccd 	bl	8000198 <__aeabi_dsub>
 80137fe:	4622      	mov	r2, r4
 8013800:	462b      	mov	r3, r5
 8013802:	f7ec fcc9 	bl	8000198 <__aeabi_dsub>
 8013806:	a31c      	add	r3, pc, #112	; (adr r3, 8013878 <__ieee754_rem_pio2+0x330>)
 8013808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801380c:	4604      	mov	r4, r0
 801380e:	460d      	mov	r5, r1
 8013810:	ec51 0b18 	vmov	r0, r1, d8
 8013814:	f7ec fe78 	bl	8000508 <__aeabi_dmul>
 8013818:	4622      	mov	r2, r4
 801381a:	462b      	mov	r3, r5
 801381c:	f7ec fcbc 	bl	8000198 <__aeabi_dsub>
 8013820:	4604      	mov	r4, r0
 8013822:	460d      	mov	r5, r1
 8013824:	e760      	b.n	80136e8 <__ieee754_rem_pio2+0x1a0>
 8013826:	4b1c      	ldr	r3, [pc, #112]	; (8013898 <__ieee754_rem_pio2+0x350>)
 8013828:	4598      	cmp	r8, r3
 801382a:	dd37      	ble.n	801389c <__ieee754_rem_pio2+0x354>
 801382c:	ee10 2a10 	vmov	r2, s0
 8013830:	462b      	mov	r3, r5
 8013832:	4620      	mov	r0, r4
 8013834:	4629      	mov	r1, r5
 8013836:	f7ec fcaf 	bl	8000198 <__aeabi_dsub>
 801383a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801383e:	e9ca 0100 	strd	r0, r1, [sl]
 8013842:	e695      	b.n	8013570 <__ieee754_rem_pio2+0x28>
 8013844:	f3af 8000 	nop.w
 8013848:	54400000 	.word	0x54400000
 801384c:	3ff921fb 	.word	0x3ff921fb
 8013850:	1a626331 	.word	0x1a626331
 8013854:	3dd0b461 	.word	0x3dd0b461
 8013858:	1a600000 	.word	0x1a600000
 801385c:	3dd0b461 	.word	0x3dd0b461
 8013860:	2e037073 	.word	0x2e037073
 8013864:	3ba3198a 	.word	0x3ba3198a
 8013868:	6dc9c883 	.word	0x6dc9c883
 801386c:	3fe45f30 	.word	0x3fe45f30
 8013870:	2e000000 	.word	0x2e000000
 8013874:	3ba3198a 	.word	0x3ba3198a
 8013878:	252049c1 	.word	0x252049c1
 801387c:	397b839a 	.word	0x397b839a
 8013880:	3fe921fb 	.word	0x3fe921fb
 8013884:	4002d97b 	.word	0x4002d97b
 8013888:	3ff921fb 	.word	0x3ff921fb
 801388c:	413921fb 	.word	0x413921fb
 8013890:	3fe00000 	.word	0x3fe00000
 8013894:	080144e0 	.word	0x080144e0
 8013898:	7fefffff 	.word	0x7fefffff
 801389c:	ea4f 5628 	mov.w	r6, r8, asr #20
 80138a0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80138a4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80138a8:	4620      	mov	r0, r4
 80138aa:	460d      	mov	r5, r1
 80138ac:	f7ed f8c6 	bl	8000a3c <__aeabi_d2iz>
 80138b0:	f7ec fdc0 	bl	8000434 <__aeabi_i2d>
 80138b4:	4602      	mov	r2, r0
 80138b6:	460b      	mov	r3, r1
 80138b8:	4620      	mov	r0, r4
 80138ba:	4629      	mov	r1, r5
 80138bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80138c0:	f7ec fc6a 	bl	8000198 <__aeabi_dsub>
 80138c4:	4b21      	ldr	r3, [pc, #132]	; (801394c <__ieee754_rem_pio2+0x404>)
 80138c6:	2200      	movs	r2, #0
 80138c8:	f7ec fe1e 	bl	8000508 <__aeabi_dmul>
 80138cc:	460d      	mov	r5, r1
 80138ce:	4604      	mov	r4, r0
 80138d0:	f7ed f8b4 	bl	8000a3c <__aeabi_d2iz>
 80138d4:	f7ec fdae 	bl	8000434 <__aeabi_i2d>
 80138d8:	4602      	mov	r2, r0
 80138da:	460b      	mov	r3, r1
 80138dc:	4620      	mov	r0, r4
 80138de:	4629      	mov	r1, r5
 80138e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80138e4:	f7ec fc58 	bl	8000198 <__aeabi_dsub>
 80138e8:	4b18      	ldr	r3, [pc, #96]	; (801394c <__ieee754_rem_pio2+0x404>)
 80138ea:	2200      	movs	r2, #0
 80138ec:	f7ec fe0c 	bl	8000508 <__aeabi_dmul>
 80138f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80138f4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80138f8:	2703      	movs	r7, #3
 80138fa:	2400      	movs	r4, #0
 80138fc:	2500      	movs	r5, #0
 80138fe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8013902:	4622      	mov	r2, r4
 8013904:	462b      	mov	r3, r5
 8013906:	46b9      	mov	r9, r7
 8013908:	3f01      	subs	r7, #1
 801390a:	f7ed f865 	bl	80009d8 <__aeabi_dcmpeq>
 801390e:	2800      	cmp	r0, #0
 8013910:	d1f5      	bne.n	80138fe <__ieee754_rem_pio2+0x3b6>
 8013912:	4b0f      	ldr	r3, [pc, #60]	; (8013950 <__ieee754_rem_pio2+0x408>)
 8013914:	9301      	str	r3, [sp, #4]
 8013916:	2302      	movs	r3, #2
 8013918:	9300      	str	r3, [sp, #0]
 801391a:	4632      	mov	r2, r6
 801391c:	464b      	mov	r3, r9
 801391e:	4651      	mov	r1, sl
 8013920:	a804      	add	r0, sp, #16
 8013922:	f000 f821 	bl	8013968 <__kernel_rem_pio2>
 8013926:	9b02      	ldr	r3, [sp, #8]
 8013928:	2b00      	cmp	r3, #0
 801392a:	4683      	mov	fp, r0
 801392c:	f6bf ae4c 	bge.w	80135c8 <__ieee754_rem_pio2+0x80>
 8013930:	e9da 2100 	ldrd	r2, r1, [sl]
 8013934:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013938:	e9ca 2300 	strd	r2, r3, [sl]
 801393c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8013940:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013944:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8013948:	e73f      	b.n	80137ca <__ieee754_rem_pio2+0x282>
 801394a:	bf00      	nop
 801394c:	41700000 	.word	0x41700000
 8013950:	08014560 	.word	0x08014560

08013954 <fabs>:
 8013954:	ec51 0b10 	vmov	r0, r1, d0
 8013958:	ee10 2a10 	vmov	r2, s0
 801395c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013960:	ec43 2b10 	vmov	d0, r2, r3
 8013964:	4770      	bx	lr
	...

08013968 <__kernel_rem_pio2>:
 8013968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801396c:	ed2d 8b02 	vpush	{d8}
 8013970:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8013974:	f112 0f14 	cmn.w	r2, #20
 8013978:	9306      	str	r3, [sp, #24]
 801397a:	9104      	str	r1, [sp, #16]
 801397c:	4bc2      	ldr	r3, [pc, #776]	; (8013c88 <__kernel_rem_pio2+0x320>)
 801397e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8013980:	9009      	str	r0, [sp, #36]	; 0x24
 8013982:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013986:	9300      	str	r3, [sp, #0]
 8013988:	9b06      	ldr	r3, [sp, #24]
 801398a:	f103 33ff 	add.w	r3, r3, #4294967295
 801398e:	bfa8      	it	ge
 8013990:	1ed4      	subge	r4, r2, #3
 8013992:	9305      	str	r3, [sp, #20]
 8013994:	bfb2      	itee	lt
 8013996:	2400      	movlt	r4, #0
 8013998:	2318      	movge	r3, #24
 801399a:	fb94 f4f3 	sdivge	r4, r4, r3
 801399e:	f06f 0317 	mvn.w	r3, #23
 80139a2:	fb04 3303 	mla	r3, r4, r3, r3
 80139a6:	eb03 0a02 	add.w	sl, r3, r2
 80139aa:	9b00      	ldr	r3, [sp, #0]
 80139ac:	9a05      	ldr	r2, [sp, #20]
 80139ae:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8013c78 <__kernel_rem_pio2+0x310>
 80139b2:	eb03 0802 	add.w	r8, r3, r2
 80139b6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80139b8:	1aa7      	subs	r7, r4, r2
 80139ba:	ae20      	add	r6, sp, #128	; 0x80
 80139bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80139c0:	2500      	movs	r5, #0
 80139c2:	4545      	cmp	r5, r8
 80139c4:	dd13      	ble.n	80139ee <__kernel_rem_pio2+0x86>
 80139c6:	9b06      	ldr	r3, [sp, #24]
 80139c8:	aa20      	add	r2, sp, #128	; 0x80
 80139ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80139ce:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80139d2:	f04f 0800 	mov.w	r8, #0
 80139d6:	9b00      	ldr	r3, [sp, #0]
 80139d8:	4598      	cmp	r8, r3
 80139da:	dc31      	bgt.n	8013a40 <__kernel_rem_pio2+0xd8>
 80139dc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8013c78 <__kernel_rem_pio2+0x310>
 80139e0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80139e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80139e8:	462f      	mov	r7, r5
 80139ea:	2600      	movs	r6, #0
 80139ec:	e01b      	b.n	8013a26 <__kernel_rem_pio2+0xbe>
 80139ee:	42ef      	cmn	r7, r5
 80139f0:	d407      	bmi.n	8013a02 <__kernel_rem_pio2+0x9a>
 80139f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80139f6:	f7ec fd1d 	bl	8000434 <__aeabi_i2d>
 80139fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80139fe:	3501      	adds	r5, #1
 8013a00:	e7df      	b.n	80139c2 <__kernel_rem_pio2+0x5a>
 8013a02:	ec51 0b18 	vmov	r0, r1, d8
 8013a06:	e7f8      	b.n	80139fa <__kernel_rem_pio2+0x92>
 8013a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013a10:	f7ec fd7a 	bl	8000508 <__aeabi_dmul>
 8013a14:	4602      	mov	r2, r0
 8013a16:	460b      	mov	r3, r1
 8013a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a1c:	f7ec fbbe 	bl	800019c <__adddf3>
 8013a20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a24:	3601      	adds	r6, #1
 8013a26:	9b05      	ldr	r3, [sp, #20]
 8013a28:	429e      	cmp	r6, r3
 8013a2a:	f1a7 0708 	sub.w	r7, r7, #8
 8013a2e:	ddeb      	ble.n	8013a08 <__kernel_rem_pio2+0xa0>
 8013a30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013a34:	f108 0801 	add.w	r8, r8, #1
 8013a38:	ecab 7b02 	vstmia	fp!, {d7}
 8013a3c:	3508      	adds	r5, #8
 8013a3e:	e7ca      	b.n	80139d6 <__kernel_rem_pio2+0x6e>
 8013a40:	9b00      	ldr	r3, [sp, #0]
 8013a42:	aa0c      	add	r2, sp, #48	; 0x30
 8013a44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013a48:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a4a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8013a4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013a50:	9c00      	ldr	r4, [sp, #0]
 8013a52:	930a      	str	r3, [sp, #40]	; 0x28
 8013a54:	00e3      	lsls	r3, r4, #3
 8013a56:	9308      	str	r3, [sp, #32]
 8013a58:	ab98      	add	r3, sp, #608	; 0x260
 8013a5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013a5e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8013a62:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8013a66:	ab70      	add	r3, sp, #448	; 0x1c0
 8013a68:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8013a6c:	46c3      	mov	fp, r8
 8013a6e:	46a1      	mov	r9, r4
 8013a70:	f1b9 0f00 	cmp.w	r9, #0
 8013a74:	f1a5 0508 	sub.w	r5, r5, #8
 8013a78:	dc77      	bgt.n	8013b6a <__kernel_rem_pio2+0x202>
 8013a7a:	ec47 6b10 	vmov	d0, r6, r7
 8013a7e:	4650      	mov	r0, sl
 8013a80:	f000 fac2 	bl	8014008 <scalbn>
 8013a84:	ec57 6b10 	vmov	r6, r7, d0
 8013a88:	2200      	movs	r2, #0
 8013a8a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013a8e:	ee10 0a10 	vmov	r0, s0
 8013a92:	4639      	mov	r1, r7
 8013a94:	f7ec fd38 	bl	8000508 <__aeabi_dmul>
 8013a98:	ec41 0b10 	vmov	d0, r0, r1
 8013a9c:	f000 fb34 	bl	8014108 <floor>
 8013aa0:	4b7a      	ldr	r3, [pc, #488]	; (8013c8c <__kernel_rem_pio2+0x324>)
 8013aa2:	ec51 0b10 	vmov	r0, r1, d0
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	f7ec fd2e 	bl	8000508 <__aeabi_dmul>
 8013aac:	4602      	mov	r2, r0
 8013aae:	460b      	mov	r3, r1
 8013ab0:	4630      	mov	r0, r6
 8013ab2:	4639      	mov	r1, r7
 8013ab4:	f7ec fb70 	bl	8000198 <__aeabi_dsub>
 8013ab8:	460f      	mov	r7, r1
 8013aba:	4606      	mov	r6, r0
 8013abc:	f7ec ffbe 	bl	8000a3c <__aeabi_d2iz>
 8013ac0:	9002      	str	r0, [sp, #8]
 8013ac2:	f7ec fcb7 	bl	8000434 <__aeabi_i2d>
 8013ac6:	4602      	mov	r2, r0
 8013ac8:	460b      	mov	r3, r1
 8013aca:	4630      	mov	r0, r6
 8013acc:	4639      	mov	r1, r7
 8013ace:	f7ec fb63 	bl	8000198 <__aeabi_dsub>
 8013ad2:	f1ba 0f00 	cmp.w	sl, #0
 8013ad6:	4606      	mov	r6, r0
 8013ad8:	460f      	mov	r7, r1
 8013ada:	dd6d      	ble.n	8013bb8 <__kernel_rem_pio2+0x250>
 8013adc:	1e61      	subs	r1, r4, #1
 8013ade:	ab0c      	add	r3, sp, #48	; 0x30
 8013ae0:	9d02      	ldr	r5, [sp, #8]
 8013ae2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013ae6:	f1ca 0018 	rsb	r0, sl, #24
 8013aea:	fa43 f200 	asr.w	r2, r3, r0
 8013aee:	4415      	add	r5, r2
 8013af0:	4082      	lsls	r2, r0
 8013af2:	1a9b      	subs	r3, r3, r2
 8013af4:	aa0c      	add	r2, sp, #48	; 0x30
 8013af6:	9502      	str	r5, [sp, #8]
 8013af8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013afc:	f1ca 0217 	rsb	r2, sl, #23
 8013b00:	fa43 fb02 	asr.w	fp, r3, r2
 8013b04:	f1bb 0f00 	cmp.w	fp, #0
 8013b08:	dd65      	ble.n	8013bd6 <__kernel_rem_pio2+0x26e>
 8013b0a:	9b02      	ldr	r3, [sp, #8]
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	3301      	adds	r3, #1
 8013b10:	9302      	str	r3, [sp, #8]
 8013b12:	4615      	mov	r5, r2
 8013b14:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013b18:	4294      	cmp	r4, r2
 8013b1a:	f300 809f 	bgt.w	8013c5c <__kernel_rem_pio2+0x2f4>
 8013b1e:	f1ba 0f00 	cmp.w	sl, #0
 8013b22:	dd07      	ble.n	8013b34 <__kernel_rem_pio2+0x1cc>
 8013b24:	f1ba 0f01 	cmp.w	sl, #1
 8013b28:	f000 80c1 	beq.w	8013cae <__kernel_rem_pio2+0x346>
 8013b2c:	f1ba 0f02 	cmp.w	sl, #2
 8013b30:	f000 80c7 	beq.w	8013cc2 <__kernel_rem_pio2+0x35a>
 8013b34:	f1bb 0f02 	cmp.w	fp, #2
 8013b38:	d14d      	bne.n	8013bd6 <__kernel_rem_pio2+0x26e>
 8013b3a:	4632      	mov	r2, r6
 8013b3c:	463b      	mov	r3, r7
 8013b3e:	4954      	ldr	r1, [pc, #336]	; (8013c90 <__kernel_rem_pio2+0x328>)
 8013b40:	2000      	movs	r0, #0
 8013b42:	f7ec fb29 	bl	8000198 <__aeabi_dsub>
 8013b46:	4606      	mov	r6, r0
 8013b48:	460f      	mov	r7, r1
 8013b4a:	2d00      	cmp	r5, #0
 8013b4c:	d043      	beq.n	8013bd6 <__kernel_rem_pio2+0x26e>
 8013b4e:	4650      	mov	r0, sl
 8013b50:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8013c80 <__kernel_rem_pio2+0x318>
 8013b54:	f000 fa58 	bl	8014008 <scalbn>
 8013b58:	4630      	mov	r0, r6
 8013b5a:	4639      	mov	r1, r7
 8013b5c:	ec53 2b10 	vmov	r2, r3, d0
 8013b60:	f7ec fb1a 	bl	8000198 <__aeabi_dsub>
 8013b64:	4606      	mov	r6, r0
 8013b66:	460f      	mov	r7, r1
 8013b68:	e035      	b.n	8013bd6 <__kernel_rem_pio2+0x26e>
 8013b6a:	4b4a      	ldr	r3, [pc, #296]	; (8013c94 <__kernel_rem_pio2+0x32c>)
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	4630      	mov	r0, r6
 8013b70:	4639      	mov	r1, r7
 8013b72:	f7ec fcc9 	bl	8000508 <__aeabi_dmul>
 8013b76:	f7ec ff61 	bl	8000a3c <__aeabi_d2iz>
 8013b7a:	f7ec fc5b 	bl	8000434 <__aeabi_i2d>
 8013b7e:	4602      	mov	r2, r0
 8013b80:	460b      	mov	r3, r1
 8013b82:	ec43 2b18 	vmov	d8, r2, r3
 8013b86:	4b44      	ldr	r3, [pc, #272]	; (8013c98 <__kernel_rem_pio2+0x330>)
 8013b88:	2200      	movs	r2, #0
 8013b8a:	f7ec fcbd 	bl	8000508 <__aeabi_dmul>
 8013b8e:	4602      	mov	r2, r0
 8013b90:	460b      	mov	r3, r1
 8013b92:	4630      	mov	r0, r6
 8013b94:	4639      	mov	r1, r7
 8013b96:	f7ec faff 	bl	8000198 <__aeabi_dsub>
 8013b9a:	f7ec ff4f 	bl	8000a3c <__aeabi_d2iz>
 8013b9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013ba2:	f84b 0b04 	str.w	r0, [fp], #4
 8013ba6:	ec51 0b18 	vmov	r0, r1, d8
 8013baa:	f7ec faf7 	bl	800019c <__adddf3>
 8013bae:	f109 39ff 	add.w	r9, r9, #4294967295
 8013bb2:	4606      	mov	r6, r0
 8013bb4:	460f      	mov	r7, r1
 8013bb6:	e75b      	b.n	8013a70 <__kernel_rem_pio2+0x108>
 8013bb8:	d106      	bne.n	8013bc8 <__kernel_rem_pio2+0x260>
 8013bba:	1e63      	subs	r3, r4, #1
 8013bbc:	aa0c      	add	r2, sp, #48	; 0x30
 8013bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bc2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8013bc6:	e79d      	b.n	8013b04 <__kernel_rem_pio2+0x19c>
 8013bc8:	4b34      	ldr	r3, [pc, #208]	; (8013c9c <__kernel_rem_pio2+0x334>)
 8013bca:	2200      	movs	r2, #0
 8013bcc:	f7ec ff22 	bl	8000a14 <__aeabi_dcmpge>
 8013bd0:	2800      	cmp	r0, #0
 8013bd2:	d140      	bne.n	8013c56 <__kernel_rem_pio2+0x2ee>
 8013bd4:	4683      	mov	fp, r0
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	2300      	movs	r3, #0
 8013bda:	4630      	mov	r0, r6
 8013bdc:	4639      	mov	r1, r7
 8013bde:	f7ec fefb 	bl	80009d8 <__aeabi_dcmpeq>
 8013be2:	2800      	cmp	r0, #0
 8013be4:	f000 80c1 	beq.w	8013d6a <__kernel_rem_pio2+0x402>
 8013be8:	1e65      	subs	r5, r4, #1
 8013bea:	462b      	mov	r3, r5
 8013bec:	2200      	movs	r2, #0
 8013bee:	9900      	ldr	r1, [sp, #0]
 8013bf0:	428b      	cmp	r3, r1
 8013bf2:	da6d      	bge.n	8013cd0 <__kernel_rem_pio2+0x368>
 8013bf4:	2a00      	cmp	r2, #0
 8013bf6:	f000 808a 	beq.w	8013d0e <__kernel_rem_pio2+0x3a6>
 8013bfa:	ab0c      	add	r3, sp, #48	; 0x30
 8013bfc:	f1aa 0a18 	sub.w	sl, sl, #24
 8013c00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	f000 80ae 	beq.w	8013d66 <__kernel_rem_pio2+0x3fe>
 8013c0a:	4650      	mov	r0, sl
 8013c0c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8013c80 <__kernel_rem_pio2+0x318>
 8013c10:	f000 f9fa 	bl	8014008 <scalbn>
 8013c14:	1c6b      	adds	r3, r5, #1
 8013c16:	00da      	lsls	r2, r3, #3
 8013c18:	9205      	str	r2, [sp, #20]
 8013c1a:	ec57 6b10 	vmov	r6, r7, d0
 8013c1e:	aa70      	add	r2, sp, #448	; 0x1c0
 8013c20:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8013c94 <__kernel_rem_pio2+0x32c>
 8013c24:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8013c28:	462c      	mov	r4, r5
 8013c2a:	f04f 0800 	mov.w	r8, #0
 8013c2e:	2c00      	cmp	r4, #0
 8013c30:	f280 80d4 	bge.w	8013ddc <__kernel_rem_pio2+0x474>
 8013c34:	462c      	mov	r4, r5
 8013c36:	2c00      	cmp	r4, #0
 8013c38:	f2c0 8102 	blt.w	8013e40 <__kernel_rem_pio2+0x4d8>
 8013c3c:	4b18      	ldr	r3, [pc, #96]	; (8013ca0 <__kernel_rem_pio2+0x338>)
 8013c3e:	461e      	mov	r6, r3
 8013c40:	ab70      	add	r3, sp, #448	; 0x1c0
 8013c42:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8013c46:	1b2b      	subs	r3, r5, r4
 8013c48:	f04f 0900 	mov.w	r9, #0
 8013c4c:	f04f 0a00 	mov.w	sl, #0
 8013c50:	2700      	movs	r7, #0
 8013c52:	9306      	str	r3, [sp, #24]
 8013c54:	e0e6      	b.n	8013e24 <__kernel_rem_pio2+0x4bc>
 8013c56:	f04f 0b02 	mov.w	fp, #2
 8013c5a:	e756      	b.n	8013b0a <__kernel_rem_pio2+0x1a2>
 8013c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8013c60:	bb05      	cbnz	r5, 8013ca4 <__kernel_rem_pio2+0x33c>
 8013c62:	b123      	cbz	r3, 8013c6e <__kernel_rem_pio2+0x306>
 8013c64:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013c68:	f8c8 3000 	str.w	r3, [r8]
 8013c6c:	2301      	movs	r3, #1
 8013c6e:	3201      	adds	r2, #1
 8013c70:	f108 0804 	add.w	r8, r8, #4
 8013c74:	461d      	mov	r5, r3
 8013c76:	e74f      	b.n	8013b18 <__kernel_rem_pio2+0x1b0>
	...
 8013c84:	3ff00000 	.word	0x3ff00000
 8013c88:	080146a8 	.word	0x080146a8
 8013c8c:	40200000 	.word	0x40200000
 8013c90:	3ff00000 	.word	0x3ff00000
 8013c94:	3e700000 	.word	0x3e700000
 8013c98:	41700000 	.word	0x41700000
 8013c9c:	3fe00000 	.word	0x3fe00000
 8013ca0:	08014668 	.word	0x08014668
 8013ca4:	1acb      	subs	r3, r1, r3
 8013ca6:	f8c8 3000 	str.w	r3, [r8]
 8013caa:	462b      	mov	r3, r5
 8013cac:	e7df      	b.n	8013c6e <__kernel_rem_pio2+0x306>
 8013cae:	1e62      	subs	r2, r4, #1
 8013cb0:	ab0c      	add	r3, sp, #48	; 0x30
 8013cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cb6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013cba:	a90c      	add	r1, sp, #48	; 0x30
 8013cbc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013cc0:	e738      	b.n	8013b34 <__kernel_rem_pio2+0x1cc>
 8013cc2:	1e62      	subs	r2, r4, #1
 8013cc4:	ab0c      	add	r3, sp, #48	; 0x30
 8013cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013cce:	e7f4      	b.n	8013cba <__kernel_rem_pio2+0x352>
 8013cd0:	a90c      	add	r1, sp, #48	; 0x30
 8013cd2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013cd6:	3b01      	subs	r3, #1
 8013cd8:	430a      	orrs	r2, r1
 8013cda:	e788      	b.n	8013bee <__kernel_rem_pio2+0x286>
 8013cdc:	3301      	adds	r3, #1
 8013cde:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013ce2:	2900      	cmp	r1, #0
 8013ce4:	d0fa      	beq.n	8013cdc <__kernel_rem_pio2+0x374>
 8013ce6:	9a08      	ldr	r2, [sp, #32]
 8013ce8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8013cec:	446a      	add	r2, sp
 8013cee:	3a98      	subs	r2, #152	; 0x98
 8013cf0:	9208      	str	r2, [sp, #32]
 8013cf2:	9a06      	ldr	r2, [sp, #24]
 8013cf4:	a920      	add	r1, sp, #128	; 0x80
 8013cf6:	18a2      	adds	r2, r4, r2
 8013cf8:	18e3      	adds	r3, r4, r3
 8013cfa:	f104 0801 	add.w	r8, r4, #1
 8013cfe:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8013d02:	9302      	str	r3, [sp, #8]
 8013d04:	9b02      	ldr	r3, [sp, #8]
 8013d06:	4543      	cmp	r3, r8
 8013d08:	da04      	bge.n	8013d14 <__kernel_rem_pio2+0x3ac>
 8013d0a:	461c      	mov	r4, r3
 8013d0c:	e6a2      	b.n	8013a54 <__kernel_rem_pio2+0xec>
 8013d0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013d10:	2301      	movs	r3, #1
 8013d12:	e7e4      	b.n	8013cde <__kernel_rem_pio2+0x376>
 8013d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d16:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013d1a:	f7ec fb8b 	bl	8000434 <__aeabi_i2d>
 8013d1e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8013d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d24:	46ab      	mov	fp, r5
 8013d26:	461c      	mov	r4, r3
 8013d28:	f04f 0900 	mov.w	r9, #0
 8013d2c:	2600      	movs	r6, #0
 8013d2e:	2700      	movs	r7, #0
 8013d30:	9b05      	ldr	r3, [sp, #20]
 8013d32:	4599      	cmp	r9, r3
 8013d34:	dd06      	ble.n	8013d44 <__kernel_rem_pio2+0x3dc>
 8013d36:	9b08      	ldr	r3, [sp, #32]
 8013d38:	e8e3 6702 	strd	r6, r7, [r3], #8
 8013d3c:	f108 0801 	add.w	r8, r8, #1
 8013d40:	9308      	str	r3, [sp, #32]
 8013d42:	e7df      	b.n	8013d04 <__kernel_rem_pio2+0x39c>
 8013d44:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013d48:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013d4c:	f7ec fbdc 	bl	8000508 <__aeabi_dmul>
 8013d50:	4602      	mov	r2, r0
 8013d52:	460b      	mov	r3, r1
 8013d54:	4630      	mov	r0, r6
 8013d56:	4639      	mov	r1, r7
 8013d58:	f7ec fa20 	bl	800019c <__adddf3>
 8013d5c:	f109 0901 	add.w	r9, r9, #1
 8013d60:	4606      	mov	r6, r0
 8013d62:	460f      	mov	r7, r1
 8013d64:	e7e4      	b.n	8013d30 <__kernel_rem_pio2+0x3c8>
 8013d66:	3d01      	subs	r5, #1
 8013d68:	e747      	b.n	8013bfa <__kernel_rem_pio2+0x292>
 8013d6a:	ec47 6b10 	vmov	d0, r6, r7
 8013d6e:	f1ca 0000 	rsb	r0, sl, #0
 8013d72:	f000 f949 	bl	8014008 <scalbn>
 8013d76:	ec57 6b10 	vmov	r6, r7, d0
 8013d7a:	4ba0      	ldr	r3, [pc, #640]	; (8013ffc <__kernel_rem_pio2+0x694>)
 8013d7c:	ee10 0a10 	vmov	r0, s0
 8013d80:	2200      	movs	r2, #0
 8013d82:	4639      	mov	r1, r7
 8013d84:	f7ec fe46 	bl	8000a14 <__aeabi_dcmpge>
 8013d88:	b1f8      	cbz	r0, 8013dca <__kernel_rem_pio2+0x462>
 8013d8a:	4b9d      	ldr	r3, [pc, #628]	; (8014000 <__kernel_rem_pio2+0x698>)
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	4630      	mov	r0, r6
 8013d90:	4639      	mov	r1, r7
 8013d92:	f7ec fbb9 	bl	8000508 <__aeabi_dmul>
 8013d96:	f7ec fe51 	bl	8000a3c <__aeabi_d2iz>
 8013d9a:	4680      	mov	r8, r0
 8013d9c:	f7ec fb4a 	bl	8000434 <__aeabi_i2d>
 8013da0:	4b96      	ldr	r3, [pc, #600]	; (8013ffc <__kernel_rem_pio2+0x694>)
 8013da2:	2200      	movs	r2, #0
 8013da4:	f7ec fbb0 	bl	8000508 <__aeabi_dmul>
 8013da8:	460b      	mov	r3, r1
 8013daa:	4602      	mov	r2, r0
 8013dac:	4639      	mov	r1, r7
 8013dae:	4630      	mov	r0, r6
 8013db0:	f7ec f9f2 	bl	8000198 <__aeabi_dsub>
 8013db4:	f7ec fe42 	bl	8000a3c <__aeabi_d2iz>
 8013db8:	1c65      	adds	r5, r4, #1
 8013dba:	ab0c      	add	r3, sp, #48	; 0x30
 8013dbc:	f10a 0a18 	add.w	sl, sl, #24
 8013dc0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013dc4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8013dc8:	e71f      	b.n	8013c0a <__kernel_rem_pio2+0x2a2>
 8013dca:	4630      	mov	r0, r6
 8013dcc:	4639      	mov	r1, r7
 8013dce:	f7ec fe35 	bl	8000a3c <__aeabi_d2iz>
 8013dd2:	ab0c      	add	r3, sp, #48	; 0x30
 8013dd4:	4625      	mov	r5, r4
 8013dd6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013dda:	e716      	b.n	8013c0a <__kernel_rem_pio2+0x2a2>
 8013ddc:	ab0c      	add	r3, sp, #48	; 0x30
 8013dde:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013de2:	f7ec fb27 	bl	8000434 <__aeabi_i2d>
 8013de6:	4632      	mov	r2, r6
 8013de8:	463b      	mov	r3, r7
 8013dea:	f7ec fb8d 	bl	8000508 <__aeabi_dmul>
 8013dee:	4642      	mov	r2, r8
 8013df0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8013df4:	464b      	mov	r3, r9
 8013df6:	4630      	mov	r0, r6
 8013df8:	4639      	mov	r1, r7
 8013dfa:	f7ec fb85 	bl	8000508 <__aeabi_dmul>
 8013dfe:	3c01      	subs	r4, #1
 8013e00:	4606      	mov	r6, r0
 8013e02:	460f      	mov	r7, r1
 8013e04:	e713      	b.n	8013c2e <__kernel_rem_pio2+0x2c6>
 8013e06:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8013e0a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8013e0e:	f7ec fb7b 	bl	8000508 <__aeabi_dmul>
 8013e12:	4602      	mov	r2, r0
 8013e14:	460b      	mov	r3, r1
 8013e16:	4648      	mov	r0, r9
 8013e18:	4651      	mov	r1, sl
 8013e1a:	f7ec f9bf 	bl	800019c <__adddf3>
 8013e1e:	3701      	adds	r7, #1
 8013e20:	4681      	mov	r9, r0
 8013e22:	468a      	mov	sl, r1
 8013e24:	9b00      	ldr	r3, [sp, #0]
 8013e26:	429f      	cmp	r7, r3
 8013e28:	dc02      	bgt.n	8013e30 <__kernel_rem_pio2+0x4c8>
 8013e2a:	9b06      	ldr	r3, [sp, #24]
 8013e2c:	429f      	cmp	r7, r3
 8013e2e:	ddea      	ble.n	8013e06 <__kernel_rem_pio2+0x49e>
 8013e30:	9a06      	ldr	r2, [sp, #24]
 8013e32:	ab48      	add	r3, sp, #288	; 0x120
 8013e34:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8013e38:	e9c6 9a00 	strd	r9, sl, [r6]
 8013e3c:	3c01      	subs	r4, #1
 8013e3e:	e6fa      	b.n	8013c36 <__kernel_rem_pio2+0x2ce>
 8013e40:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013e42:	2b02      	cmp	r3, #2
 8013e44:	dc0b      	bgt.n	8013e5e <__kernel_rem_pio2+0x4f6>
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	dc39      	bgt.n	8013ebe <__kernel_rem_pio2+0x556>
 8013e4a:	d05d      	beq.n	8013f08 <__kernel_rem_pio2+0x5a0>
 8013e4c:	9b02      	ldr	r3, [sp, #8]
 8013e4e:	f003 0007 	and.w	r0, r3, #7
 8013e52:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8013e56:	ecbd 8b02 	vpop	{d8}
 8013e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e5e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013e60:	2b03      	cmp	r3, #3
 8013e62:	d1f3      	bne.n	8013e4c <__kernel_rem_pio2+0x4e4>
 8013e64:	9b05      	ldr	r3, [sp, #20]
 8013e66:	9500      	str	r5, [sp, #0]
 8013e68:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8013e6c:	eb0d 0403 	add.w	r4, sp, r3
 8013e70:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8013e74:	46a2      	mov	sl, r4
 8013e76:	9b00      	ldr	r3, [sp, #0]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	f1aa 0a08 	sub.w	sl, sl, #8
 8013e7e:	dc69      	bgt.n	8013f54 <__kernel_rem_pio2+0x5ec>
 8013e80:	46aa      	mov	sl, r5
 8013e82:	f1ba 0f01 	cmp.w	sl, #1
 8013e86:	f1a4 0408 	sub.w	r4, r4, #8
 8013e8a:	f300 8083 	bgt.w	8013f94 <__kernel_rem_pio2+0x62c>
 8013e8e:	9c05      	ldr	r4, [sp, #20]
 8013e90:	ab48      	add	r3, sp, #288	; 0x120
 8013e92:	441c      	add	r4, r3
 8013e94:	2000      	movs	r0, #0
 8013e96:	2100      	movs	r1, #0
 8013e98:	2d01      	cmp	r5, #1
 8013e9a:	f300 809a 	bgt.w	8013fd2 <__kernel_rem_pio2+0x66a>
 8013e9e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8013ea2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8013ea6:	f1bb 0f00 	cmp.w	fp, #0
 8013eaa:	f040 8098 	bne.w	8013fde <__kernel_rem_pio2+0x676>
 8013eae:	9b04      	ldr	r3, [sp, #16]
 8013eb0:	e9c3 7800 	strd	r7, r8, [r3]
 8013eb4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013eb8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013ebc:	e7c6      	b.n	8013e4c <__kernel_rem_pio2+0x4e4>
 8013ebe:	9e05      	ldr	r6, [sp, #20]
 8013ec0:	ab48      	add	r3, sp, #288	; 0x120
 8013ec2:	441e      	add	r6, r3
 8013ec4:	462c      	mov	r4, r5
 8013ec6:	2000      	movs	r0, #0
 8013ec8:	2100      	movs	r1, #0
 8013eca:	2c00      	cmp	r4, #0
 8013ecc:	da33      	bge.n	8013f36 <__kernel_rem_pio2+0x5ce>
 8013ece:	f1bb 0f00 	cmp.w	fp, #0
 8013ed2:	d036      	beq.n	8013f42 <__kernel_rem_pio2+0x5da>
 8013ed4:	4602      	mov	r2, r0
 8013ed6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013eda:	9c04      	ldr	r4, [sp, #16]
 8013edc:	e9c4 2300 	strd	r2, r3, [r4]
 8013ee0:	4602      	mov	r2, r0
 8013ee2:	460b      	mov	r3, r1
 8013ee4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8013ee8:	f7ec f956 	bl	8000198 <__aeabi_dsub>
 8013eec:	ae4a      	add	r6, sp, #296	; 0x128
 8013eee:	2401      	movs	r4, #1
 8013ef0:	42a5      	cmp	r5, r4
 8013ef2:	da29      	bge.n	8013f48 <__kernel_rem_pio2+0x5e0>
 8013ef4:	f1bb 0f00 	cmp.w	fp, #0
 8013ef8:	d002      	beq.n	8013f00 <__kernel_rem_pio2+0x598>
 8013efa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013efe:	4619      	mov	r1, r3
 8013f00:	9b04      	ldr	r3, [sp, #16]
 8013f02:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013f06:	e7a1      	b.n	8013e4c <__kernel_rem_pio2+0x4e4>
 8013f08:	9c05      	ldr	r4, [sp, #20]
 8013f0a:	ab48      	add	r3, sp, #288	; 0x120
 8013f0c:	441c      	add	r4, r3
 8013f0e:	2000      	movs	r0, #0
 8013f10:	2100      	movs	r1, #0
 8013f12:	2d00      	cmp	r5, #0
 8013f14:	da09      	bge.n	8013f2a <__kernel_rem_pio2+0x5c2>
 8013f16:	f1bb 0f00 	cmp.w	fp, #0
 8013f1a:	d002      	beq.n	8013f22 <__kernel_rem_pio2+0x5ba>
 8013f1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f20:	4619      	mov	r1, r3
 8013f22:	9b04      	ldr	r3, [sp, #16]
 8013f24:	e9c3 0100 	strd	r0, r1, [r3]
 8013f28:	e790      	b.n	8013e4c <__kernel_rem_pio2+0x4e4>
 8013f2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013f2e:	f7ec f935 	bl	800019c <__adddf3>
 8013f32:	3d01      	subs	r5, #1
 8013f34:	e7ed      	b.n	8013f12 <__kernel_rem_pio2+0x5aa>
 8013f36:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8013f3a:	f7ec f92f 	bl	800019c <__adddf3>
 8013f3e:	3c01      	subs	r4, #1
 8013f40:	e7c3      	b.n	8013eca <__kernel_rem_pio2+0x562>
 8013f42:	4602      	mov	r2, r0
 8013f44:	460b      	mov	r3, r1
 8013f46:	e7c8      	b.n	8013eda <__kernel_rem_pio2+0x572>
 8013f48:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013f4c:	f7ec f926 	bl	800019c <__adddf3>
 8013f50:	3401      	adds	r4, #1
 8013f52:	e7cd      	b.n	8013ef0 <__kernel_rem_pio2+0x588>
 8013f54:	e9da 8900 	ldrd	r8, r9, [sl]
 8013f58:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013f5c:	9b00      	ldr	r3, [sp, #0]
 8013f5e:	3b01      	subs	r3, #1
 8013f60:	9300      	str	r3, [sp, #0]
 8013f62:	4632      	mov	r2, r6
 8013f64:	463b      	mov	r3, r7
 8013f66:	4640      	mov	r0, r8
 8013f68:	4649      	mov	r1, r9
 8013f6a:	f7ec f917 	bl	800019c <__adddf3>
 8013f6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013f72:	4602      	mov	r2, r0
 8013f74:	460b      	mov	r3, r1
 8013f76:	4640      	mov	r0, r8
 8013f78:	4649      	mov	r1, r9
 8013f7a:	f7ec f90d 	bl	8000198 <__aeabi_dsub>
 8013f7e:	4632      	mov	r2, r6
 8013f80:	463b      	mov	r3, r7
 8013f82:	f7ec f90b 	bl	800019c <__adddf3>
 8013f86:	ed9d 7b06 	vldr	d7, [sp, #24]
 8013f8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013f8e:	ed8a 7b00 	vstr	d7, [sl]
 8013f92:	e770      	b.n	8013e76 <__kernel_rem_pio2+0x50e>
 8013f94:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013f98:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013f9c:	4640      	mov	r0, r8
 8013f9e:	4632      	mov	r2, r6
 8013fa0:	463b      	mov	r3, r7
 8013fa2:	4649      	mov	r1, r9
 8013fa4:	f7ec f8fa 	bl	800019c <__adddf3>
 8013fa8:	e9cd 0100 	strd	r0, r1, [sp]
 8013fac:	4602      	mov	r2, r0
 8013fae:	460b      	mov	r3, r1
 8013fb0:	4640      	mov	r0, r8
 8013fb2:	4649      	mov	r1, r9
 8013fb4:	f7ec f8f0 	bl	8000198 <__aeabi_dsub>
 8013fb8:	4632      	mov	r2, r6
 8013fba:	463b      	mov	r3, r7
 8013fbc:	f7ec f8ee 	bl	800019c <__adddf3>
 8013fc0:	ed9d 7b00 	vldr	d7, [sp]
 8013fc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013fc8:	ed84 7b00 	vstr	d7, [r4]
 8013fcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013fd0:	e757      	b.n	8013e82 <__kernel_rem_pio2+0x51a>
 8013fd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013fd6:	f7ec f8e1 	bl	800019c <__adddf3>
 8013fda:	3d01      	subs	r5, #1
 8013fdc:	e75c      	b.n	8013e98 <__kernel_rem_pio2+0x530>
 8013fde:	9b04      	ldr	r3, [sp, #16]
 8013fe0:	9a04      	ldr	r2, [sp, #16]
 8013fe2:	601f      	str	r7, [r3, #0]
 8013fe4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8013fe8:	605c      	str	r4, [r3, #4]
 8013fea:	609d      	str	r5, [r3, #8]
 8013fec:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013ff0:	60d3      	str	r3, [r2, #12]
 8013ff2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ff6:	6110      	str	r0, [r2, #16]
 8013ff8:	6153      	str	r3, [r2, #20]
 8013ffa:	e727      	b.n	8013e4c <__kernel_rem_pio2+0x4e4>
 8013ffc:	41700000 	.word	0x41700000
 8014000:	3e700000 	.word	0x3e700000
 8014004:	00000000 	.word	0x00000000

08014008 <scalbn>:
 8014008:	b570      	push	{r4, r5, r6, lr}
 801400a:	ec55 4b10 	vmov	r4, r5, d0
 801400e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8014012:	4606      	mov	r6, r0
 8014014:	462b      	mov	r3, r5
 8014016:	b999      	cbnz	r1, 8014040 <scalbn+0x38>
 8014018:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801401c:	4323      	orrs	r3, r4
 801401e:	d03f      	beq.n	80140a0 <scalbn+0x98>
 8014020:	4b35      	ldr	r3, [pc, #212]	; (80140f8 <scalbn+0xf0>)
 8014022:	4629      	mov	r1, r5
 8014024:	ee10 0a10 	vmov	r0, s0
 8014028:	2200      	movs	r2, #0
 801402a:	f7ec fa6d 	bl	8000508 <__aeabi_dmul>
 801402e:	4b33      	ldr	r3, [pc, #204]	; (80140fc <scalbn+0xf4>)
 8014030:	429e      	cmp	r6, r3
 8014032:	4604      	mov	r4, r0
 8014034:	460d      	mov	r5, r1
 8014036:	da10      	bge.n	801405a <scalbn+0x52>
 8014038:	a327      	add	r3, pc, #156	; (adr r3, 80140d8 <scalbn+0xd0>)
 801403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801403e:	e01f      	b.n	8014080 <scalbn+0x78>
 8014040:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014044:	4291      	cmp	r1, r2
 8014046:	d10c      	bne.n	8014062 <scalbn+0x5a>
 8014048:	ee10 2a10 	vmov	r2, s0
 801404c:	4620      	mov	r0, r4
 801404e:	4629      	mov	r1, r5
 8014050:	f7ec f8a4 	bl	800019c <__adddf3>
 8014054:	4604      	mov	r4, r0
 8014056:	460d      	mov	r5, r1
 8014058:	e022      	b.n	80140a0 <scalbn+0x98>
 801405a:	460b      	mov	r3, r1
 801405c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014060:	3936      	subs	r1, #54	; 0x36
 8014062:	f24c 3250 	movw	r2, #50000	; 0xc350
 8014066:	4296      	cmp	r6, r2
 8014068:	dd0d      	ble.n	8014086 <scalbn+0x7e>
 801406a:	2d00      	cmp	r5, #0
 801406c:	a11c      	add	r1, pc, #112	; (adr r1, 80140e0 <scalbn+0xd8>)
 801406e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014072:	da02      	bge.n	801407a <scalbn+0x72>
 8014074:	a11c      	add	r1, pc, #112	; (adr r1, 80140e8 <scalbn+0xe0>)
 8014076:	e9d1 0100 	ldrd	r0, r1, [r1]
 801407a:	a319      	add	r3, pc, #100	; (adr r3, 80140e0 <scalbn+0xd8>)
 801407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014080:	f7ec fa42 	bl	8000508 <__aeabi_dmul>
 8014084:	e7e6      	b.n	8014054 <scalbn+0x4c>
 8014086:	1872      	adds	r2, r6, r1
 8014088:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801408c:	428a      	cmp	r2, r1
 801408e:	dcec      	bgt.n	801406a <scalbn+0x62>
 8014090:	2a00      	cmp	r2, #0
 8014092:	dd08      	ble.n	80140a6 <scalbn+0x9e>
 8014094:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014098:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801409c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80140a0:	ec45 4b10 	vmov	d0, r4, r5
 80140a4:	bd70      	pop	{r4, r5, r6, pc}
 80140a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80140aa:	da08      	bge.n	80140be <scalbn+0xb6>
 80140ac:	2d00      	cmp	r5, #0
 80140ae:	a10a      	add	r1, pc, #40	; (adr r1, 80140d8 <scalbn+0xd0>)
 80140b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140b4:	dac0      	bge.n	8014038 <scalbn+0x30>
 80140b6:	a10e      	add	r1, pc, #56	; (adr r1, 80140f0 <scalbn+0xe8>)
 80140b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140bc:	e7bc      	b.n	8014038 <scalbn+0x30>
 80140be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80140c2:	3236      	adds	r2, #54	; 0x36
 80140c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80140c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80140cc:	4620      	mov	r0, r4
 80140ce:	4b0c      	ldr	r3, [pc, #48]	; (8014100 <scalbn+0xf8>)
 80140d0:	2200      	movs	r2, #0
 80140d2:	e7d5      	b.n	8014080 <scalbn+0x78>
 80140d4:	f3af 8000 	nop.w
 80140d8:	c2f8f359 	.word	0xc2f8f359
 80140dc:	01a56e1f 	.word	0x01a56e1f
 80140e0:	8800759c 	.word	0x8800759c
 80140e4:	7e37e43c 	.word	0x7e37e43c
 80140e8:	8800759c 	.word	0x8800759c
 80140ec:	fe37e43c 	.word	0xfe37e43c
 80140f0:	c2f8f359 	.word	0xc2f8f359
 80140f4:	81a56e1f 	.word	0x81a56e1f
 80140f8:	43500000 	.word	0x43500000
 80140fc:	ffff3cb0 	.word	0xffff3cb0
 8014100:	3c900000 	.word	0x3c900000
 8014104:	00000000 	.word	0x00000000

08014108 <floor>:
 8014108:	ec51 0b10 	vmov	r0, r1, d0
 801410c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014114:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8014118:	2e13      	cmp	r6, #19
 801411a:	ee10 5a10 	vmov	r5, s0
 801411e:	ee10 8a10 	vmov	r8, s0
 8014122:	460c      	mov	r4, r1
 8014124:	dc31      	bgt.n	801418a <floor+0x82>
 8014126:	2e00      	cmp	r6, #0
 8014128:	da14      	bge.n	8014154 <floor+0x4c>
 801412a:	a333      	add	r3, pc, #204	; (adr r3, 80141f8 <floor+0xf0>)
 801412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014130:	f7ec f834 	bl	800019c <__adddf3>
 8014134:	2200      	movs	r2, #0
 8014136:	2300      	movs	r3, #0
 8014138:	f7ec fc76 	bl	8000a28 <__aeabi_dcmpgt>
 801413c:	b138      	cbz	r0, 801414e <floor+0x46>
 801413e:	2c00      	cmp	r4, #0
 8014140:	da53      	bge.n	80141ea <floor+0xe2>
 8014142:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8014146:	4325      	orrs	r5, r4
 8014148:	d052      	beq.n	80141f0 <floor+0xe8>
 801414a:	4c2d      	ldr	r4, [pc, #180]	; (8014200 <floor+0xf8>)
 801414c:	2500      	movs	r5, #0
 801414e:	4621      	mov	r1, r4
 8014150:	4628      	mov	r0, r5
 8014152:	e024      	b.n	801419e <floor+0x96>
 8014154:	4f2b      	ldr	r7, [pc, #172]	; (8014204 <floor+0xfc>)
 8014156:	4137      	asrs	r7, r6
 8014158:	ea01 0307 	and.w	r3, r1, r7
 801415c:	4303      	orrs	r3, r0
 801415e:	d01e      	beq.n	801419e <floor+0x96>
 8014160:	a325      	add	r3, pc, #148	; (adr r3, 80141f8 <floor+0xf0>)
 8014162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014166:	f7ec f819 	bl	800019c <__adddf3>
 801416a:	2200      	movs	r2, #0
 801416c:	2300      	movs	r3, #0
 801416e:	f7ec fc5b 	bl	8000a28 <__aeabi_dcmpgt>
 8014172:	2800      	cmp	r0, #0
 8014174:	d0eb      	beq.n	801414e <floor+0x46>
 8014176:	2c00      	cmp	r4, #0
 8014178:	bfbe      	ittt	lt
 801417a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801417e:	4133      	asrlt	r3, r6
 8014180:	18e4      	addlt	r4, r4, r3
 8014182:	ea24 0407 	bic.w	r4, r4, r7
 8014186:	2500      	movs	r5, #0
 8014188:	e7e1      	b.n	801414e <floor+0x46>
 801418a:	2e33      	cmp	r6, #51	; 0x33
 801418c:	dd0b      	ble.n	80141a6 <floor+0x9e>
 801418e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014192:	d104      	bne.n	801419e <floor+0x96>
 8014194:	ee10 2a10 	vmov	r2, s0
 8014198:	460b      	mov	r3, r1
 801419a:	f7eb ffff 	bl	800019c <__adddf3>
 801419e:	ec41 0b10 	vmov	d0, r0, r1
 80141a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141a6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80141aa:	f04f 37ff 	mov.w	r7, #4294967295
 80141ae:	40df      	lsrs	r7, r3
 80141b0:	4238      	tst	r0, r7
 80141b2:	d0f4      	beq.n	801419e <floor+0x96>
 80141b4:	a310      	add	r3, pc, #64	; (adr r3, 80141f8 <floor+0xf0>)
 80141b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ba:	f7eb ffef 	bl	800019c <__adddf3>
 80141be:	2200      	movs	r2, #0
 80141c0:	2300      	movs	r3, #0
 80141c2:	f7ec fc31 	bl	8000a28 <__aeabi_dcmpgt>
 80141c6:	2800      	cmp	r0, #0
 80141c8:	d0c1      	beq.n	801414e <floor+0x46>
 80141ca:	2c00      	cmp	r4, #0
 80141cc:	da0a      	bge.n	80141e4 <floor+0xdc>
 80141ce:	2e14      	cmp	r6, #20
 80141d0:	d101      	bne.n	80141d6 <floor+0xce>
 80141d2:	3401      	adds	r4, #1
 80141d4:	e006      	b.n	80141e4 <floor+0xdc>
 80141d6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80141da:	2301      	movs	r3, #1
 80141dc:	40b3      	lsls	r3, r6
 80141de:	441d      	add	r5, r3
 80141e0:	45a8      	cmp	r8, r5
 80141e2:	d8f6      	bhi.n	80141d2 <floor+0xca>
 80141e4:	ea25 0507 	bic.w	r5, r5, r7
 80141e8:	e7b1      	b.n	801414e <floor+0x46>
 80141ea:	2500      	movs	r5, #0
 80141ec:	462c      	mov	r4, r5
 80141ee:	e7ae      	b.n	801414e <floor+0x46>
 80141f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80141f4:	e7ab      	b.n	801414e <floor+0x46>
 80141f6:	bf00      	nop
 80141f8:	8800759c 	.word	0x8800759c
 80141fc:	7e37e43c 	.word	0x7e37e43c
 8014200:	bff00000 	.word	0xbff00000
 8014204:	000fffff 	.word	0x000fffff

08014208 <_init>:
 8014208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801420a:	bf00      	nop
 801420c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801420e:	bc08      	pop	{r3}
 8014210:	469e      	mov	lr, r3
 8014212:	4770      	bx	lr

08014214 <_fini>:
 8014214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014216:	bf00      	nop
 8014218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801421a:	bc08      	pop	{r3}
 801421c:	469e      	mov	lr, r3
 801421e:	4770      	bx	lr
